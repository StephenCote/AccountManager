<?xml version="1.0" encoding="utf-8" ?>
<html-fragment>

	<import-style src ="Styles/Designer.css" id ="designer" />
	<import-style src ="Styles/GridStyle.css" id ="grid" />

	<div class = "buttons_bar" rid = "buttons-bar">
		<input type="button" rid = "button_refresh" class = "designer_button refresh_button" button-action = "Refresh" />
		<input type="button" rid = "button_new" class = "designer_button new_button" button-action = "New" />
		<input type="button" rid = "button_open" class = "designer_button open_button" button-action = "Open"  />
		<input type ="button" rid = "button_design" class ="designer_button design_button" button-action = "Design" />
		<input type="button" style ="display:none;" rid = "button_save" class = "designer_button save_button" button-action = "Save" />
		<input type="button" rid = "button_delete" class = "designer_button delete_button" button-action = "Delete"  />
		<div rid = "button_spacer_1" class = "designer_button_spacer"></div>
		<input type = "text" rid = "path" style = "margin-top: 5px; width: 120px !important; float: left;" placeholder = "~/Path" class = "rocket-text" />
		<input type = "button" rid = "parentPickerBtn" value = "..." style = "margin-top:5px;float: left;" class = "designer-button" onclick = "${this}.chooseParent()" />
		<input class = "rocket-text rocket-text-pick" style = "display:none;margin-top: 5px; width: 75px !important; float: left;" type = "text" rid = "filter" value = "" />
		<input class = "rocket-button" type = "button" rid = "button_search" style = "display:none;margin-top: 5px; float: left;" value = "?" onclick = "${this}._search()" />
		<div rid = "button_spacer_2" class = "designer_button_spacer"></div>
		<input type="button" rid = "button_move_first" disabled = "true" class = "designer_button" button-action = "MoveFirst" value = "&lt;&lt;" />
		<input type="button" rid = "button_move_prev" disabled = "true" class = "designer_button" button-action = "MovePrev" value = "&lt;" />
		<input type="button" rid = "button_move_next" disabled = "true" class = "designer_button" button-action = "MoveNext" value = "&gt;" />
		<input type="button" rid = "button_move_last" disabled = "true" class = "designer_button" button-action = "MoveLast" value = "&gt;&gt;" />
		<div class = "designer_button_label" rid = "record_label"></div>
	</div>
	<div class = "uwm-box-border" component = "wideselect" rid = "typelist">
	</div>
	<div rid = "control_bar" style = "display:none;">
		<input class = "rocket-button" type = "button" value = "Pick and Continue" rid = "button_pickmulti" onclick = "${this}.pickItem(1)" />
		<input class = "rocket-button" type = "button" value = "Pick" rid = "button_pickone" onclick = "${this}.pickItem()" />
		<input class = "rocket-button" type = "button" value = "Cancel" rid = "button_cancelpick" onclick = "${this}.cancelPickItem()" />
	</div>
	<div rid = "debugCont" style = "display:none;clear:both;" class = "rocket-column-2">
		<p rid = "lblDebug">
			Debug:
		</p>
		<p>
			<input rid = "btnDebug" type = "button" class = "rocket-button" value = "Debug" onclick = "${this}.sendToDebug()" />
		</p>
	</div>
	<p><span rid = "status">[ ... ]</span></p>
	<!--
	Members:
		InitializeIOGrid
		LoadIOGrid
		SetTotalItemCount
		ToggleIOGridSelectItem
		
	Virtuals:
		CreateNewItem
		SaveSelectedItem
		provideOpenItem
		provideSelectItem
		DeleteSelectedItem
		refreshList
		DrawIOGridItem
		DrawIOGridHeader
		DrawIOGridFooter
		preparePathChange
		provideRefresh
		provideList
		provideCount
		search
	-->
	<embedded-script>
		<![CDATA[
		initGrid : function(sTypeName, sDefPath, sViewTypeName, bNotAGroup, bNoPopulate,vParent,bManualPick,bShowSearch){

			var _s = this.getProperties(),_o = this.getObjects(),o;
			
			this.scopeHandler("profiler_loaded", 0, 0, 1);
			this.getElementByRID("debugCont").style.display = (uwm.debugMode ? "block" : "none");
			
			_s.populate = (bNoPopulate ? 0 : 1);
			
			if(!_s.manualPick) _s.manualPick = (bManualPick ? 1 : 0);
			if(_s.manualPick){
				this.getElementByRID("control_bar").style.display = "block";
			}
			if(vParent){
				_o.parentRef = vParent;
			}
			
			if(bShowSearch){
				this.getElementByRID("filter").style.display = "";
				this.getElementByRID("button_search").style.display = "";
			}
	
			if(!sViewTypeName) sViewTypeName = sTypeName;
			_s.typeName = sTypeName;
			_s.viewTypeName = sViewTypeName;
			_s.start_record = 0;
			_s.record_count = 10;

			if(bNotAGroup) _s.noGroup = 1;
			if(!_s.noGroup || vParent){
				var s = this.getParentPath();
				this.getElementByRID("path").placeholder = (sDefPath ? sDefPath : (s ? s : "~/" + sTypeName + "s"));
				this.scopeHandler("input_keypress",0,0,1);
				this.getElementByRID("path").onkeypress = this._prehandle_input_keypress;	
			}
			else{
				this.getElementByRID("path").style.display = "none";
				this.getElementByRID("parentPickerBtn").style.display = "none";
			}
			if(this.setTitle) this.setTitle(sViewTypeName);
			
			if(_s.openerId && (o = Hemi.registry.service.getObject(_s.openerId)) && o.parentResolver){
				o.parentResolver(this); 
			}
			else{
				///Hemi.log("DON'T CALL PARENT because " + _s.openerId + " : " + (o ? (typeof o.parentResolver) : ""));
			}
			
			this.getComponentByRID("typelist").setLoadHandler(this.scopeHandler("configList",0,1,1));
			
		},
		sendToDebug : function(o){
        	this.getObjects().debugObject = o; 
        	Hemi.app.createWindow('Framework Profiler','Templates/FrameworkProfiler.xml','Profiler',0,0,0,this._prehandle_profiler_loaded);
        },
        _handle_profiler_loaded : function(oW){
        	if(typeof oW.ShowTab == "function" && typeof ActiveSource == "object"){
				oW.ShowTab("Active Source");
				var oSource = oW.getElementByRID("oSource");
				var oEval = oW.getElementByRID("oEval");
				var sCont = "";
				ActiveObjects.valContainer = 0;
				ActiveObjects.valReference = 0;
				ActiveObjects.valBridge = 0;
				ActiveObjects.valComponent = 0;
				var oBean = (this.getObjects().debugObject ? this.getObjects().debugObject : this.getBean("rocketType"));
				delete this.getObjects().debugObject;
				oEval.value = "ActiveObjects.val";
				ActiveObjects.val = (oBean ? oBean : this);

				if(oBean){
					oW.Reflect();
				}
				else{
					oSource.value = 
						"Active Template"
					;
				}
			}
			      	
        },
		chooseParent : function(){
			var sType = this.getProperties().viewTypeName;
			if(!sType.match(/^(group|permission|role)$/gi)) sType = "Group";
			this.manageList(sType, 0,"pickParent",uwm.getPathForType(sType),1);
		},
		pickParent : function(s, v){
			if(!v || v == null) return;
			this.getElementByRID("path").value = (v.path ? v.path : v.groupPath) + "/" + v.name;
			this.refreshList();
		},
		
		/// TODO: Refactor some of this common code into an external fragment
		///
		manageList : function(sType, sListId, sFN, sDefPath,bManPick){
			var oProps = {openerId:this.getObjectId(),listType:sType,picker:1,manualPick:bManPick,pickFunction:sFN,listId:sListId,defaultPath:sDefPath,noMask:1};
			Hemi.app.createWindow("ManageList", uwm.getApiTypeView(sType) + "/Forms/List" + sType + "s.xml", "Manager-" + Hemi.guid(), 0, 0, oProps, 0)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(520, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	oW.setHideOnClose(0);
	            }
	           });
		},
		parentResolver : function(v){
			var _s = this.getProperties();
			if(this.resolve) this.resolve(v);
			if(_s.openerId && (o = Hemi.registry.service.getObject(_s.openerId)) && o.parentResolver) o.parentResolver(v);
		},
		resizeList : function(){
			if(this.getBody) this.resizeFrame(this.getList().getContainer());
			else{
				var iH = this.getContainer().parentNode.parentNode.offsetHeight - this.getElementByRID("typelist").offsetTop;
				this.getList().getContainer().style.height = iH + "px";
			}
			var iW = this.getContainer().parentNode.parentNode.offsetWidth - 200;
		},
		embedded_init : function(){
		
		},
		embedded_destroy : function(){
			Hemi.message.service.unsubscribe(this, "onsessionrefresh", "handle_list_session_refresh");
			Hemi.message.service.unsubscribe(this, "onchangecommunity", "refreshCommunity");
			this._prehandle_profiler_loaded = 0;
			this._prehandle_input_keypress = null;
		},
		_handle_input_keypress : function(e){
			e = Hemi.event.getEvent(e);
			
			if(e.keyCode == 13){
				var sP = this.getElementByRID("path").value;
				if(!sP.length) sP = this.getElementByRID("path").placeholder;
				if(this.getProperties().noGroup) this.getObjects().parentRef = AM6Client.find(this.getProperties().typeName.toUpperCase(),"UNKNOWN",sP);
				this.refreshList();
			}
		},
		closeToFocus : function(){
			var o;
			if(this.Close) this.Close();
			if(this.getProperties().openerId && (o = Hemi.registry.service.getObject(this.getProperties().openerId)) && o.getFocus){
				o.getFocus();
			}
		},
		cancelPickItem : function(){
			if(this.Close) this.closeToFocus();
		},
		
		_search : function(){
			var filter = this.getElementByRID("filter").value;
			if(this.search) this.search(filter);
			else this.defaultSearch(filter);
		},
		defaultSearch : function(sFilter){
			var oM = AM6Client.newFieldMatch("TEXT","NAME","LIKE","*" + sFilter + "*");
			var oS = AM6Client.newSortQuery("NAME","ASCENDING");
			var oReq = AM6Client.newSearchRequest(this.getProperties().typeName.toUpperCase(),0,0,0,10,false,oS,[oM]);
			var ctl = this;
			AM6Client.search(oReq,function(s,v){
				if(v && v.json){
					///alert(v.json);
					var oL = ctl.getList();
					oL.clearItems();
					ctl.setTotalCount(v.json.length);
					for(var i = 0; i < v.json.length; i++){
						var sn = (ctl.decorateListItemName ? ctl.decorateListItemName(v.json[i]) : v.json[i].name);
						console.log(sn);
						oL.addItem(sn, v.json[i]);
					}
				}
			});
		},
		configList : function(){
			if(!this.local_handle_resize) this.local_handle_resize = this.resizeList;
			this.resizeList();
			this.getList().setResultHandler( this.scopeHandler("typelistclick",0,0,1));
			this.refreshList();
			Hemi.message.service.subscribe(this, "onsessionrefresh", "handle_list_session_refresh");
			Hemi.message.service.subscribe(this, "onchangecommunity", "refreshCommunity");
		},
				
		getList : function(){
			return this.getComponentByRID("typelist").GetWideSelect();
		},
		getParentPath : function(){
			var s,vParent = this.getObjects().parentRef;
			if(vParent && (vParent.nameType.match(/^ROLE$/) || vParent.nameType.match(/^PERMISSION$/))){
				s = vParent.parentPath + "/" + vParent.name;
			}
			return s; 
		},
		getPath : function(){
			if(this.getProperties().noGroup && !this.getObjects().parentRef) return 0;
			var o = this.getElementByRID("path"), s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s){
					s = this.getParentPath();
					if(!s) s = "~/" + this.getProperties().typeName + "s";
				}
			}
			return s;
		},
		refreshCommunity : function(s, v){
			var sPath = uwm.getPathForType(this.getProperties().typeName,"~/" + this.getProperties().typeName + "s");
			this.getElementByRID("path").placeholder = sPath;
			this.getElementByRID("path").value = sPath;
			this.refreshList();
		},
		handle_list_session_refresh : function(s, v){
			this.refreshList();
		},
		pickItem : function(b){
			var o = this.getList().getActiveItem();
			this.setStatus("");
			if(!o){
				this.setStatus("Nothing is selected");
				return;
			}
			this._handle_typelistclick("manualpick",o);
			if(!b && this.Close) this.closeToFocus();
		},

		_handle_typelistclick : function(s, v){
			this.enableButton("button_delete");
			this.enableButton("button_open");
			/// TODO: deprecate handle_list_click for provideSelectItem
			if(this.handle_list_click) this.handle_list_click(v);
			if(this.provideSelectItem) this.provideSelectItem(v);
			if(this.getProperties().picker && (!this.getProperties().manualPick || s == "manualpick")){
				var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
				if(this.getProperties().pickFunction && oOpener[this.getProperties().pickFunction]){
					oOpener[this.getProperties().pickFunction](this.getProperties().formType,v.data, this.getProperties().sourceId,this);
				}
				else{
					var oL = 0;
					if(this.getProperties().listId) oL = Hemi.registry.service.getObject(this.getProperties().listId);
					else if(oOpener.getList) oL = oOpener.getList();
					else if(oOpener["get" + this.getProperties().typeName + "sList"]) oL = oOpener["get" + this.getProperties().typeName + "sList"]();
					if(oL && v && v.data) oL.addItem(v.data.name, v.data);
					else if(this.getProperties().pickFunction && oOpener[this.getProperties().pickFunction]) oOpener[this.getProperties().pickFunction](this.getProperties().formType,v.data, this.getProperties().sourceId,this);
				}
				if(this.Close && s != "manualpick") this.closeToFocus();
			}
		},
		
		showButton : function(n){
				var o = this.getElementByRID("button_" + n);
				if(o) o.style.display = "";
		},
		hideButton : function(n){
				var o = this.getElementByRID("button_" + n);
				if(o) o.style.display = "none";
		},
		_handle_exec_button : function(e){
			var o = Hemi.event.getEventSource(e);
			var d = this.get_frame("designer");
			var s = o.getAttribute("button-action"); 
			var bRM = this.getProperties().response_mode;
			var oItem = this.getList().getActiveItem();
			switch(s){
				case "New":
					this.createItem();
					break;
				case "Save":
					if(typeof this.SaveSelectedItem == "function") this.SaveSelectedItem();
					break;
				case "MoveLast":
					this.getProperties().start_record = this.getProperties().total_count - this.getProperties().record_count;
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "MoveFirst":
					this.getProperties().start_record = 0;
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "MovePrev":
					this.getProperties().start_record -= this.getProperties().record_count;
					if(this.getProperties().start_record < 0) this.getProperties().start_record = 0;
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "MoveNext":
					this.getProperties().start_record += this.getProperties().record_count;
					if(this.getProperties().total_count > 0 && this.getProperties().start_record >= this.getProperties().total_count){
						this.getProperties().start_record = this.getProperties().total_count - this.getProperties().record_count;
					}
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "Refresh":
					AM6Client.clearCache(this.getProperties().typeName.toUpperCase(),1);
					this.refreshList();
					break;
				case "Open":
					if(!oItem) return;
					this.openItem(oItem.data);
					break;
				case "Design":
					if(!oItem){
						if(this.getProperties().typeName == "Data") this.openWindow(this.getProperties().viewTypeName,0,"Design");
					}
					else{
						this.designItem(oItem.data);
					}
					break;
				case "Delete":
					if(!oItem) return;
					if(this.deleteItem(oItem.data)){
						this.disableButton("button_delete");
						this.disableButton("button_open");
						//this.refreshList();
					}
					break;
			}
		},
		openDataData : function(a){
			if(a.detailsOnly) a = AM6Client.get("DATA", a.objectId);
			var vData = {media_name:a.name,media_id:a.id,maxWidth:500,maxHeight:500,media_url:"data:" + a.mimeType + ";base64," + a.dataBytesStore};
			Hemi.app.createWindow("View " + a.name, "/AccountManagerService/Forms/ImageViewer.xml", "View-" + a.id, 0, 0, vData)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 300);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            } 
            });
	
		},
		designItem : function(o){
			/// Data

			if(o.nameType == "DATA" && o.mimeType && o.mimeType.match(/^text/)){
				this.openItem(o,"DataDesign",1);
			}
			else if(o.nameType == "DATA" && o.mimeType && o.mimeType.match(/^image/)){
				this.openDataData(o);
			}
			else if(o.nameType == "FORM" && !o.isTemplate){
				this.openItem(o,"FormView");
			}
			else if(o.nameType == "PROJECT"){
				this.openItem(o,"ProjectDesign",1);
			}
			else if(o.nameType == "GROUP"){
				if(!o.populated) o = AM6Client.get("GROUP",o.objectId);
				this.getProperties().listGroupType = o.groupType;
				this.getElementByRID("path").value = o.path;
				this.getProperties().start_record = 0;
				this.getProperties().viewType = o;
				this.refreshList();
			}
			else if(o.nameType == "ROLE" || o.nameType == "PERMISSION"){
				this.getObjects().parentRef = o;
				this.getElementByRID("path").value = this.getParentPath();
				this.getProperties().start_record = 0;
				//this.getProperties().viewType = o;
				this.refreshList();
				//this.openItem(o,"ListGroups",1);
			}
			else if(o.nameType.match(/^(account|person|user)$/gi)){
				this.openItem(o, "Profile");
			}

		},
		openItem : function(o,v,b){
			var _s = this.getProperties();

			if(_s.populate && !o.populated){
				if(!v && o.nameType && o.nameType.match(/^data$/gi) && o.detailsOnly && o.blob){
					Hemi.log("Not pulling own blob data for " + o.name + " unless specifically requested.");
				}
				else if(!o.nameType.match(/^data$/gi) || o.detailsOnly){
					Hemi.log("Not populated.  Fetching a populated version.");
					if(o.nameType.match(/^group$/gi)) o = AM6Client.get("GROUP",o.objectId);
					else if(o.nameType.match(/^(role|permission)$/gi)) o = AM6Client.get(this.getProperties().typeName.toUpperCase(), o.id);
					else if(this.provideItem) o = this.provideItem(this.getProperties().typeName,o);
					else if(o.id)  o = AM6Client.get(this.getProperties().typeName.toUpperCase(), o.id);
					else o = AM6Client.getByName(this.getProperties().typeName.toUpperCase(), AM6Client.find("GROUP","DATA",o.groupPath).objectId,o.name);
					if(!o || o == null){
						Hemi.logError("Failed to retrieve object");
						alert("Unable to open item");
						return;
					}
					if(!o.populated) alert("still not populated");
				}
			}
			if(this.provideOpenItem) this.provideOpenItem(o);
			else this.openWindow(this.getProperties().viewTypeName, o, v, (b ? o.path : 0));
		},
		createItem : function(){
			if(this.provideCreateItem) this.provideCreateItem(this.getProperties().viewTypeName);
			else this.openWindow(this.getProperties().viewTypeName);
		},
		openWindow : function(sType,oType,v, p){
			var oProps = {parentRef:this.getObjects().parentRef,defaultPath:(p ? p : this.getPath()),openerId:this.getObjectId(),listType:sType,picker:0,viewType:oType,listId:this.getList().getObjectId()};
			if(sType.match(/^group$/gi)) oProps.defaultGroupType = this.getProperties().listGroupType;
			Hemi.app.createWindow((oType && oType.id ? oType.name : "New" + sType), uwm.getApiTypeView(sType) + "/Forms/" + (v ? v : sType) + ".xml", "View-" + (oType && oType.id ? sType + "-" + oType.id : Hemi.guid()), 0, 0, oProps)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo((v ? 700 : 475), (v ? 500 : 400));
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		},
		deleteItem : function(o){
			var b = 0;
			if(!uwm.rule("IsLoggedIn")){
				this.setStatus("Not Authenticated");
				return b;
			}
			else if(this.provideDelete){
				b = this.provideDelete(o);
			}
			else{

				var ctl = this;
				var vCfg = {
					hemiSvcCfg:1,
					async:1,
					handler:function(s, v){
						if(ctl.getReadyState() != 4) return;
						if(typeof v.json == "boolean" && v.json){
							Hemi.log("Deleted " + ctl.getProperties().typeName + " object #" + o.id);
							ctl.setStatus("Deleted " + ctl.getProperties().typeName + " object #" + o.id);
							ctl.refreshList();
						}
						else{
							Hemi.logError("Unabe to delete " + ctl.getProperties().typeName + " object #" + o.id);
							ctl.setStatus("Unable to delete " + ctl.getProperties().typeName + " object #" + o.id);
						}
					}
				};
				return AM6Client.delete(this.getProperties().typeName.toUpperCase(),o.objectId,vCfg.handler);
			}
			
		
		},
		disableButtons : function(){
			this.disableButton("button_delete");
			this.disableButton("button_open");
			this.disableButton("button_move_first");
			this.disableButton("button_move_last");
			this.disableButton("button_move_next");
			this.disableButton("button_move_prev");		
		},

		setTotalCount : function(i){
			this.getProperties().total_count = i;
			this.disableButton("button_move_first");
			this.disableButton("button_move_last");
			this.disableButton("button_move_next");
			this.disableButton("button_move_prev");	
			if(this.getProperties().start_record > 0){
				this.getElementByRID("button_move_prev").disabled = false;
				this.getElementByRID("button_move_first").disabled = false;
			}
			
			if((this.getProperties().start_record + this.getProperties().record_count) < this.getProperties().total_count){
				this.getElementByRID("button_move_next").disabled = false;
				this.getElementByRID("button_move_last").disabled = false;
			}

			if(this.getProperties().total_count > 0) Hemi.xml.setInnerXHTML(this.getElementByRID("record_label"),(this.getProperties().start_record + 1) + "-" + (this.getProperties().start_record + this.getProperties().record_count) + " of " + this.getProperties().total_count);
			else Hemi.xml.setInnerXHTML(this.getElementByRID("record_label"),"0 of 0");

		},

		refreshList : function(bSkipCountReset){
			var sPath, _s = this.getProperties(), _o = this.getObjects();
			var sFilt = this.getElementByRID("filter").value;
			
			if(this.provideRefresh) this.provideRefresh(bSkipCountReset);

			if(!_s.noGroup){
				sPath = this.getPath();
			}
			var oL = this.getList();
			oL.clearItems();
			this.setStatus("");
			if(!bSkipCountReset) this.setTotalCount(0);
			else if(_s.typeName){
				uwmServiceCache.clearServiceCache(_s.typeName);
			}
			var vComp = {};
			if(_s.picker && !_s.noMask){
				var oOpener = Hemi.registry.service.getObject(_s.openerId);
				var oL2 = 0;
				if(_s.listId){
					oL2 = Hemi.registry.service.getObject(_s.listId);
					if(!oL2.getObjectType().match(/wideselect/gi)) oL2 = 0;
				}

				if(oOpener.getList) oL2 = oOpener.getList();
				else if(oOpener["get" + _s.typeName + "sList"]) oL2 = oOpener["get" + _s.typeName + "sList"]();
				if(oL2){
					for(var i = 0; i < oL2.getItems().length;i++) vComp[oL2.getItems()[i].name]=1;
				}
			}
			if(!_s.typeName){
				this.setStatus("Pending ...");
				return;
			}
			
			if(!uwm.rule("IsLoggedIn")){
				this.setStatus("Not Authenticated");
			}
			else{
				/// TODO - change the count method API to use the path like the other calls
				///
				if(!bSkipCountReset){
					var count = 0;

					if(this.provideCount) count = this.provideCount(sPath, sFilt);
					else if(sPath && !_s.noGroup){
						var sT = "GROUP";
						var sTO = "UNKNOWN";
						if(_s.typeName.match(/^(permission|role)$/gi)){
							sT = _s.typeName.toUpperCase();
							sTO = "UNKNOWN";
						}
						var oP = AM6Client.find(sT,sTO,sPath);
						if(oP && oP != null){
							if(this.preparePathChange) this.preparePathChange(oP, sFilt);
							if(oP.groupType && oP.groupType.match(/^bucket$/gi)){
								
								if(this.provideMemberCount) count = this.provideMemberCount();
							}
							else{
								count = AM6Client.count(_s.typeName.toUpperCase(),oP.objectId);
							}
						}
					}
					else count = AM6Client.count(_s.typeName.toUpperCase(),(_o.parentRef ? _o.parentRef.objectId : "null")); 
					if(count != null) this.setTotalCount(count);
				}
				else{
					this.setTotalCount(_s.total_count);
				}
				var aList = [];
				var sFilt = this.getElementByRID("filter").value;
				var tname = _s.typeName;
				if(this.provideList) aList = this.provideList(sPath, sFilt, _s.start_record,_s.record_count);
				else if(sPath){
					
					if(!tname.match(/^(group)$/gi)){
						var sT = "GROUP";
						/// var sTO = "DATA";
						var sTO = "UNKNOWN";
						if(tname.match(/^(permission|role)$/gi)){
							sT = tname.toUpperCase();
							sTO = "UNKNOWN";
						}
						var oObj = AM6Client.find(sT, sTO, sPath);
						if(oObj && oObj != null){
							if(oObj.groupType && oObj.groupType.match(/^bucket$/gi)){
								if(this.provideMemberList) aList = this.provideMemberList(oObj, sFilt, _s.start_record,_s.record_count);
							}
							else{
								aList = AM6Client.list(tname.toUpperCase(), oObj.objectId,_s.start_record,_s.record_count);
							}
						}
					}
					else{
						var oObj = AM6Client.find(tname.toUpperCase(),_s.listGroupType,sPath);
						if(oObj && oObj != null) aList = AM6Client.list(tname.toUpperCase(), oObj.objectId,_s.start_record,_s.record_count);
					}
				}
				else{
				
					if(!tname.match(/^(permission|role)$/gi)) aList = AM6Client.list(tname.toUpperCase(),(_o.parentRef ? _o.parentRef.objectId : "null"),_s.start_record,_s.record_count);
					else  aList = AM6Client.list(tname.toUpperCase(),(_o.parentRef ? _o.parentRef.objectId : "null"),_s.start_record,_s.record_count);
				}
				
				if(_s.start_record == 0 && (_s.typeName.match(/^(group|permission|role)$/gi)) && (_s.viewType || _o.parentRef)){
					var oP = AM6Client.get(tname.toUpperCase(),(_s.viewType ? _s.viewType.parentId : _o.parentRef.parentId));
					if(oP != null){
						var sn = (this.decorateListItemName ? this.decorateListItemName(oP) : "..");
						oL.addItem(sn, oP);
					}
				}
				for(var i = 0; aList != null && i < aList.length;i++){
					if(vComp[aList[i].name]){
						continue;
					}
					var sn = (this.decorateListItemName ? this.decorateListItemName(aList[i]) : aList[i].name);
					oL.addItem(sn, aList[i]);
				}
			}
		
		},
		setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("status"),s);
		},
		decorateProfileIcon : function(o){
				var _p = this.getProperties();
				if(!_p.iconView) return o.name;
				var w = (_p.iconWidth ? _p.iconWidth : 48);
				var h = (_p.iconHeight ? _p.iconHeight : 48);
				var oL = document.createElement("div");
				var oP = document.createElement("p");
				oP.setAttribute("style","text-indent:0px !important;");
				var oP2 = document.createElement("p");
				var oI = document.createElement("img");
				oI.setAttribute("class","alignright");
				var sIco = "/AccountManagerService/Media/Icons/user_48x48.png";
				var sPid = AM6Client.getAttributeValue(o,"v1-profile",0);
				
				oP.appendChild(oI);
				oP.appendChild(document.createTextNode(o.name));
				oP.appendChild(document.createElement("br"));
				oP.appendChild(document.createTextNode((o.description ? o.description : "")));
				oP.appendChild(document.createElement("br"));
				oP.appendChild(document.createTextNode((o.alias ? o.alias : "")));
				oL.appendChild(oP);
				oP2.setAttribute("class","clearalign");
				oL.appendChild(oP2);
				if(sPid){
					AM6Client.get("DATA", sPid, function(s, v){
						if(v && v.json) v = v.json;
						if(v && v != null){;
							var sOrg = AM6Client.dotPath(v.organizationPath);
							oI.setAttribute("src","/AccountManagerService/thumbnail/" + sOrg + "/Data" + v.groupPath + "/" + v.name + "/" + w + "x" + h);
						}
						else{
							oI.setAttribute("src",sIco);
						}
					});
				}
				else{
					oI.setAttribute("src",sIco);
				}
				return oL;
			}	

	]]></embedded-script>
</html-fragment>
