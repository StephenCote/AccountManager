<html-fragment>
	<p style = "clear:both;font-size:0px;margin:0px;"></p>
	<import-xml src = "Fragments/TabTools.xml" id = "TabTools" />
	<p style = "clear:both;font-size:0px;margin:0px;"></p>

	<div rid = "account">
	</div>
	<div rid = "group">
	</div>
	<div rid = "permission">
	</div>	
	<div rid = "data">
	</div>	
	<import-xml src = "/AccountManagerService/Forms/DataDndPicker.xml" id = "DataDndPicker" />	
	
	<div rid = "genAppCont" style = "display:none;clear:both;" class = "rocket-column-2">
		<p rid = "lblGenerate">
			<span rid = "cfgGenerateToggle"></span> Generate Application:
		</p>
		<p rid = "cfgGenerateCont">

			Permissions: <input rid = "chkGenPerm" type = "checkbox" />
			<br />
			Groups: <input rid = "chkGenGrp" type = "checkbox" />
			<br />
			Seed: <input rid = "txtSeedSize" type = "text" class = "rocket-text rocket-text-short" value = "0" />
			<br />
			Max: <input rid = "txtMaxSize" type = "text" class = "rocket-text rocket-text-short" value = "100" />
			<br />
			Distribution: <input rid = "txtDist" type = "text" class = "rocket-text rocket-text-short" value = "1.0" />
			<br />
			<input rid = "btnGenerateApplication" type = "button" class = "rocket-button" value = "Generate" onclick = "${this}.generateApplication()" />
		</p>
	</div>
	
	<embedded-script><![CDATA[
		local_template_init : function(o){
			var o = this.getBean("rocketType");
			if(this.resizeTo) this.resizeTo(525, 400);
			this.getElementByRID("pathCont").style.display = "none";
			
			if(o.id){
				this.getProperties().dndDataPath = o.path;
				this.AddTab("account","Accounts",this.scopeHandler("loadAccountTab",0,1,1));
				this.AddTab("group","Groups",this.scopeHandler("loadGroupTab",0,1,1));
				this.AddTab("permission","Permissions",this.scopeHandler("loadPermissionTab",0,1,1));
				this.AddTab("data","Data",this.scopeHandler("loadDataTab",0,1,1));
				this.ShowTab(0);
				this.loadAccountTab();
			}
			else{
				if(irocket.getCommunityMode() && irocket.getCommunityLifecycle() && irocket.getCommunityProject()){
					this.getElementByRID("genAppCont").style.display = "block";
					this.toggleField("cfgGenerateToggle","cfgGenerateCont");
				}
			}
		},
		generateApplication : function(){
			var sName = this.getElementByRID("name").value;
			var bPerm = this.getElementByRID("chkGenPerm").checked;
			var bGrp = this.getElementByRID("chkGenGrp").checked;
			var iSeedSize = this.getElementByRID("txtSeedSize").value;
			var iMaxSize = this.getElementByRID("txtMaxSize").value;
			var iDist = this.getElementByRID("txtDist").value;
			
			var oC = this;
			oC.setStatus("Generating application ...");
			this.getElementByRID("btnGenerateApplication").disabled = true;
			AM6Client.generateApplication(irocket.getCommunityLifecycle().objectId, irocket.getCommunityProject().objectId, sName, bPerm, bGrp, iSeedSize, iMaxSize, iDist, function(s, v){
				if(v && v.json) v = v.json;
				if(v){
					oC.setStatus("Generated application");
				}
				else{
					oC.setStatus("Failed to generate application");
					this.getElementByRID("btnGenerateApplication").disabled = false;
				}
			});
		},
		resolve : function(o){
			var _s;
			if(!o || o== null || !(_s = o.getProperties()) || !_s.typeName){
				//Hemi.logError("NO RESOLVE");
				return;
			}

			if(_s.typeName.match(/^account$/gi) && o.getPath){
				Hemi.log("RESOLVE " + _s.typeName + " to " + o.getPath());
				o.getElementByRID("path").value = o.getPath();
			}
		},
		loadAccountTab : function(o){
			this.loadTab("Account",o);
		},
		loadGroupTab : function(o){
			this.loadTab("Group",o);
		},
		loadPermissionTab : function(o){
			this.loadTab("Permission",o);
		},
		loadDataTab : function(o){
			this.loadTab("Data",o);
		},
		loadTab : function(s, o){
			var oBean = this.getBean("rocketType");
			var c = this.getElementByRID(s.toLowerCase());
			if(c.loaded) return;
			c.loaded = 1;
			
			var oDiv = document.createElement("div");
			c.appendChild(oDiv);
			Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
			.then((ac)=>{
				ac.setTemplateIsSpace(1);
				ac.getProperties().openerId = this.getObjectId();
				if(s.match(/^(account|group|data)$/gi)){
					ac.getProperties().defaultPath = oBean.path;
				}
				else if(s.match(/^permission$/gi)){
					ac.getProperties().defaultParent = this.getApplicationPermissionBase(); 
				}
				if(s.match(/^account$/gi)) ac.decorateListItemName = this.decorateAccountItem;
				//if(s.match(/^group$/gi)) ac.getProperties().listGroupType = "ACCOUNT";
	
				ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
			});
		},
		addPermission : function(o, sName, sType){
			var oNP = new org.cote.objects.basePermissionType();
			oNP.id = 0;
			oNP.name = sName;
			oNP.parentId = o.id;
			oNP.nameType = "PERMISSION";
			oNP.permissionType = (sType ? sType : "USER");
			oNP.parentPath = o.parentPath + "/" + o.name;
			return AM6Client.update("PERMISSION", oNP);
		},
		getApplicationPermissionBase : function(){
			var oBean = this.getBean("rocketType");
			
			var oPB = uwm.getDefaultParentForType("Permission",AM6Client.user("PERMISSION","USER"));
				if(!oPB){
					alert("Invalid parent permission")
					return 0;
				}
				var oPA = AM6Client.getByName("PERMISSION",oPB.objectId,"Applications");

				if(oPA == null && this.addPermission(oPB,"Applications","APPLICATION")){
					oPA =  AM6Client.getByName("PERMISSION",oPB.objectId,"Applications");
				}
				if(oPA == null){
					alert("Invalid permission root");
					return 0;
				}
				var oPA1 = AM6Client.getByName("PERMISSION",oPA.objectId,oBean.name);
				if(oPA1 == null && this.addPermission(oPA,oBean.name,"APPLICATION")){
					oPA1 =AM6Client.getByName("PERMISSION",oPA.objectId,oBean.name);
				}	
				if(oPA1 == null){
					alert("Invalid permission base");
					return;
				}
				return oPA1;

			},
		
		
		decorateAccountItem : function(o){
			var sF = AM6Client.getAttributeValue(o,"firstName");
			var sM = AM6Client.getAttributeValue(o,"middleName");
			var sL = AM6Client.getAttributeValue(o,"lastName");
			if(sF || sM || sL) return (sF ? sF : "") + (sM ? " " + sM : "") + (sL ? " " + sL : "");
			return o.name;
		},
		addType : function(o){
			Hemi.log("Add group type: " + o.name + ":" + o.parentId);
			
			var b = AM6Client.update("GROUP",o);
			
			if(b && irocket.getCommunityMode() && irocket.getCommunityLifecycle() && irocket.getCommunityProject()){
				var oP = AM6Client.get("GROUP",o.parentId),g;
				if(oP) g = AM6Client.find("GROUP","DATA",oP.path + "/" + o.name);
				if(g){
					b = AM6Client.configureCommunityProjectGroupEntitlements(irocket.getCommunityLifecycle().objectId, irocket.getCommunityProject().objectId, g.objectId);
				}
				else b = 0;
			}
			return b;

		}
	]]></embedded-script>
</html-fragment>