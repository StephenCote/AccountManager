<html-fragment>

	<div class = "rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type = "text"  rid = "description" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<import-xml src = "/AccountManagerService/Forms/SchedulePickerSingle.xml" id = "SchedulePickerSingle" />
	<import-xml src = "/AccountManagerService/Forms/BlueprintPicker.xml" id = "BlueprintPicker" />
	<import-xml src = "/AccountManagerService/Forms/RequirementPicker.xml" id = "RequirementPicker" />
	<import-xml src = "/AccountManagerService/Forms/DependencyPicker.xml" id = "DependencyPicker" />
	<import-xml src = "/AccountManagerService/Forms/ArtifactPicker.xml" id = "ArtifactPicker" />
	<import-xml src = "/AccountManagerService/Forms/ModulePicker.xml" id = "ModulePicker" />
	<import-xml src = "/AccountManagerService/Forms/StagePicker.xml" id = "StagePicker" />
	<import-xml src = "/AccountManagerService/Forms/DataDndPicker.xml" id = "DataDndPicker" />

	<div rid = "regionCont" style = "display:none;clear:both;" class = "rocket-column-2">
		<p rid = "lblRegion">
			<span rid = "cfgRegionToggle"></span> Configure Region:
		</p>
		<p rid = "cfgRegionCont">
			<input rid = "txtLocCount" type = "text" class = "rocket-text rocket-text-short" value = "3" />
			<input rid = "txtInitPop" type = "text" class = "rocket-text rocket-text-short" value = "250" />
			<input rid = "btnConfigProjectRegion" type = "button" class = "rocket-button" value = "Configure" onclick = "${this}.configureProjectRegion()" />
		</p>
	</div>

	<div rid = "evolveCont" style = "display:none;clear:both;" class = "rocket-column-2">
		<p rid = "lblEvolve">
			<span rid = "evoRegionToggle"></span> Evolve Region:
		</p>
		<p rid = "evoRegionCont">
			<input rid = "txtEpochCount" type = "text" class = "rocket-text rocket-text-short" value = "1" />
			<input rid = "txtIterCount" type = "text" class = "rocket-text rocket-text-short" value = "12" />
			<input rid = "btnConfigProjectRegion" type = "button" class = "rocket-button" value = "Evolve" onclick = "${this}.evolveProjectRegion()" />
		</p>
	</div>

	<embedded-script><![CDATA[
		evolveProjectRegion : function(){
			var o = this.getBean("rocketType"), oC = this;
			this.setStatus("Evolving project region");
			
			AM6Client.evolveCommunityProjectRegion(irocket.getCommunityLifecycle().objectId, o.objectId, this.getElementByRID("txtEpochCount").value, this.getElementByRID("txtIterCount").value, function(s, v){
				if(v && v.json) v = v.json;
				if(v){
					oC.setStatus("Evolved project region");
					oC.refreshRegionCont();
				}
				else oC.setStatus("Failed to evolve project region");
			});
		
		
		},
		configureProjectRegion : function(){
			var o = this.getBean("rocketType"), oC = this;
			this.setStatus("Configuring project region");
			
			AM6Client.configureCommunityProjectRegion(irocket.getCommunityLifecycle().objectId, o.objectId, this.getElementByRID("txtLocCount").value, this.getElementByRID("txtInitPop").value, function(s, v){
				if(v && v.json) v = v.json;
				if(v){
					oC.setStatus("Configured project region");
					oC.refreshRegionCont();
				}
				else oC.setStatus("Failed to configure project region");
			});
		
		
		},
		refreshRegionCont : function(){
			var bD1 = 0;
			var bD2 = 0;
			var o = this.getBean("rocketType");

			if(o.objectId && irocket.getCommunityMode()){
				AM6Client.clearCache("EVENT",1);
				var oL =  AM6Client.find("GROUP","DATA",o.groupPath + "/Events");
				if(oL){
					var iL = AM6Client.count("EVENT",oL.objectId);
					console.log("Count: " + iL);
					if(iL == 0) bD1 = 1;
					else{
						bD2 = 1;
						this.getElementByRID("txtEpochCount").value = iL + 1;
					}
				}
			}

			this.getElementByRID("regionCont").style.display = (bD1 ? "block" : "none" );
			this.getElementByRID("evolveCont").style.display = (bD2 ? "block" : "none" );
		
		},
		embedded_init : function(){
			var o = this.getBean("rocketType"),_s = this.getProperties();
			_s.dndHandler = "local_handle_dnd_form";
			_s.dndShowForm = "local_handle_dnd_form_show";
			_s.blueprintListProp = "blueprints";
			_s.requirementListProp = "requirements";
			_s.dependencyListProp = "dependencies";
			_s.artifactListProp = "artifacts";
			_s.moduleListProp = "modules";
			_s.stageListProp = "stages";
			_s.scheduleProp = "schedule";
			this.pickSchedule('Schedule',o.schedule);
			
			
			this.getComponentByRID("blueprintsList").setLoadHandler(this.scopeHandler("configBlueprintsList",0,1,1));
			this.getComponentByRID("requirementsList").setLoadHandler(this.scopeHandler("configRequirementsList",0,1,1));
			this.getComponentByRID("dependenciesList").setLoadHandler(this.scopeHandler("configDependenciesList",0,1,1));
			this.getComponentByRID("artifactsList").setLoadHandler(this.scopeHandler("configArtifactsList",0,1,1));
			this.getComponentByRID("modulesList").setLoadHandler(this.scopeHandler("configModulesList",0,1,1));
			this.getComponentByRID("stagesList").setLoadHandler(this.scopeHandler("configStagesList",0,1,1));
			
			this.toggleField("cfgRegionToggle","cfgRegionCont");
			this.toggleField("evoRegionToggle","evoRegionCont");
			
			this.refreshRegionCont();
		},
		embedded_destroy : function(){

		},
		local_handle_dnd_form_show : function(oW){
			this.setStatus("Warning: Window will close if successful");
		},
		local_handle_dnd_form : function(oW, aF){
			var o = this.getBean("rocketType");
			if(aF.length){
				var oD = AM6Client.get("DATA",AM6Client.find("GROUP","DATA",uwm.getPathForType("Data")).objectId,aF[0]);
				if(oD){
					uwmServices.getService("Rocket").importProject(o.id,oD.id,false);
					oW.Close();
					this.Close();
				}
			}
			
		},
		addType : function(o){
			if(irocket.getCommunityMode()){
				var oL = irocket.getCommunityLifecycle();
				if(!oL || oL == null){
					this.setStatus("Invalid community lifecycle selection");
					return false;
				}
				var oP = AM6Client.addCommunityProject(oL.objectId,o.name);
				if(!oP || oP == null){
					this.setStatus("Failed to create community project");
					return false;
				}
				oP = AM6Client.communityProject(oL.name, o.name);
				oP.description = o.description;
				oP.blueprints = o.blueprints;
				oP.requirements = o.requirements;
				oP.dependencies = o.dependencies;
				oP.artifacts = o.artifacts;
				oP.modules = o.modules;
				oP.stages = o.stages;
				oP.schedule = o.schedule;
				if(AM6Client.update("PROJECT",oP)){
					AM6Client.clearCache("PROJECT");
					Hemi.message.service.publish("onchangecommunity",this);
					return 1;
				}
				return 0;
			}
			else{
				uwmServiceCache.clearCache();
				return AM6Client.update("PROJECT",o);
			}
		},
		prepareSave : function(o){
			this.prepareSaveBlueprintsList(o);
			this.prepareSaveRequirementsList(o);
			this.prepareSaveDependenciesList(o);
			this.prepareSaveArtifactsList(o);
			this.prepareSaveModulesList(o);
			this.prepareSaveStagesList(o);
			return 1;
		}
	]]></embedded-script>
</html-fragment>