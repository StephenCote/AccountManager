<html-fragment>
	<div rid = "descriptionCont" class = "rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type = "text" rid = "description" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div rid = "titleCont" class = "rocket-column-2">
		<p>
			Title:
		</p>
		<p>
			<input type = "text" rid = "title" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div rid = "prefixCont" class = "rocket-column-2">
		<p>
			Prefix:
		</p>
		<p>
			<input type = "text" rid = "prefix" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			First Name:
		</p>
		<p>
			<input type = "text" rid = "firstName" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Middle Name:
		</p>
		<p>
			<input type = "text" rid = "middleName" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Last Name:
		</p>
		<p>
			<input type = "text" rid = "lastName" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div rid = "suffixCont" class = "rocket-column-2">
		<p>
			Suffix:
		</p>
		<p>
			<input type = "text" rid = "suffix" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div rid = "aliasCont" class = "rocket-column-2">
		<p>
			Alias:
		</p>
		<p>
			<input type = "text" rid = "alias" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Birthdate:
		</p>
		<p>
			<input component = "calendar" type = "text" rid = "birthDate" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div rid = "genderCont" class = "rocket-column-2">
		<p>
			Gender:
		</p>
		<p>
			<select rid = "gender" bind = "${bean.rocketType}">
				<option default = "true" value = "unknown">Unknown</option>
				<option value = "male">Male</option>
				<option value = "female">Female</option>
				<option value = "unspecified">Unspecified</option>
			</select>
		</p>
	</div>

	<import-xml src = "/AccountManagerService/Forms/ContactInformation.xml" id = "ContactInformation" />
	<div class = "rocket-column-2" rid = "partnerPicker" style = "display:none;">
		<p rid = "partnerPickerTitle">
			<span rid = "partnerPickerToggle"></span> <span rid="partnerPickerLabel">Partners</span>:
		</p>
		<p rid = "partnerPickerContent">
			<div component = "wideselect" rid = "partnersList">
			</div>
			<br />
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addPartner()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removePartner()" />
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openPartner()" />
		</p>
	</div>
	<import-xml src = "/AccountManagerService/Forms/PersonPicker.xml" id = "PersonPicker" />
	<import-xml src = "/AccountManagerService/Forms/AccountPicker.xml" id = "AccountPicker" />
	<import-xml src = "/AccountManagerService/Forms/UserPicker.xml" id = "UserPicker" />


	<embedded-script><![CDATA[
		embedded_init : function(){
			//this.GetElementByRID("pathCont").style.display = "none";
			this.GetElementByRID("partnerPicker").style.display = "block";
			this.toggleField("partnerPickerToggle","partnerPickerContent");
			if(!this.getProperties().partnerListProp) this.getProperties().partnerListProp = "partners";
			this.initPartnerPicker();
			this.initUserPicker();
			this.initAccountPicker();
			this.initContactInformation();
			this.getProperties().personListProp = "dependents";
			this.setPersonPickerLabel("Deps");
			this.initPersonPicker();
		},
		
prepareSavePartnerPicker : function(o){
			this.prepareSavePartnersList(o);
		},
		setPartnerPickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.GetElementByRID("partnerPickerLabel"),s);
		},
		initPartnerPicker : function(){
			/// Have to put a little extra logic here because partner information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enablePartnerInformation = (o != null ? 1 : 0);
			
			if(_s.enablePartnerInformation){
				//this.getProperties().partnerListProp = "partners";
				this.GetComponentByRID("partnersList").setLoadHandler(this.scopeHandler("configPartnersList",0,1,1));
			}
		},

		
		openPartner : function(){
			var oI = this.getPartnersList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Person");
		},
		addPartner : function(){
			this.manageList("Person", this.getPartnersList().getObjectId());
		},
		removePartner : function(){
			var oI = this.getPartnersList().getActiveItem();
			if(oI) this.getPartnersList().clearItem(oI.index);
		},

		configPartnersList : function(s,v){
			var oL = this.getPartnersList(),_s = this.getProperties();
			if(!_s.enablePartnerInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshPartners();
		},
		refreshPartners : function(){
			var oL = this.getPartnersList(), aP = this.getProperties().partnerListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getPartnersList : function(){
			return this.GetComponentByRID("partnersList").GetWideSelect();
		},
		prepareSavePartnersList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enablePartnerInformation) return;
			aP = this.getProperties().partnerListProp;
			o[aP] = [];
			var aPartners = this.getPartnersList().getItems();
			for(var i = 0; i < aPartners.length;i++) o[aP].push(aPartners[i].data);
		},
		
		addType : function(o){
			Hemi.log("Add person type: " + o.name );
			var b = false;
			
			return AM6Client.update("PERSON",o);
		},
		prepareSave : function(o){
			this.prepareSaveContactInformation(o);
			this.prepareSaveAccountsList(o);
			this.prepareSaveUsersList(o);
			this.prepareSavePersonsList(o);
			this.prepareSavePartnersList(o);
			return 1;
		}
	]]></embedded-script>
</html-fragment>