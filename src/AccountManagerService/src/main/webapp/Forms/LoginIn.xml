<?xml version="1.0" encoding="utf-8" ?>
<Template>
<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
<div rid = "cntLogin" style = "display:none;">
<img valign = "middle" rid = "btnLogin" src = "/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/user-auth.png" onclick = "${this}.doLogin()" width = "24" height = "24" alt = "Crystal SVG Icon - User Auth" />
<select onchange = "${this}.toggleChoose()" rid = "organization_path" class = "rocket-select rocket-select-shorter">
<option value = "_choose_">Specify ...</option>
<option value = "/System">System</option>
<option value = "/Development">Development</option>
<option value = "/FirstContact">FirstContact</option>
<option value = "/Public" selected = "true">Public</option>
<option value = "/Accelerant/Rocket">Rocket</option>
</select>
<span rid = "chooseCont" style = "display: none;">
<input type = "text" class = "rocket-text rocket-text-shorter" rid = "organization_choose_path" value = "/Public" />
</span>
<input type = "text" class = "rocket-text rocket-text-shorter" rid = "user_name" />
<input type = "password" class = "rocket-text rocket-text-shorter" rid = "password" />
</div>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			var oMod = uwm.getRule("IsLoggedIn");
			this.scopeHandler("session_refresh",0,0,1);
			Hemi.message.service.subscribe(this, "onsessionrefresh",this._prehandle_session_refresh);
			
			if(!oMod){
				uwm.altMain = {
					form : "Forms/MainIn.xml"
				};
				uwm.altLogin = {
					form : "Forms/LoginIn.xml"	
				};
				
				uwm.altPane = {
					opener : this.getObjectId()
				};
				
				uwm.rule("IsLoggedIn",{opener:this.getObjectId()}, "ContinueWorkflow","RequireAuthentication");
			}
			else{
				this.getElementByRID("cntLogin").style.display = "";
				this.getElementByRID("user_name").focus();
				this.scopeHandler("input_keypress",0,0,1);
				this.getElementByRID("password").onkeypress = this._prehandle_input_keypress;
				
			}
		},
		toggleChoose : function(){
			var sV = this.getElementByRID("organization_path").value;
			this.getElementByRID("chooseCont").style.display = (sV.match(/^_choose_$/) ? "" : "none");
		},
		template_destroy:function(){
			this._prehandle_input_keypress = null;
			Hemi.message.service.unsubscribe(this, "onsessionrefresh",this._prehandle_session_refresh);	
		},
		_handle_input_keypress : function(e){
			e = Hemi.event.getEvent(e);
			if(e.keyCode == 13) this.doLogin();
		},
		_handle_session_refresh : function(s,v){
			window.uwm.operation("ContinueWorkflow",{opener:this.getObjectId()});
			/// if(uwm.rule("IsLoggedIn")) this.loadTemplate("/AccountManagerService/Forms/MainIn.xml");
		},
		doLogin : function(){

			if(!this.Validate()) return;
			var sOrg = this.getFormValue("organization_path");
			if(sOrg.match(/^_choose_$/)) sOrg = this.getFormValue("organization_choose_path");
			var sName = this.getFormValue("user_name");
			var sPassword = this.getFormValue("password");
			this.getElementByRID("user_name").disabled = true;
			this.getElementByRID("password").disabled = true;
			this.getElementByRID("btnLogin").disabled = true;
			this.setFormValue("password","");
			this.getProperties().userName = sName; 
			
			Hemi.message.service.unsubscribe(this, "onsessionrefresh",this._prehandle_session_refresh);
			window.uwm.operation("Authenticate", {opener:this.getObjectId(),user_name : sName, password : sPassword, organization: sOrg});		
		},

		Validate : function(){
		
			try{
				this.assert(this.validateForPattern("user_name","not-empty"),"Invalid user_name");
				this.assert(this.validateForPattern("password","not-empty"),"Invalid password");
			}
			catch(e){
				//this.setStatus((typeof e== "string" ? e : e.message ? e.message : e.description));
				return 0;
			}
			return 1;
		}
		]]>
	</embedded-script>
</Template>
