<html-fragment>
	<import-xml src = "/AccountManagerService/Forms/ParentPicker.xml" id = "ParentPicker" />

	<div class = "rocket-column-2" rid = "dataTypeContainer">
		<p>
			Type:
		</p>
		<p>
			<select rid = "permissionType" bind = "${bean.rocketType}">
			<option>UNKNOWN</option>
    		<option>DATA</option>
    		<option>GROUP</option>
    		<option>ROLE</option>
    		<option>ACCOUNT</option>
    		<option selected = "true">USER</option>
    		<option>PERSON</option>
    		<option>OBJECT</option>
    		<option>APPLICATION</option>
			</select>
		</p>
	</div>
	
	<div class = "rocket-column-2" rid = "permissionPicker" style = "display:none;">
		<p rid = "permissionPickerTitle">
			<span rid = "permissionPickerToggle"></span> <span rid="permissionPickerLabel">Permissions</span>:
		</p>
		<p rid = "permissionPickerContent">

			<div component = "wideselect" rid = "permissionsList">
			</div>

			<br />
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addChildPermission()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removeChildPermission()" />
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openChildPermission()" />
		</p>
	</div>
	
	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.GetElementByRID("permissionPicker").style.display = "block";
			this.toggleField("permissionPickerToggle","permissionPickerContent");

			this.GetElementByRID("pathCont").style.display = "none";
			this.GetComponentByRID("permissionsList").setLoadHandler(this.scopeHandler("configPermissionsList",0,1,1));
		},
		
		openChildPermission : function(){
			var oI = this.getPermissionsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Permission");
		},
		addChildPermission : function(){
			this.manageList("Permission", this.getPermissionsList().getObjectId());
		},
		removeChildPermission : function(){
			var oI = this.getPermissionsList().getActiveItem();
			if(oI){
				this.getPermissionsList().clearItem(oI.index);
			}
		},
		configPermissionsList : function(s,v){
			var o = this.getBean("rocketType");
			var oL = this.getPermissionsList();
			oL.getContainer().style.height = "50px";
			oL.getContainer().style.width = "150px";
			this.refreshPermissions();
		},
		refreshPermissions : function(a){
			var oL = this.getPermissionsList();
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || o == null || o.id <= 0) return;
			//var aL = accountManager.listPermissions(o.organizationId,o);
			var aL = AM6Client.list("PERMISSION",o.objectId,0,0);
			for(var i = 0; i < aL.length;i++){
				oL.addItem(aL[i].name + " " + aL[i].permissionType,aL[i]);
			}
		},
		getPermissionsList : function(){
			return this.GetComponentByRID("permissionsList").GetWideSelect();
		},
		embedded_destroy : function(){
		},
		
		addType : function(o){
			Hemi.log("Add permission type: " + o.name + ":" + o.permissionType);

			return AM6Client.update("PERMISSION",o);
		},
		
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
</html-fragment>