<?xml version="1.0" encoding="utf-8" ?>
<Template>
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<span class="uwm-inline-buttons">
	<img valign = "middle" rid = "communityBtn" src = "/AccountManagerService/Media/Icons/user_24x24.png" onclick = "${this}.toggleCommunity()" width = "24" height = "24" title = "Community Mode" />
	<span rid = "communityContainer" style = "display: none;">
		<select onchange = "${this}.selectLifecycle()" rid = "lifecycles"><option value = "0">Unknown</option></select>
		<select onchange = "${this}.selectProject()" rid = "projects"><option value = "0">Unknown</option></select>
	</span>
	<img valign = "middle" src = "/AccountManagerService/Media/Icons/Crystal/24x24/48px-Crystal_Clear_filesystem_folder_green.png" onclick = "Hemi.app.createWindow('Groups List','/AccountManagerService/Forms/ListGroups.xml','ListGroups')" width = "24" height = "24" title = "Groups" />
	<img valign = "middle" src = "/AccountManagerService/Media/Icons/Crystal/24x24/48px-Crystal_Clear_app_database.png" onclick = "Hemi.app.createWindow('Data List','/AccountManagerService/Forms/ListDatas.xml','ListDatas')" width = "24" height = "24" title = "Data" />
	<img valign = "middle" src = "/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/gnome-graphics.png" onclick = "${this}.DoGallery()" width = "24" height = "24" title = "Media Gallery" />
    <img valign = "middle" src = "/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/advanced-directory.png" onclick = "Hemi.app.createWindow('Framework Profiler','Templates/FrameworkProfiler.xml','Profiler');" width = "24" height = "24" title = "Framework Profiler" />
 <!--
    <img valign = "middle" src = "/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/kivio.png" width = "24" height = "24" onclick = "Hemi.app.createWindow('Framework Designer','Templates/FrameworkDesigner.xml','FrameworkDesigner');" title = "Framework Designer" />
-->
	<img valign = "middle" src = "/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/kdvi.png" width = "24" height = "24" onclick = "Hemi.app.createWindow('API Browser','Templates/FrameworkAPIBrowser.xml', 'FrameworkAPIBrowser');" title = "Framework API Browser" />
    <img valign = "middle" src = "/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/kexi.png" width = "24" height = "24" onclick = "Hemi.app.createWindow('Log Viewer','Templates/LogViewer.xml', 'LogViewer');" title = "Framework Log Viewer" />
    <img valign = "middle" src = "/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/gnome-word.png" width = "24" height = "24" onclick = "Hemi.app.createWindow('FVT Test Suite','Templates/FVTs.xml', 'FVTTestSuite');" title = "Framework Test Suite" />
	<img valign = "middle" src = "/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/gpa.png" onclick = "${this}.DoLogout()" width = "24" height = "24" title = "Logout" />

	<span style = "padding-left:10px;padding-top:10px;color:#76933c;" rid = "profileName" onclick = "uwm.profile()">${property.userName}</span>
	</span>
	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				var o = uwm.getUser();
				Hemi.xml.setInnerXHTML(this.GetElementByRID("profileName"),(o ? o.organizationPath + "/" + o.name : "Anonymous"));
				Hemi.message.service.subscribe(this, "onchangecommunity", "refreshCommunity");
			},
			refreshCommunity : function(s, v){
				if(v == this || this.getProperties().blockAnnounce) return;
				
				this.getProperties().blockAnnounce = 1;
				this.refreshLifecycleList();
				// this.refreshProjectList();
				this.getProperties().blockAnnounce = 0;
				
				this.GetElementByRID("communityBtn").src = "/AccountManagerService/Media/Icons/" + (irocket.getCommunityMode()? "Crystal/24x24/Crystal_Clear_app_Login_Manager.png" : "user_24x24.png");
				this.GetElementByRID("communityContainer").style.display = (irocket.getCommunityMode() ? "" : "none");
			},
			DoLogout : function(){
				window.uwm.logout();
				/// window.uwm.operation("ContinueWorkflow",{opener:this.getObjectId()});
			},
			DoGallery : function(){
				var sTxt = Hemi.xml.getText("/AccountManagerService/Scripts/canvasGallery.js");
				eval(sTxt);
			},
			toggleCommunity : function(){
				irocket.setCommunityMode(!irocket.getCommunityMode());
				this.refreshCommunity();
			},
			refreshLifecycleList : function(bNoUp){
				var oSel1 = this.GetElementByRID("lifecycles");
				oSel1.options.length = 1;
		
				if(irocket.getCommunityMode()){
					var aLi = irocket.listLifecycles();
					for(var i = 0; i < aLi.length;i++){
						oSel1.options[i+1] = new Option(aLi[i].name,"" + aLi[i].id);
					}
					if(irocket.getCommunityLifecycle() && irocket.getCommunityLifecycle() != null){
						oSel1.value = "" + irocket.getCommunityLifecycle().id;
					}
					else if(oSel1.options.length > 1) oSel1.selectedIndex = 1;
					else oSel1.selectedIndex = 0;
				}
				this.selectLifecycle();
			},
			refreshProjectList : function(){
				var oSel = this.GetElementByRID("projects");
				oSel.options.length = 1;
				if(irocket.getCommunityMode() && !irocket.getCommunityLifecycle()) return;
				
				var aL = irocket.listProjects();
				for(var i = 0; i < aL.length;i++){
					oSel.options[i+1] = new Option(aL[i].name,"" + aL[i].id);
				}
				
				if(!irocket.getCommunityMode()){
					oSel.options[oSel.options.length] = new Option("New","_new");
					if(irocket.getCurrentProject()){
						oSel.value = "" + irocket.getCurrentProject().id;
					}
				}
				else if(irocket.getCommunityMode() && irocket.getCommunityProject() && irocket.getCommunityProject() != null){
					oSel.value = "" + irocket.getCommunityProject().id;
				}
				else if(oSel.options.length > 1) oSel.selectedIndex = 1;
				else oSel.selectedIndex = 0;
			},
			selectLifecycle : function(){
				var vS = this.GetElementByRID("lifecycles").value;
				if(vS.match(/^\d+$/) && vS != "0"){
					var oL = AM6Client.get("LIFECYCLE",vS);
					irocket.setCommunityLifecycle(oL);
					this.refreshProjectList();
					this.selectProject();
				}
			},
			selectProject : function(){
				var vS = this.GetElementByRID("projects").value;
		
				if(vS.match(/^\d+$/) && vS != "0"){
					var oP = AM6Client.get("PROJECT",vS);
					if(!irocket.getCommunityMode()) irocket.setCurrentProject(oP);
					else irocket.setCommunityProject(oP);
				}
				else if(vS == "_new"){
					var o = new org.cote.objects.projectType();
					o.name = "";
					o.description = "";
					o.id = 0;
					o.stages = [];
					irocket.setCurrentProject(o);
					this.GetElementByRID("projects").selectedIndex = 0;
				}
				if(!this.getProperties().blockAnnounce) Hemi.message.service.publish("onchangecommunity",this);
				
			}
		]]>
	</embedded-script>
</Template>
