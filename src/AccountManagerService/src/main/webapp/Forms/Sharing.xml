<?xml version="1.0" encoding="utf-8" ?>
<Template Title = "Sharing">
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<div class = "rocket-column-2">
		<p>
			Actor:
		</p>
		<p>
			<select rid = "shareWhoType" onchange = "${this}.refreshWhoView()">
				<option>Unknown</option>
				<option>Nobody</option>
				<option selected = "true" value = "ROLE">Role</option>
				<option value = "GROUP">Group</option>
				<option value = "PERSON">Person</option>
				<option value = "ACCOUNT">Account</option>
				<option value = "USER">User</option>
				<option>Public</option>
			</select>
			<input type = "text" rid = "shareWhoName" class = "rocket-text" style = "width:150px !important" disabled = "true" />
			<input type = "button" class = "rocket-button" value = "..." onclick = "${this}.findType(1)" />

		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Object:
		</p>
		<p>
			<select rid = "shareType">
				<option value = "ROLE">Role</option>
				<option value = "PERMISSION">Permission</option>
				<option value = "DATA">Data</option>
				<option value = "GROUP">Group</option>
			</select>
			<input type = "text" rid = "shareName" class = "rocket-text" style = "width:150px !important" disabled = "true" />
			<input type = "button" class = "rocket-button" value = "..." onclick = "${this}.findType()" />
		</p>
	</div>
	<import-xml src = "/AccountManagerService/Forms/PermissionPicker.xml" id = "PermissionPicker" />
	<div class = "rocket-column-2">
		<p>
			System Permissions:
		</p>
		<p>
			<input type = "checkbox" rid = "chkRead" /> : Read
			<br />
			<input type = "checkbox" rid = "chkUpdate" /> : Update
			<br />
			<input type = "checkbox" rid = "chkAdd" /> : Add
			<br />
			<input type = "checkbox" rid = "chkDelete" /> : Delete
		</p>
	</div>
	<div rid = "systemGroupContainer" style = "display: none;" class = "rocket-column-2">
		<p>
			System:
		</p>
		<p>
			<input type = "checkbox" rid = "chkSystemGroups" /> : .thumbnail
			<br />
			<input type = "checkbox" rid = "chkRecurseGroups" /> : Recurse
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Authorize:
		</p>
		<p>
			<input type = "button" value = "Authorize" disabled = "true" rid = "btnAuthZ" class = "rocket-button" onclick = "${this}.authorize()" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Unauthorize:
		</p>
		<p>
			<input type = "button" value = "Unauthorize" disabled = "true" rid = "btnUAuthZ" class = "rocket-button" onclick = "${this}.uauthorize()" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Note:
		</p>
		<p>
			Sharing an image will not automatically share the thumbnail directory.  To share the thumbnail directory, check the <i>Include System Groups</i> checkbox.
		</p>
	</div>	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.refreshView();
				this.refreshView(1);
				this.initPermissionPicker();
			},
			refreshWhoView : function(){
				this.getElementByRID("shareWhoName").value = "";
				this.getProperties().whoType = 0;
			},
			refreshView : function(b){
				var o = this.getProperties()[(b ? "whoType":"viewType")];
				if(this.setStatus) this.setStatus("");
				if(!o){
					Hemi.logError("Type is not specified");
					if(this.setStatus) this.setStatus("View type is not specified");
					return;
				}
				this.getElementByRID("btnAuthZ").disabled = false;
				this.getElementByRID("btnUAuthZ").disabled = false;
				if(typeof o == "string" && b){
				}
				else{
					this.getElementByRID((b ? "shareWhoName" : "shareName")).value = o.nameType + " " + o.name + " (#" + o.id + ")";
					this.getElementByRID((b ? "shareWhoType" : "shareType")).value = o.nameType;
				}
				this.getElementByRID("systemGroupContainer").style.display = (this.getProperties().viewType.nameType == "GROUP" ? "" : "none");
			},
		findType : function(b){
			var sFType = this.getElementByRID((b ? "shareWhoType":"shareType")).value;
			if(b && !sFType.match(/(role|group|person|account|user)/gi)){
				this.pickWhoType(0,sFType);
			}
			else{
				this.manageList(sFType.substring(0,1) + sFType.substring(1,sFType.length).toLowerCase(),0,(b ? "pickWhoType" : "pickType"));
			}
		},
		pickWhoType : function(t, o){
			return this.pickType(t, o, 1);
		},
		pickType : function(t, o, b){
			this.getProperties()[(b ? "whoType" : "viewType")] = o;
			this.refreshView(b);
			
		},
			authorize : function(){
				if(!this.getElementByRID("chkRecurseGroups").checked || confirm("Recursive is currently client-driven, and so will take a while to complete as each authorization call is made independently.  Continue?")){
					this.authorizeType();
				}
			},
			unauthorize : function(){
				if(!this.getElementByRID("chkRecurseGroups").checked || confirm("Recursive is currently client-driven, and so will take a while to complete as each authorization call is made independently.  Continue?")){

					this.authorizeType(1);
				}
			},
			
			authorizeType : function(b,x){
				var o = (x ? x : this.getProperties().viewType);
				if(!o || !o.id){
					Hemi.logError("View type is not specified");
					if(this.setStatus) this.setStatus("View type is not specified");
					return;
				}
				var oS = this.getElementByRID("shareType");
				var sW = this.getElementByRID("shareWhoType").value;
				if(sW.match(/^nobody$/gi)){
					Hemi.logError("TODO: Policy OM not yet ready to strip all rights without specifying a specific target");
					if(this.setStatus) this.setStatus("TODO: Policy OM not yet ready to strip all rights without specifying a specific target");
					return;
				}
				var oO = 0;

				if(sW.match(/^public$/gi)){
					oO = AM6Client.anonymous();
					sW = "User";
				}
				else if(sW.match(/^(role|group|person|account|user)$/gi)){
					oO = this.getProperties().whoType;
					sW = sW.substring(0,1) + sW.substring(1,sW.length).toLowerCase();
				}
				if(!oO){
					Hemi.logError("Target " + sT + " not specified");
					if(this.setStatus) this.setStatus("Target " + sT + " not specified");
					return;
				
				}

				var sT = oS.options[oS.selectedIndex].text;
				var aPerms = this.getPermissionsList().getItems();
				var r = 0;
				if(sW.match(/^(role|user)$/gi)){
					Hemi.log("Authorize " + sT + " " + sW);
					r = AM6Client.permitSystem(o.nameType, o.objectId, oO.nameType, oO.objectId,(b ? false : this.getElementByRID("chkRead").checked), (b ? false : this.getElementByRID("chkUpdate").checked), (b ? false : this.getElementByRID("chkDelete").checked), (b ? false : this.getElementByRID("chkAdd").checked));
					if(r && o.nameType == "GROUP" && !o.name.match(/^\.thumbnail$/)){
						if(this.getElementByRID("chkSystemGroups").checked){
							var oT = AM6Client.make("GROUP","DATA",o.path + "/.thumbnail");
							if(oT) this.authorizeType(b,oT);
						}
						if(this.getElementByRID("chkRecurseGroups").checked){
							var aSG = AM6Client.list("GROUP",o.objectId,0,0);
							for(var s = 0; s < aSG.length; s++){
								this.authorizeType(b,aSG[s]);
							}
						}
					}
				}
				var p = 0;
				if(sW.match(/^(role|user|person|account|group|user)$/gi)){
				
					for(var i = 0; i < aPerms.length; i++){
						if(AM6Client.permit(o.nameType, o.objectId,oO.nameType,oO.objectId,aPerms[i].data.objectId,(b?false:true))){
							p++;
						}
					}
				}
				if(this.setStatus) this.setStatus("Authorization: " + (r ? true : false) + " / Permissions: " + p + " of " + aPerms.length);

			},
			
		manageList : function(sType, sListId, sFN){
			var oProps = {openerId:this.getObjectId(),listType:"Tag",picker:1,manualPick:1,pickFunction:sFN,listId:sListId};
			Hemi.app.createWindow("ManageList", uwm.getApiTypeView(sType) + "/Forms/List" + sType + "s.xml", "Manager-" + (sListId ? sListId : Hemi.guid()), 0, 0, oProps, 0)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 300);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		}
			
		]]>
	</embedded-script>
</Template>
