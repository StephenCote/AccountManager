<html-fragment>
	<div class = "rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type = "text" rid = "description" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type = "text"  rid = "logicalOrder" bind = "${bean.rocketType}" class = "rocket-text rocket-text-short" />
		</p>
	</div>
	<div class = "rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid = "goalType" bind = "${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>GOAL</option>
				<option>STAKE</option>
			</select>
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Priority:
		</p>
		<p>
			<select rid = "priority" bind = "${bean.rocketType}">
	    		<option>UNKNOWN</option>
	    		<option>LOW</option>
	    		<option>NORMAL</option>
	    		<option>HIGH</option>
	    		<option>VITAL</option>
			</select>
		</p>
	</div>
	
	<import-xml src = "/AccountManagerService/Forms/BudgetPickerSingle.xml" id = "BudgetPickerSingle" />
	<import-xml src = "/AccountManagerService/Forms/SchedulePickerSingle.xml" id = "SchedulePickerSingle" />
	<import-xml src = "/AccountManagerService/Forms/ResourcePickerSingle.xml" id = "ResourcePickerSingle" />
	<import-xml src = "/AccountManagerService/Forms/RequirementPicker.xml" id = "RequirementPicker" />
	<import-xml src = "/AccountManagerService/Forms/CasePicker.xml" id = "CasePicker" />
	<import-xml src = "/AccountManagerService/Forms/DependencyPicker.xml" id = "DependencyPicker" />

	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType"), _s = this.getProperties();
			_s.caseListProp = "cases";
			_s.dependencyListProp = "dependencies";
			_s.requirementListProp = "requirements";
			_s.scheduleProp = "schedule";
			_s.budgetProp = "budget";
			_s.resourceProp = "assigned";
			Hemi.xml.setInnerXHTML(this.GetElementByRID("resourcePickerTitle"),"Assigned To:");
			this.GetComponentByRID("requirementsList").setLoadHandler(this.scopeHandler("configRequirementsList",0,1,1));
			this.GetComponentByRID("dependenciesList").setLoadHandler(this.scopeHandler("configDependenciesList",0,1,1));
			this.GetComponentByRID("casesList").setLoadHandler(this.scopeHandler("configCasesList",0,1,1));
			this.pickBudget('Budget',o.budget);
			this.pickSchedule('Schedule',o.schedule);
			this.pickResource('Resource',o.assigned);
		},
		addType : function(o){
			Hemi.log("Add goal type: " + o.name + ":" + o.text);

			return AM6Client.update("GOAL",o);
		},
		prepareSave : function(o){
			this.GetElementByRID("text").className = "rocket-text";
			this.prepareSaveRequirementsList(o);
			this.prepareSaveDependenciesList(o);
			this.prepareSaveCasesList(o);
			/*
			if(!this.ValidateForPattern("text","not-empty")){
				this.GetElementByRID("text").className = "rocket-text rocket-text-error";
				this.setStatus("Text cannot be empty");
				return 0;
			}
			*/
			return 1;
		}
	]]></embedded-script>
</html-fragment>