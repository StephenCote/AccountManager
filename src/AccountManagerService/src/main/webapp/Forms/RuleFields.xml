<html-fragment>
	<div class = "rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type = "text" rid = "description" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type = "text"  rid = "logicalOrder" bind = "${bean.rocketType}" class = "rocket-text rocket-text-short" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Score:
		</p>
		<p>
			<input type = "text"  rid = "score" bind = "${bean.rocketType}" class = "rocket-text rocket-text-short" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Type:
		</p>
		<p>
		<select rid = "ruleType" bind = "${bean.rocketType}">
			<option>UNKNOWN</option>
			<option>PERMIT</option>
			<option>DENY</option>
			</select>
    	</p>
	</div>

	<div class = "rocket-column-2">
		<p>
			Condition:
		</p>
		<p>
		<select rid = "condition" bind = "${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>ALL</option>
    		<option>ANY</option>
    		<option>NONE</option>
    		<option>LESS_THAN</option>
    		<option>LESS_THAN_OR_EQUALS</option>
    		<option>GREATER_THAN</option>
    		<option>GREATER_THAN_OR_EQUALS</option>
    		</select>
    				</p>
	</div>
	<div class = "rocket-column-2" rid = "patternPicker" style = "display:none;">
		<p rid = "patternPickerTitle">
			<span rid = "patternPickerToggle"></span> <span rid="patternPickerLabel">Patterns</span>:
		</p>
		<p rid = "patternPickerContent">
			<div component = "wideselect" rid = "patternsList">
			</div>
			<br />
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addPattern()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removePattern()" />
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openPattern()" />
		</p>
	</div>
	<div class = "rocket-column-2" rid = "rulePicker" style = "display:none;">
		<p rid = "rulePickerTitle">
			<span rid = "rulePickerToggle"></span> <span rid="rulePickerLabel">Rules</span>:
		</p>
		<p rid = "rulePickerContent">
			<div component = "wideselect" rid = "rulesList">
			</div>
			<br />
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addRule()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removeRule()" />
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openRule()" />
		</p>
	</div>
	
	<embedded-script><![CDATA[
	embedded_init : function(){
		var o = this.getBean("rocketType");
			this.GetElementByRID("patternPicker").style.display = "block";
			this.toggleField("patternPickerToggle","patternPickerContent");
			if(!this.getProperties().patternListProp) this.getProperties().patternListProp = "patterns";
			this.GetElementByRID("rulePicker").style.display = "block";
			this.toggleField("rulePickerToggle","rulePickerContent");
			if(!this.getProperties().ruleListProp) this.getProperties().ruleListProp = "rules";
			
			this.initRulePicker();
			this.initPatternPicker();


	},
setPatternPickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.GetElementByRID("patternPickerLabel"),s);
		},
		initPatternPicker : function(){
			/// Have to put a little extra logic here because pattern information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enablePatternInformation = (o != null ? 1 : 0);
			
			if(_s.enablePatternInformation){
				//this.getProperties().patternListProp = "patterns";
				this.GetComponentByRID("patternsList").setLoadHandler(this.scopeHandler("configPatternsList",0,1,1));
			}
		},

		
		openPattern : function(){
			var oI = this.getPatternsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Pattern");
		},
		addPattern : function(){
			this.manageList("Pattern", this.getPatternsList().getObjectId());
		},
		removePattern : function(){
			var oI = this.getPatternsList().getActiveItem();
			if(oI) this.getPatternsList().clearItem(oI.index);
		},

		configPatternsList : function(s,v){
			var oL = this.getPatternsList(),_s = this.getProperties();
			if(!_s.enablePatternInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshPatterns();
		},
		refreshPatterns : function(){
			var oL = this.getPatternsList(), aP = this.getProperties().patternListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getPatternsList : function(){
			return this.GetComponentByRID("patternsList").GetWideSelect();
		},
setRulePickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.GetElementByRID("rulePickerLabel"),s);
		},
		initRulePicker : function(){
			/// Have to put a little extra logic here because rule information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableRuleInformation = (o != null ? 1 : 0);
			
			if(_s.enableRuleInformation){
				//this.getProperties().ruleListProp = "rules";
				this.GetComponentByRID("rulesList").setLoadHandler(this.scopeHandler("configRulesList",0,1,1));
			}
		},

		
		openRule : function(){
			var oI = this.getRulesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Rule");
		},
		addRule : function(){
			this.manageList("Rule", this.getRulesList().getObjectId());
		},
		removeRule : function(){
			var oI = this.getRulesList().getActiveItem();
			if(oI) this.getRulesList().clearItem(oI.index);
		},

		configRulesList : function(s,v){
			var oL = this.getRulesList(),_s = this.getProperties();
			if(!_s.enableRuleInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshRules();
		},
		refreshRules : function(){
			var oL = this.getRulesList(), aP = this.getProperties().ruleListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getRulesList : function(){
			return this.GetComponentByRID("rulesList").GetWideSelect();
		},
	addType : function(o){
			Hemi.log("Add rule type: " + o.name + ":" + o.patternType);
			return AM6Client.update(o.nameType, o);
		},
		prepareSave : function(o){
			var _s = this.getProperties();
			aP = _s.patternListProp;
			o[aP] = [];
			var aPatterns = this.getPatternsList().getItems();
			for(var i = 0; i < aPatterns.length;i++) o[aP].push(aPatterns[i].data);
			aP = this.getProperties().ruleListProp;
			o[aP] = [];
			var aRules = this.getRulesList().getItems();
			for(var i = 0; i < aRules.length;i++) o[aP].push(aRules[i].data);
			return 1;
		}
	]]></embedded-script>
	</html-fragment>
    		
    		