<html-fragment>
	<div class = "rocket-column-2" rid = "permissionPicker" style = "display:none;">
		<p rid = "permissionPickerTitle">
			<span rid = "permissionPickerToggle"></span> <span rid="permissionPickerLabel">Permissions</span>:
		</p>
		<p rid = "permissionPickerContent">
			<div component = "wideselect" rid = "permissionsList">
			</div>
			<br />
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addPermission()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removePermission()" />
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openPermission()" />
		</p>
	</div>


	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getElementByRID("permissionPicker").style.display = "block";
			if(this.toggleField) this.toggleField("permissionPickerToggle","permissionPickerContent");
			if(!this.getProperties().permissionListProp) this.getProperties().permissionListProp = "permissions";
		},
		prepareSavePermissionPicker : function(o){
			this.prepareSavePermissionsList(o);
		},
		setPermissionPickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("permissionPickerLabel"),s);
		},
		initPermissionPicker : function(){
			/// Have to put a little extra logic here because permission information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enablePermissionInformation = (o != null ? 1 : 0);
			
			if(_s.enablePermissionInformation){
				//this.getProperties().permissionListProp = "permissions";
				this.getComponentByRID("permissionsList").setLoadHandler(this.scopeHandler("configPermissionsList",0,1,1));
			}
		},

		
		openPermission : function(){
			var oI = this.getPermissionsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Permission");
		},
		addPermission : function(){
			this.manageList("Permission", this.getPermissionsList().getObjectId());
		},
		removePermission : function(){
			var oI = this.getPermissionsList().getActiveItem();
			if(oI) this.getPermissionsList().clearItem(oI.index);
		},

		configPermissionsList : function(s,v){
			var oL = this.getPermissionsList(),_s = this.getProperties();
			if(!_s.enablePermissionInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshPermissions();
		},
		refreshPermissions : function(){
			var oL = this.getPermissionsList(), aP = this.getProperties().permissionListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getPermissionsList : function(){
			return this.getComponentByRID("permissionsList").GetWideSelect();
		},
		prepareSavePermissionsList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enablePermissionInformation) return;
			aP = this.getProperties().permissionListProp;
			o[aP] = [];
			var aPermissions = this.getPermissionsList().getItems();
			for(var i = 0; i < aPermissions.length;i++) o[aP].push(aPermissions[i].data);
		}
		
		
		
	]]></embedded-script>
</html-fragment>
