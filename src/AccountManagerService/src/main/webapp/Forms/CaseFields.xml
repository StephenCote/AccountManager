<html-fragment>
	<div class = "rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type = "text" rid = "description" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	<div class = "rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid = "caseType" bind = "${bean.rocketType}">
	  			<option>UNKNOWN</option>
	    		<option>USE</option>
	    		<option>TECHNICAL</option>
	    		<option>CUSTOMER</option>
	    		<option>BUSINESS</option>
			</select>
		</p>
	</div>
	<import-xml src = "/AccountManagerService/Forms/ResourcePicker.xml" id = "ResourcePicker" />
	<import-xml src = "/AccountManagerService/Forms/ArtifactPicker.xml" id = "ArtifactPicker" />
	<import-xml src = "/AccountManagerService/Forms/TaskPicker.xml" id = "TaskPicker" />
	<import-xml src = "/AccountManagerService/Forms/DataPicker.xml" id = "DataPicker" />
	<!-- 
	<div class = "rocket-column-2">
		<p>
			Actors:
		</p>
		<p>
			<div component = "wideselect" rid = "actorsList">
			</div>
			<br />
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addActor()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removeActor()" />
		</p>
	</div>
	-->

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getProperties().taskListProp = "sequence";
			this.getProperties().resourceListProp = "actors";
			this.getProperties().artifactListProp = "prerequisites";
			this.getProperties().dataListProp = "diagrams";
			Hemi.xml.setInnerXHTML(this.GetElementByRID("dataPickerTitle"),"Diagrams");
			Hemi.xml.setInnerXHTML(this.GetElementByRID("taskPickerTitle"),"Sequence");
			Hemi.xml.setInnerXHTML(this.GetElementByRID("resourcePickerTitle"),"Actors");
			Hemi.xml.setInnerXHTML(this.GetElementByRID("artifactPickerTitle"),"Prerequisites");
			this.GetComponentByRID("dataList").setLoadHandler(this.scopeHandler("configDataList",0,1,1));
			this.GetComponentByRID("tasksList").setLoadHandler(this.scopeHandler("configTasksList",0,1,1));
			this.GetComponentByRID("resourcesList").setLoadHandler(this.scopeHandler("configResourcesList",0,1,1));
			this.GetComponentByRID("artifactsList").setLoadHandler(this.scopeHandler("configArtifactsList",0,1,1));
			//this.GetComponentByRID("actorsList").setLoadHandler(this.scopeHandler("configActorsList",0,1,1));
		},
		
		addType : function(o){
			Hemi.log("Add case type: " + o.name + ":" + o.description);
			return AM6Client.update("CASE",o);
		},
		prepareSave : function(o){
			this.prepareSaveDatasList(o);
			this.GetElementByRID("text").className = "rocket-text";
			o.actors = [];
			var aActors = this.getResourcesList().getItems();
			for(var i = 0; i < aActors.length;i++) o.actors.push(aActors[i].data);
			
			o.prerequisites = [];
			var aPrerequisites = this.getArtifactsList().getItems();
			for(var i = 0; i < aPrerequisites.length;i++) o.prerequisites.push(aPrerequisites[i].data);

			o.sequence = [];
			var aPrerequisites = this.getTasksList().getItems();
			for(var i = 0; i < aPrerequisites.length;i++) o.sequence.push(aPrerequisites[i].data);
		
			o.diagrams = [];
			var aPrerequisites = this.getDataList().getItems();
			for(var i = 0; i < aPrerequisites.length;i++) o.diagrams.push(aPrerequisites[i].data);
			
			/*
			if(!this.ValidateForPattern("text","not-empty")){
				this.GetElementByRID("text").className = "rocket-text rocket-text-error";
				this.setStatus("Text cannot be empty");
				return 0;
			}
			*/
			return 1;
		}
	]]></embedded-script>
</html-fragment>