<html-fragment>
	<div class = "rocket-column-2" rid = "attributePicker" style = "display:none;">
		<p rid = "attributePickerTitle">
			<span rid = "attributePickerToggle"></span> <span rid="attributePickerLabel">Attributes</span>:
		</p>
		<p rid = "attributePickerContent">
			<div component = "wideselect" rid = "attributesList">
			</div>
			<br />
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addAttribute()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removeAttribute()" />
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openAttribute()" />
		</p>
	</div>


	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType"),_s = this.getProperties();
			if(o && o != null && o.id > 0){
				this.getElementByRID("attributePicker").style.display = "block";
				this.toggleField("attributePickerToggle","attributePickerContent");
				if(!this.getProperties().attributeListProp) this.getProperties().attributeListProp = "attributes";
				_s.enableAttributeInformation = 1;
			}
		},
		prepareSaveAttributePicker : function(o){
			this.prepareSaveAttributesList(o);
		},
		setAttributePickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("attributePickerLabel"),s);
		},
		initAttributePicker : function(){
			/// Have to put a little extra logic here because attribute information is optional
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableAttributeInformation = (o != null && o.id > 0 ? 1 : 0);
			
			if(_s.enableAttributeInformation){
				this.getProperties().attributeListProp = "attributes";
				this.getComponentByRID("attributesList").setLoadHandler(this.scopeHandler("configAttributesList",0,1,1));
			}
		},
		openAttributeView : function(oA){
			var oProps = {openerId:this.getObjectId(),viewType:this.getBean("rocketType"),attributeType:oA,listId:this.getAttributesList().getObjectId()};
			Hemi.app.createWindow((oA ? oA.name : "New") + " Attribute", "/AccountManagerService/Forms/Attribute.xml", "View-" + (oA ? oA.name + "-" + oA.referenceId : Hemi.guid()), 0, 0, oProps)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	oW.setHideOnClose(0);
	            }
	           });
		},
		openAttribute : function(){
			var oI = this.getAttributesList().getActiveItem();
			if(oI) this.openAttributeView(oI.data);

		},
		addAttribute : function(){
			this.openAttributeView();
		},
		removeAttribute : function(){
			var oI = this.getAttributesList().getActiveItem();
			if(oI) this.getAttributesList().clearItem(oI.index);
		},
		configAttributesList : function(s,v){
			var oL = this.getAttributesList(),_s = this.getProperties();
			if(!_s.enableAttributeInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshAttributes();
		},
		refreshAttributes : function(){
			var oList = this.getAttributesList(), aP = this.getProperties().attributeListProp;
			oList.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				var oA = o[aP][i];

				oList.addItem(this.decorateAttributeItem(oA),oA);
			}
		},
		decorateAttributeItem : function(oA){
			var oL = document.createElement("div");
			var oE = document.createElement("div");
			var oV = document.createElement("div");
			var oB = document.createElement("div");
			var oC = document.createElement("span");
			oC.appendChild(oL);
			oC.appendChild(oE);
			oC.appendChild(oV);
			oC.appendChild(oB);
			oL.style.cssText= "float:left;width:100px;";
			oE.style.cssText = "float:left; width: 25px; text-align:center;";
			oV.style.cssText = "float:left;";
			oB.style.cssText = "clear:both;";
			oL.appendChild(document.createTextNode(oA.name));
			oE.appendChild(document.createTextNode("="));
			for(var v = 0; v < oA.values.length; v++){
				if(v > 0) oV.appendChild(document.createElement("br"));
				oV.appendChild(document.createTextNode(oA.values[v]));
			}
			return oC;
		},
		getAttributesList : function(){
			return this.getComponentByRID("attributesList").GetWideSelect();
		},
		prepareSaveAttributesList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableAttributeInformation) return;
			aP = this.getProperties().attributeListProp;
			o[aP] = [];
			var aAttributes = this.getAttributesList().getItems();
			for(var i = 0; i < aAttributes.length;i++) o[aP].push(aAttributes[i].data);
		}
		
		
		
	]]></embedded-script>
</html-fragment>
