<?xml version="1.0" encoding="UTF-8"?>
<DWAC Title = "AM5" DWacTemplateId = "Dashboard.xml">
<fragments>
<fragment id = "SharingFrag.xml">
<span>
<div class="rocket-column-2" rid="shareContainer" style="display:none;">
	<p>
		Sharing:
	</p>
	<p>
		<input type="button" class="rocket-button" value="Configure Authorization" onclick="${this}.openShare()"/>
	</p>
</div>

<embedded-script><![CDATA[
	embedded_init : function(){
		var o = this.getBean("rocketType");
		this.getElementByRID("shareContainer").style.display = (o.id ? "block" : "none");
	},
	openShare : function(){
		var o = this.getBean("rocketType");
		var oProps = {viewType:o};
		Hemi.app.createWindow('Sharing','${dwac.path}[Sharing.xml]','Sharing-' + o.id,0,0,oProps)
		.then((oW)=>{
			if(oW){
				oW.setCanMinimize(0);
				oW.setCanMaximize(0);
		    	oW.resizeTo(475, 400);
		    	oW.setHideOnClose(0);
		    	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
			}
		});
	}
]]></embedded-script>
</span></fragment><fragment id = "ProjectStageSection.xml">
<span><tbody>
				<tr rid="${id}" style="border-top: .1em dotted #AAAAFF;">
					<td>
						<input disabled="true" value="1" class="rocket-text" type="text" style="text-align:right;width: 25px !important; border-width: 0px !important;" rid="${id}rowNum"/>
						<input type="button" class="uwm-inline-button uwm-inline-button-info" value="" onclick="${this}.openObject('${id}')"/>
					</td>
					<td><input disabled="true" value="" class="rocket-text" type="text" style="width: 25px !important; border-width: 0px !important;" rid="${id}status"/></td>
					<td><input type="text" rid="${id}name" class="rocket-text" style="width: 175px !important;"/>
					<input type="button" onclick="${this}.chooseStage('${id}')" value="..." class="uwm-inline-button"/>
					</td>
					<!-- 
					<td><input type="text" onclick = "${this}.chooseMethodology(${stageNum})" rid="${id}methodology" class="rocket-text"  style="width: 100px !important;" /></td>
					-->
					<td>
						<input type="text" onclick="${this}.chooseBudget('${id}')" rid="${id}budget" class="rocket-text" style="width: 120px !important;"/>
						<!-- 
						<input type = "button"  value = "..." class = "uwm-inline-button" />
						-->
						<!--
						<select rid = "${id}estimate" class = "rocket-text">${estimateOptions}</select>
						-->
					</td>
					<!--
					<td colspan = "2"><input type="text" onclick = "${this}.chooseProcess(${stageNum})" rid="${id}name" class="rocket-text"  style="width: 225px !important;" /></td>
					-->
					<td colspan="2">
					<input type="text" disabled="true" style="width: 170px !important;" rid="${id}schedule" class="rocket-text"/>
					<input type="button" onclick="${this}.chooseSchedule('${id}')" value="..." class="uwm-inline-button"/>
					</td>
					<td>
						<input class="rocket-text" type="text" style="width: 100px !important;" onblur="${this}.updateDependencies('${id}')" rid="${id}dependencies"/>
					</td>
					<td/>
					<td style="padding-left:15px;">
						<input type="button" class="uwm-inline-button" value="X" onclick="${this}.deleteStage('${id}')"/>
					</td>
				</tr>
				</tbody></span></fragment><fragment id = "ProjectRowSection.xml">
<span><tr rid="${id}">
		<td component="draggable">
			<input disabled="true" value="1" class="rocket-text" type="text" style="text-align:right;width: 25px !important; border-width: 0px !important;" rid="${id}rowNum"/>
			<input type="button" class="uwm-inline-button uwm-inline-button-info" value="" onclick="${this}.openObject('${id}')"/>
		</td>
		<td>
		<!--
			<input value="" class="rocket-text" type="text" onclick ="${this}.chooseTaskStatus('${id}')"
				style="width: 75px !important; border-width: 0px !important;" rid="${id}status" />
		-->
			<input type="button" class="uwm-inline-button uwm-inline-button-broken" value="" onclick="${this}.chooseTaskStatus('${id}')" rid="${id}status"/>
		</td>
		<td>
			<input class="rocket-text" type="text" style="width: 175px !important;" rid="${id}name"/>
			<input type="button" onclick="${this}.chooseTask('${id}')" value="..." class="uwm-inline-button"/>
		</td>
		<td>
		<!-- onclick="${this}.chooseEstimate('${id}')" rid = "${id}estimate" --> 
			<input type="text" rid="${id}estimate" style="width: 120px !important;" class="rocket-text" onclick="${this}.chooseEstimate('${id}')"/>
		
				<!-- 
			<input type = "button" onclick="${this}.chooseEstimate('${id}')" value = "..." class = "uwm-inline-button" />
			-->
			<!--
			<select rid = "${id}estimate" class = "rocket-text">${estimateOptions}</select>
			-->
		</td>
		<!-- 
		<td></td>
		-->
		<td style="text-align:right;" colspan="2">
			<input class="rocket-text" type="date" component="calendar" style="width: 150px !important;" rid="${id}end"/>
		</td>
		<td>
			<input class="rocket-text" type="text" style="width: 100px !important;" onblur="${this}.updateDependencies('${id}')" rid="${id}dependencies"/>
		</td>
		<td>
			<input class="rocket-text" type="text" style="width: 120px !important;" rid="${id}resources" onclick="${this}.chooseResources('${id}')"/>
				<!--
				<input type = "button" onclick = "${this}.chooseResources('${id}')" value = "..." class = "uwm-inline-button" />
				-->
		</td>
		<td style="padding-left:15px;">
			<input type="button" class="uwm-inline-button" value="X" onclick="${this}.deleteRow('${id}')"/>
		</td>
	</tr></span></fragment><fragment id = "FormViewTools.xml">
<span>
	
<embedded-script><![CDATA[

	openItem : function(o,typeName,viewTypeName){
		var _s = this.getProperties();
		if(!typeName) typeName = _s.typeName;
		if(!viewTypeName) viewTypeName = typeName;
		if(!o.populated){
			if(o.nameType && o.nameType.match(/^data$/gi) && o.detailsOnly && o.blob){
				Hemi.log("Not pulling own blob data for " + o.name + " unless specifically requested.");
			}
			else if(this.provideItem){
				o = this.provideItem(typeName, o);
			}
			else{
				Hemi.log("Not populated.  Fetching a populated version.");
				
				if(o.objectId) o = AM6Client.get(typeName.toUpperCase(),o.objectId);
				else o = AM6Client.getByName(typeName.toUpperCase(), AM6Client.find("GROUP","DATA",o.groupPath).objectId, o.name);
				if(!o.populated) alert("still not populated");
			}
		}
		this.openWindow(viewTypeName, o);
	},
	openWindow : function(sType,oType){
		var oProps = {openerId:this.getObjectId(),listType:sType,picker:0,viewType:oType,listId:0};
		Hemi.app.createWindow((oType && oType.id ? oType.name : "New" + sType), uwm.getApiTypeView(sType) + "/Forms/" + sType + ".xml", "View-" + (oType && oType.id ? sType + "-" + oType.id : Hemi.guid()), 0, 0, oProps)
		.then((oW)=>{
           if (oW) {
           	oW.resizeTo(475, 400);
           	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
           	// Destroy the window when closed
           	//
           	oW.setHideOnClose(0);
           }
         });
	},
	 pad : function(i,l){
	   var s = "" + i;
	   var a = [];
	   for(var i = s.length; i < l;i++) a.push("0");
	   a.push(s);
	   return a.join("");
	},
	clearType : function(sType, id){
		var _o = this.getObjects(), i;
		if( _o.entityMap[id] ){
			Hemi.log("Clearing map for " + id);
			delete _o.entityMap[id];
			this.getElementByRID(id).value = "";
		}
		else{
			this.getElementByRID(id).value = "[ error ]";
		}
		
	},
	openType : function(sType, id){
		Hemi.log("Opening value for " + sType + " " + id);
		if(!this.getObjects().entityMap[id]) return;
		
		this.openItem(window[uwm.getApi(sType)]["get" + sType + "ById"](this.getObjects().entityMap[id]),sType,sType);
	},
	chooseType : function(sType, id){
		Hemi.log("Picking value for " + sType + " " + id);
		this.openPicker({ctrlId:id}, sType, id,"pickType");
	},
	pickType : function(s, v, i){
		Hemi.log("Setting value for " + i.ctrlId);
		this.getElementByRID(i.ctrlId).value = (v ? this.getEntityLabel(v) : "[ error ]");
		this.getObjects().entityMap[i.ctrlId] = (v ? v.id + "" : "");
	},
	openPicker : function(vSrc, sType, sListId, sFN){
		var oProps = {openerId:this.getObjectId(),sourceId:vSrc,listType:sType,picker:1,pickFunction:sFN};
		Hemi.app.createWindow("ManageList", uwm.getApiTypeView(sType) + "/Forms/List" + sType + "s.xml", "Manager-" + (sListId ? sListId : Hemi.guid()), 0, 0, oProps, 0)
		.then((oW)=>{
          	if (oW) {
          		oW.resizeTo(475, 300);
          		
          		if(vSrc.ctrlId){
          			var o = this.getElementByRID(vSrc.ctrlId);
          			var l = Hemi.css.getAbsoluteLeft(o);
				var t = Hemi.css.getAbsoluteTop(o) + o.offsetHeight;
				Hemi.log("Move " + vSrc.ctrlId + " to " + l + ", " + t);
				oW.moveTo(l + "px",t + "px");
				
          		}
          		else{
          		
          			Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
          		}
          		// Destroy the window when closed
          		//
          		oW.setHideOnClose(0);
          	}
          });
	},

	getPatternType : function(oRule){
		var s = "";
		switch(oRule.validationType){
			case "BOOLEAN":
				s = "bool";
				break;
			case "REPLACEMENT":
				s = "replace";
				break;
			case "NONE":
				s = "none";
				break;
		}
		return s;
	},
	
	emitClientValidationPattern : function(oRule){
		if(Hemi.data.validator.service.getPattern(oRule.id + "-" + oRule.name)) return;
		if(!oRule.populated) oRule = AM6Client.get("VALIDATIONRULE",oRule.id);
		var oDV = Hemi.data.validator.definitions.service;
	
		var aInc;
		for(var i = 0; i < oRule.rules.length; i++){
			if(!aInc) aInc = [];
			var oCRule = AM6Client.get("VALIDATIONRULE",oRule.rules[i].id);
			aInc.push(oCRule.id + "-" + oCRule.name);
			this.emitClientValidationPattern(oCRule);
		}
		this.getObjects().dynPattern.push(oRule.id + "-" + oRule.name);
		oDV.addNewPattern(oRule.id + "-" + oRule.name, this.getPatternType(oRule), (oRule.validationType == "BOOLEAN" ? (oRule.comparison ? "true" : "false") : 0), oRule.expression, (oRule.validationType == "REPLACEMENT" ? oRule.replacementValue : 0), oRule.allowNull, oRule.errorMessage, aInc);
	},
	getEntity : function(sType, i){
		var e = this.getObjects().entities;
		if(!e[sType]) e[sType]={};
		if(typeof i == "number") i = i + "";
		if(!e[sType][i]){
			var o = window[uwm.getApi(sType)]["get" + sType + "ById"](i);
			if(o){
				e[sType][i] = o;
				return o;
			}
		}
		 return e[sType][i];
	},
	getEntityLabel : function(o){
		if(o == null || !o) return "[ Invalid Object ]";
		var s = "[ Unhandled ]";
		switch(o.nameType){
			case "RESOURCE":
				s = o.name + " " + o.resourceType;
				break;
			default:
				s = o.name;
				break;
		}
		return s;
	},
	getElementTemplate : function(oFormTemplate, oElement){
		if(oElement.elementTemplate){
			Hemi.log("Returning " + oElement.name + " element template");
			return oElement.elementTemplate.text;
		}
		else{
			Hemi.log("Element " + oElement.name + " doesn't define a template");
		}
		var aBuff = [];
		
		if(oFormTemplate && oFormTemplate.isGrid){
			aBuff.push("<div style = 'float:left;width:125px;'>");
			aBuff.push("${element." + oElement.elementName + ".field}");
			//aBuff.push(this.getElementField(oFormTemplate,oElement));
			aBuff.push("</div>");
		}
		else{
			aBuff.push("<div class = \"rocket-column-2\">\n");
			aBuff.push("\t<p>${element." + oElement.elementName + ".label}</p>\n");
			aBuff.push("\t<p>${element." + oElement.elementName + ".field}</p>\n");
			//aBuff.push(this.getElementField(oFormTemplate,oElement));
			aBuff.push("</div>\n");
		}
		return aBuff.join("");
	},
	getFormTemplate : function(oForm,bHideExample){
		var aBuff = [];
		
		if(bHideExample){
			aBuff.push("<Template>\n<import-xml src = \"Templates/TemplateTools.xml\" id = \"TemplateTools\" />\n\n");
			aBuff.push("<import-xml src = \"/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/FormViewTools.xml\" id = \"FormViewTools\" />\n");
		}
		//aBuff.push("<div class = \"rocket-column-2\"><p>Name</p><p>${dform.name}</p></div>\n");
		for(var i = 0; i < oForm.elements.length; i++){
			var oE = oForm.elements[i];
			/// aBuff.push(this.getElementTemplate((oForm.isTemplate ? oForm : oForm.template),oE));
			aBuff.push("${element." + oE.elementName + "}\n");
		}
		if(!bHideExample){
			if( (oForm.isTemplate ? oForm : oForm.template).isGrid){ 
				aBuff.push("<div rid = \"newRowCont\" class = \"rocket-column-2\">\n");
				aBuff.push("<p>New Row</p>\n");
				aBuff.push("<p><input type = \"button\"  onclick = \"${this}.addRow()\" value = \"Add\" class = \"rocket-button\" /></p>\n");
				aBuff.push("</div>\n");
			}
			
			aBuff.push("<div class = \"rocket-column-2\">\n");
			aBuff.push("<p>Save</p>\n");
			aBuff.push("<p><input type = \"button\"  onclick = \"${this}.saveForm()\" value = \"Save\" class = \"rocket-button\" /></p>\n");
			aBuff.push("</div>");
		}
		else{
			aBuff.push("<import-xml src = \"/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/DynamicFormSave.xml\" id = \"DynamicFormSave\" />");
			aBuff.push("</Template>");
		}
		return aBuff.join("");
	},
	getElementMap : function(){
		if(!this.getObjects().elementMap){
			var oForm = this.getBean("formBean");
			var e = {};
			for(var i = 0; i < oForm.form.elements.length;i++){
				e[oForm.form.elements[i].elementName] = oForm.form.elements[i];
			}
			this.getObjects().elementMap = e;
		}
		return this.getObjects().elementMap;
	},

	getElementField : function(oForm, oElement){
		if(!oElement || oElement == null){
			return "[ Null Element Reference ]";
		}
		var aBuff = [];
	    ///aBuff.push("<div class = \"rocket-column-2\">\n");
		///aBuff.push("\t<p>" + oElement.elementLabel + "</p>\n");
		///aBuff.push("\t<p>");
		var sPId = "";
		if(oElement.validationRule){
			sPId = " pattern-id = \"" + oElement.validationRule.id + "-" + oElement.validationRule.name + "\"";
			this.emitClientValidationPattern(oElement.validationRule);
		}
		switch(oElement.elementType){
			case "SELECT":
			case "MULTIPLE_SELECT":
				aBuff.push("<select " + sPId + " rid = \"" + oElement.elementName + "\" bind = \"${bean.formBean}\" " + (oElement.elementType.match(/multiple/gi) ? " multiple = \"true\"" : "") + ">");
				for(var v = 0; v < oElement.elementValues.length;v++){
					/// For select values, only use values supplied by the template
					///
					if(oElement.elementValues[v].formId != oForm.id) aBuff.push("<option>" + oElement.elementValues[v].textValue + "</option>");
				}
				aBuff.push("</select>");
				break;
			case "DATA":
			case "SCHEDULE":
			case "TIME":
			case "NOTE":
			case "ESTIMATE":
			case "RESOURCE":
				var sT = oElement.elementType.substring(0,1) + oElement.elementType.substring(1,oElement.elementType.length).toLowerCase();
				aBuff.push(
					"<input disabled = \"true\" bind = \"${bean.formBean}\" type=\"text\" rid=\"" + oElement.elementName + "\"" + (!oElement.elementTemplate ? " style=\"width: 100px !important;\" class=\"rocket-text\"" : "") + " />"
					//+
					//"<input type = \"button\" value = \"X\" />"
					+ "<input type = \"button\" value = \"...\" class = \"rocket-button\" onclick=\"${this}.chooseType('" + sT + "','" + oElement.elementName + "')\" />"
					+ "<input type = \"button\" value = \"X\" class = \"rocket-button\" onclick = \"${this}.clearType('" + sT + "','" + oElement.elementName + "')\" />"
					+ "<input type = \"button\" class = \"rocket-button\" value = \">\" onclick = \"${this}.openType('" + sT + "','" + oElement.elementName + "')\" />"
				);
				break;
			case "DATE":
				aBuff.push("<input type = \"date\" " + sPId + " component = \"calendar\" rid = \"" + oElement.elementName + "\" bind = \"${bean.formBean}\"" + (!oElement.elementTemplate ? " class = \"rocket-text\"" : "") + " />");
				break;
			case "INT":
			case "STRING":
				aBuff.push("<input type = \"text\" " + sPId + " rid = \"" + oElement.elementName + "\" bind = \"${bean.formBean}\"" + (!oElement.elementTemplate ? " class = \"rocket-text\"" : "") + " />");
				break;
			case "STRING_MULTILINE":
				aBuff.push("<textarea " + sPId + " rid = \"" + oElement.elementName + "\" bind = \"${bean.formBean}\"" + (!oElement.elementTemplate ? " class = \"rocket-text\"" : "") + "></textarea>");
				break;
			case "BOOLEAN":
				aBuff.push("<input type = \"checkbox\" " + sPId + " rid = \"" + oElement.elementName + "\" bind = \"${bean.formBean}\"" + (!oElement.elementTemplate ? " class = \"rocket-text\"" : "") + " />");
				break;
		}
		///aBuff.push("</p>\n");
		///aBuff.push("</div>\n");
		return aBuff.join("");
	},
	/// This returns the 'bean' value, which is a transitive value in the Hemi Framework
	/// So, for example, a checkbox value is a boolean, 
	getElementValue : function(oF,oE){
		
		var v;
		var sFVal = (oE.elementValues.length ? oE.elementValues[0] : v);
		switch(oE.elementType){
			case "MULTIPLE_SELECT":
			case "SELECT":
				for(var i = 0; i < oE.elementValues.length; i++){
					if(oF.id != oE.elementValues[i].formId) continue;
					v = oE.elementValues[i].textValue;
					break;
				}
				Hemi.log("Returning select value: " + v);
				break;
				/*
			case "MULTIPLE_SELECT":
				var a = [];
				for(var i = 0; i < oE.elementValues.length; i++){
					if(oF.id != oE.elementValues[i].formId) continue;
					a.push(oE.elementValues[i].textValue);
					break;
				}
				v = a;
				Hemi.log("Returning select value: " + v);
				break;
			*/
			case "DATA":
			case "SCHEDULE":
			case "TIME":
			case "NOTE":
			case "ESTIMATE":
			case "RESOURCE":
				if(sFVal && sFVal.binaryId > 0){
					var sT = oE.elementType.substring(0,1) + oE.elementType.substring(1,oE.elementType.length).toLowerCase();
					var oEE = this.getEntity(sT,sFVal.binaryId);
					v = this.getEntityLabel(oEE);
					this.getObjects().entityMap[oE.elementName] = sFVal.binaryId ;
				}
				else{
					Hemi.log("Setting empty string for " + oE.elementName + " because binaryId = " + (sFVal ? sFVal.binaryId  + " (" + (typeof sFVal.binaryId) + ")" : "undefined"));
					v = "";
				}

				break;
			case "DATE":
				v = (sFVal ? new Date(sFVal.textValue) : new Date());
				break;
			case "INT":
			case "STRING_MULTILINE":
			case "STRING":
				v = (sFVal ? sFVal.textValue : "");
				break;
			case "BOOLEAN":
				v = (sFVal && sFVal.textValue && sFVal.textValue.match(/^true$/gi) ?  true : false);
				break;
		}
		return v;
	},
	/// Note: the local token handler is not used because some of the token swaps are for text to elements
	/// while the local token handler is restricted to the node type scope
	///
	evaluateTokens : function(r){
		var m,
			e1 = /\$\{element\.(\S[^\.}]+)\.(\S+)\}/,
			e2 = /\$\{element\.(\S[^\.}]+)\}/,
			f1 = /\$\{dform\.(\S[^\.}]+)\}/
		;
		var o = this.getBean("formBean");
		if(!o || !o.form){
			Hemi.logError("Form bean is not defined");
			return r;
		}
		var em = this.getElementMap();
		while ((m = r.match(f1)) && m.length > 1) {
			if(m[1].match(/^name$/)) r = r.replace(f1,o.form.name);
			else if(m[1].match(/^id$/)) r = r.replace(f1,o.form.id);
			else if(m[1].match(/^description$/)) r = r.replace(f1,o.form.description);
			else r = r.replace(f1,"[No Match For '" + m[1] + "']");
		}
		while ((m = r.match(e2)) && m.length > 1) {
			///Hemi.log("Element: " + m[0] + " === " + m[1]);
			if(em[m[1]]){
				//if(em[m[1]].elementTemplate){
				//	r = r.replace(e2,em[m[1]].elementTemplate.text);
				//}
				//else{
					r = r.replace(e2,this.getElementTemplate(o.template,em[m[1]]));
				//}
			}
			else{
				Hemi.logError("Element " + m[1] + " not found");
				r = r.replace(e2,"[ Element " + m[1] + " not found ]");
			}
		}

		while ((m = r.match(e1)) && m.length > 2) {
			if(em[m[1]]){
				if(m[2].match(/^name$/)) r = r.replace(e1,em[m[1]].elementName);
				else if(m[2].match(/^label$/)) r = r.replace(e1,em[m[1]].elementLabel);
				else if(m[2].match(/^field$/)) r = r.replace(e1,this.getElementField(o.form,em[m[1]]));
				else r = r.replace(e1,"[ No Match For '" + m[2] + "']");
			}
			else{
				Hemi.logError("Element " + m[1] + " not found");
				r = r.replace(e1,"[ Element " + m[1] + " not found ]");
			}
		}
		return r;
	},
	viewForm : function(oForm, oFormTemplate){
		var xBean = {name: oForm.name,template:oFormTemplate,form:oForm};
		if(!oFormTemplate){
			this.setStatus("Cannot display form without a template reference");
			return;
		}
		var sTemp = (oFormTemplate.viewTemplate ? oFormTemplate.viewTemplate.text : this.getFormTemplate(oForm,1));
		if(!sTemp.match(/\<Template/)){
		sTemp = "<Template>\n"
			+ "<import-xml src = \"Templates/TemplateTools.xml\" id = \"TemplateTools\" />\n"
			+ "<import-xml src = \"/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/FormViewTools.xml\" id = \"FormViewTools\" />\n"
			+ sTemp
			+ "\n<import-xml src = \"/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/DynamicFormSave.xml\" id = \"DynamicFormSave\" /></Template>"
		;
		}
		for(var i = 0; i < oForm.elements.length; i++){
			var oE = oForm.elements[i];
			xBean[oE.elementName] = this.getElementValue(oForm,oE);
		}
		
		this.setBean(xBean, "formBean");
		//alert("Before: " + sTemp);
		//Hemi.log("Before: " + sTemp);
		sTemp = this.evaluateTokens(sTemp);
		var oX = Hemi.xml.parseXmlDocument(sTemp);
		
		this.cleanTemplate();
		/// Note: even though embedded_init should be gone, calling into loadTemplate from here will cause it to fire
		this.loadTemplateFromNode(oX);

	},
	getMaxElementValue : function(oForm,aVals){

		return Math.max(aVals.length - this.getDefaultOffset(oForm,aVals),1);
	},
	getDefaultOffset : function(oForm, aVals){
		i = 0,v = 0;
		for(;i < aVals.length; i++){
			if(aVals[i].formId != oForm.id) v++;
		}
		return v;
	},
	viewGridForm : function(oForm, oFormTemplate){

		var xBean = {name: oForm.name,template:oFormTemplate,form:oForm};
		var aBuff = [];
		
		aBuff.push("<Template>\n<import-xml src = \"Templates/TemplateTools.xml\" id = \"TemplateTools\" />\n\n");
		aBuff.push("<import-xml src = \"/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/FormViewTools.xml\" id = \"FormViewTools\" />\n");
		aBuff.push("<div class = \"rocket-column-2\"><p>Name</p><p>${bean.formBean.name}</p></div>\n");
		var aCollBuff = [];
		var aValBuff = [];
		aCollBuff.push("<div style = 'clear:both;'>")
		
		aValBuff.push("<div rid = \"${id}Row\" style = 'clear:both;'>");

		for(var i = 0; i < oFormTemplate.elements.length; i++){
			var oE = oFormTemplate.elements[i];
			
			var sPId = "";
			if(oE.validationRule){
				sPId = " pattern-id = \"" + oE.validationRule.id + "-" + oE.validationRule.name + "\"";
				this.emitClientValidationPattern(oE.validationRule);
			}
			aCollBuff.push("<div style = 'float:left;width:125px;'>" + oE.elementLabel + "</div>");
			aValBuff.push("<div style = 'float:left;width:125px;'>");
			switch(oE.elementType){
				case "SELECT":
				case "MULTIPLE_SELECT":
					aValBuff.push("<select " + sPId + " rid = \"${id}" + oE.elementName + "\" bind = \"${bean.formBean}\" " + (oE.elementType.match(/multiple/gi) ? " multiple = \"true\"" : "") + ">");
					for(var v = 0; v < oE.elementValues.length;v++){
						/// For select values, only use values supplied by the template
						///
						if(oE.elementValues[v].formId != oForm.id) aValBuff.push("<option>" + oE.elementValues[v].textValue + "</option>");
					}
					aValBuff.push("</select>");
					break;
				case "DATE":
					//xBean[oE.elementName] = (oVal[oE.elementName] ? new Date(oVal[oE.elementName].textValue) : new Date());
					aValBuff.push("<input " + sPId + " type = \"date\" component = \"calendar\" rid = \"${id}" + oE.elementName + "\" bind = \"${bean.formBean}\" class = \"rocket-text\" />");
					break;
				case "DATA":
				case "SCHEDULE":
				case "TIME":
				case "NOTE":
				case "ESTIMATE":
				case "RESOURCE":
					var sT = oE.elementType.substring(0,1) + oE.elementType.substring(1,oE.elementType.length).toLowerCase();
					aValBuff.push(
						"<input bind = \"${bean.formBean}\" onclick=\"${this}.chooseType('" + sT + "','${id}" + oE.elementName + "')\" type=\"text\" rid=\"${id}" + oE.elementName + "\" style=\"width: 75px !important;\" class=\"rocket-text\" />"
						+
						"<input type = \"button\" value = \"X\" onclick = \"${this}.clearType('" + sT + "','${id}" + oE.elementName + "')\" />"
					);
					break;
				case "INT":
				case "STRING":
					//xBean[oE.elementName] = (oVal[oE.elementName] ? oVal[oE.elementName].textValue : "");
					aValBuff.push("<input " + sPId + " type = \"text\" rid = \"${id}" + oE.elementName + "\" bind = \"${bean.formBean}\" class = \"rocket-text\" />");
					break;
				case "STRING_MULTILINE":
					//xBean[oE.elementName] = (oVal[oE.elementName] ? oVal[oE.elementName].textValue : "");
					aValBuff.push("<textarea " + sPId + " rid = \"${id}" + oE.elementName + "\" bind = \"${bean.formBean}\" class = \"rocket-text\"></textarea>");
					break;
				case "BOOLEAN":
					//xBean[oE.elementName] = (oVal[oE.elementName] &&  oVal[oE.elementName].textValue.match(/^true$/gi) ?  true : false);
					aValBuff.push("<input " + sPId + " type = \"checkbox\" rid = \"${id}" + oE.elementName + "\" bind = \"${bean.formBean}\" class = \"rocket-text\" />");
					break;
			}
			aValBuff.push("</div>");
		}
		aCollBuff.push("<div style = 'float:left;width:50px;'>Delete</div>");
		aCollBuff.push("</div>");
		aValBuff.push("<div style = 'float:left;width:50px;'><input type = \"button\" value = \"X\" onclick = \"${this}.deleteRow('${id}')\" class = \"rocket-button\" /></div>");
		aValBuff.push("</div>");
		
		aBuff.push("<div rid = 'rowCont' style = 'clear:both;'>");
		var iRowCount = (oForm.elements.length && oForm.elements[0].elementValues.length ? this.getMaxElementValue(oForm,oForm.elements[0].elementValues) : 1);
		aBuff.push(aCollBuff.join(""));
		for(var i = 0; i < iRowCount;i++){
		   var sId = "Row-" + this.pad((i+1),10) + "-";
		   var sB = aValBuff.join("").replace(/\${id}/gi,sId);
		   aBuff.push(sB);
			var aE = oFormTemplate.elements;
		   for(var v = 0; v < aE.length;v++){
			var oE = aE[v];
		      var aEV = (oForm.elements[v] ? oForm.elements[v].elementValues : []);
		     // if(oE.elementValues[i]){
				switch(oE.elementType){
				case "DATE":
					xBean[sId + oE.elementName] = (aEV[i] ? new Date(aEV[i].textValue) : new Date());
					break;
				case "MULTIPLESELECT":
				case "SELECT":
					if(aEV[i].formId != oForm.id) continue;
					xBean[sId + oE.elementName] = aEV[i];

					break;

				case "INT":
				case "STRING":
				case "STRINGMULTILINE":
					xBean[sId + oE.elementName] = (aEV[i] ? aEV[i].textValue : "");
					break;
				case "BOOLEAN":
					if(aEV[i] && typeof aEV[i].textValue == "boolean") aEV[i].textValue = "" + aEV[i].textValue; 
					xBean[sId + oE.elementName] = (aEV[i] && aEV[i].textValue && aEV[i].textValue.match(/^true$/gi) ?  true : false);
					break;
				case "DATA":
				case "SCHEDULE":
				case "TIME":
				case "NOTE":
				case "ESTIMATE":
				case "RESOURCE":
					var sT = oE.elementType.substring(0,1) + oE.elementType.substring(1,oE.elementType.length).toLowerCase();
					if(aEV[i].isBinary && aEV[i].binaryId > 0){
					///if(aEV[i] && aEV[i].textValue.match(/^\d+$/gi) > 0){
						var oEE = this.getEntity(sT,aEV[i].binaryId)
						xBean[sId + oE.elementName] = this.getEntityLabel(oEE);
						this.getObjects().entityMap[sId + oE.elementName] = aEV[i].binaryId;
					}
					else{
						xBean[sId + oE.elementName] = "";
					}
 
					break;
					
				}
			//}
		
		   }
		}
		aBuff.push("</div>");
		aBuff.push("<import-xml src = \"/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/DynamicFormSave.xml\" id = \"DynamicFormSave\" />");
		aBuff.push("</Template>");
		xBean.rowCount = iRowCount;
		xBean.rowTemplate = aValBuff.join("");
		
		var oX = Hemi.xml.parseXmlDocument(aBuff.join(""));
		
		this.setBean(xBean, "formBean");
		
		this.cleanTemplate();
		/// Note: even though embedded_init should be gone, calling into loadTemplate from here will cause it to fire
		this.loadTemplateFromNode(oX);

	},
	getGridFormTemplate : function(oFormTemplate,bRowTemplate){

		var aBuff = [];
		aBuff.push("<Template>\n<import-xml src = \"Templates/TemplateTools.xml\" id = \"TemplateTools\" />\n\n");
		aBuff.push("<import-xml src = \"/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/FormViewTools.xml\" id = \"FormViewTools\" />\n");
		aBuff.push("<div class = \"rocket-column-2\"><p>Name</p><p>${bean.formBean.name}</p></div>\n");
		var aCollBuff = [];
		var aValBuff = [];
		aCollBuff.push("<div style = 'clear:both;'>")
		aValBuff.push("<div rid = \"${id}Row\" style = 'clear:both;'>");
		for(var i = 0; i < oFormTemplate.elements.length; i++){
			var oE = oFormTemplate.elements[i];
			var sPId = "";
			if(oE.validationRule){
				sPId = " pattern-id = \"" + oE.validationRule.id + "-" + oE.validationRule.name + "\"";
			}
			aCollBuff.push("<div style = 'float:left;width:125px;'>${element." + oE.elementName + ".label}</div>");
			aValBuff.push("<div style = 'float:left;width:125px;'>");
			aValBuff.push("${element." + oE.elementName + ".field}");
			aValBuff.push("</div>");
		}
		aCollBuff.push("<div style = 'float:left;width:50px;'>Delete</div>");
		aCollBuff.push("</div>");
		aValBuff.push("${button.delete}");
		aValBuff.push("</div>");
		
		aBuff.push("<div rid = 'rowCont' style = 'clear:both;'>");

		aBuff.push(aCollBuff.join(""));
		aBuff.push(aValBuff.join(""));
		aBuff.push("</div>");
		aBuff.push("${button.save}");
		aBuff.push("</Template>");
		
		if(bRowTemplate) return aValBuff.join("");
		return aBuff.join("");
	}
]]></embedded-script>
</span></fragment><fragment id = "WorkPickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Work:
		</p>
		<p>
			<input type="text" disable="true" rid="work" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseWork()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickWork('Work')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openWork()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().workProp){
			this.getProperties().workProp = "work";
		}
		//var o = this.getBean("rocketType");
		//this.pickWork('Work',o[this.getProperties().workProp]);

	},
	chooseWork : function(){
		this.manageList("Work", this.getObjectId(),"pickWork");
	},

		openWork : function(){
			var o = this.getBean("rocketType");
			if(o && o[this.getProperties().workProp] && this.openItem) this.openItem(o[this.getProperties().workProp],"Work");
		},
	pickWork : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().workProp] = v;
		this.getElementByRID("work").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "WorkPicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			<span rid="workPickerToggle"/> Works:
		</p>
		<p rid="workPickerContent">
			<div component="wideselect" rid="worksList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addWork()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeWork()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openWork()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		this.toggleField("workPickerToggle","workPickerContent");
		if(!this.getProperties().workListProp) this.getProperties().workListProp = "work";
	},
	openWork : function(){
		var oI = this.getWorksList().getActiveItem();
		if(oI && oI.data && this.openItem) this.openItem(oI.data,"Work");
	},
	addWork : function(){
			this.manageList("Work", this.getWorksList().getObjectId());
		},
		removeWork : function(){
			var oI = this.getWorksList().getActiveItem();
			if(oI) this.getWorksList().clearItem(oI.index);
		},

		configWorksList : function(s,v){
			var oL = this.getWorksList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshWorks();
		},
		refreshWorks : function(){
			var oL = this.getWorksList(), aP = this.getProperties().workListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getWorksList : function(){
			return this.getComponentByRID("worksList").GetWideSelect();
		},
		prepareSaveWorksList : function(o){
			aP = this.getProperties().workListProp;
			o[aP] = [];
			var aWorks = this.getWorksList().getItems();
			for(var i = 0; i < aWorks.length;i++) o[aP].push(aWorks[i].data);
		}
	
	]]></embedded-script>
</span></fragment><fragment id = "WorkFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			logicalOrder:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DependencyPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ArtifactPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'TaskPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ResourcePicker.xml']/span" src="${dwac.path}"/>


	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.getProperties().resourceListProp = "resources";
			this.getProperties().artifactListProp = "artifacts";
			this.getProperties().taskListProp = "tasks";
			this.getProperties().dependencyListProp = "dependencies";
			this.getComponentByRID("dependenciesList").setLoadHandler(this.scopeHandler("configDependenciesList",0,1,1));
			this.getComponentByRID("artifactsList").setLoadHandler(this.scopeHandler("configArtifactsList",0,1,1));
			this.getComponentByRID("resourcesList").setLoadHandler(this.scopeHandler("configResourcesList",0,1,1));
			this.getComponentByRID("tasksList").setLoadHandler(this.scopeHandler("configTasksList",0,1,1));

		},

		
		
		addType : function(o){
			return AM6Client.update("WORK",o);
		},
		prepareSave : function(o){
			this.getElementByRID("logicalOrder").className = "rocket-text";

			o.dependencies = [];
			var aDependencies = this.getDependenciesList().getItems();
			for(var i = 0; i < aDependencies.length;i++) o.dependencies.push(aDependencies[i].data);
			
			o.artifacts = [];
			var aArtifacts = this.getArtifactsList().getItems();
			for(var i = 0; i < aArtifacts.length;i++) o.artifacts.push(aArtifacts[i].data);

			o.tasks = [];
			var aTasks = this.getTasksList().getItems();
			for(var i = 0; i < aTasks.length;i++) o.tasks.push(aTasks[i].data);

			o.resources = [];
			var aResources = this.getResourcesList().getItems();
			for(var i = 0; i < aResources.length;i++) o.resources.push(aResources[i].data);

			if(!this.validateForPattern("logicalOrder","numbers-only")){
				this.getElementByRID("logicalOrder").className = "rocket-text rocket-text-error";
				this.setStatus("Text cannot be empty");
				return 0;
			}

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Work.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Work";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "WonderForm.xml">
<Template>



<embedded-script><![CDATA[
	template_init : function(){
	},
	openForm : function(){
	}

]]></embedded-script>
</Template></fragment><fragment id = "ValidationRuleFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select onchange="${this}.chooseValidationType()" rid="validationType" bind="${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>BOOLEAN</option>
				<option>REPLACEMENT</option>
				<option>NONE</option>
			</select>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Expression:
		</p>
		<p>
			<input type="text" rid="expression" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div rid="compCont" style="display: none;" class="rocket-column-2">
		<p>
			Comparison:
		</p>
		<p>
			<input type="checkbox" rid="comparison" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Allow Null:
		</p>
		<p>
			<input type="checkbox" rid="allowNull" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Rule Set:
		</p>
		<p>
			<input onclick="${this}.displayRules()" type="checkbox" rid="isRuleSet" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div rid="rulesCont" class="rocket-column-2">
		<p>
			Rules:
		</p>
		<p>
			<div component="wideselect" rid="rulesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addRule()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeRule()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openRule()"/>
		</p>
	</div>
	<!--
	<div class = "rocket-column-2">
		<p>
			Replace Value:
		</p>
		<p>
			<input type = "checkbox" rid = "isReplacementRule" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	-->
	<div rid="repCont" style="display:none;" class="rocket-column-2">
		<p>
			Replacement:
		</p>
		<p>
			<input type="text" rid="replacementValue" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Message:
		</p>
		<p>
			<input type="text" rid="errorMessage" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>



	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getComponentByRID("rulesList").setLoadHandler(this.scopeHandler("configRulesList",0,1,1));
			this.displayRules();
			this.chooseValidationType();
		},
		chooseValidationType : function(){
			var oSel = this.rid.validationType;
			this.rid.compCont.style.display = (oSel.value == "BOOLEAN" ? "block" : "none");
			this.rid.repCont.style.display = (oSel.value == "REPLACEMENT" ? "block" : "none");
		},
		displayRules : function(){
			var o = this.getBean("rocketType");
			var c = this.rid.isRuleSet;
			var bIsSet = c.checked;
			this.rid.rulesCont.style.display = (bIsSet ? "block" : "none");
		},
		openRule : function(){
			var oI = this.getRulesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"ValidationRule");
		},
		addRule : function(){
			this.manageList("ValidationRule", this.getRulesList().getObjectId(),"pickRule");
		},
		pickRule : function(s, v){
			if(v) this.getRulesList().addItem(v.name,v);
		},
		removeRule : function(){
			var oI = this.getRulesList().getActiveItem();
			if(oI) this.getRulesList().clearItem(oI.index);
		},

		configRulesList : function(s,v){
			var oL = this.getRulesList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshRules();
		},
		refreshRules : function(){
			var oL = this.getRulesList();
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o.rules) return;
			for(var i = 0; i < o.rules.length;i++){
				oL.addItem(o.rules[i].name,o.rules[i]);
			}
		},
		getRulesList : function(){
			return this.getComponentByRID("rulesList").GetWideSelect();
		},
		addType : function(o){
			Hemi.log("Add validation rule type: " + o.name + ":" + o.text);
			return AM6Client.update("VALIDATIONRULE",o);
		},
		prepareSave : function(o){
			o.rules = [];
			if(o.isRuleSet){
				var aRules = this.getRulesList().getItems();
				for(var i = 0; i < aRules.length;i++) o.rules.push(aRules[i].data);
			}

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "ValidationRule.xml">
<Template>
	<!--
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<import-xml src = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/BaseType.xml" id = "BaseType" />
	<p>
	</p>
	-->
	<p>VR Base</p>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "ValidationRule";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "UserPickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			User:
		</p>
		<p>
			<input type="text" disable="true" rid="user" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseUser()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickUser('User')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openUser()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().userProp) this.getProperties().userProp = "user";
		var o = this.getBean("rocketType");
		this.pickUser('User',o.user);
	},
	chooseUser : function(){
		this.manageList("User", this.getObjectId(),"pickUser");
	},

		openUser : function(){
			var o = this.getBean("rocketType"), aP = this.getProperties().userProp;
			if(o && o[aP] && this.openItem) this.openItem(o[aP],"User");
		},
	pickUser : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().userProp] = v;
		this.getElementByRID("user").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "UserPicker.xml">
<span>
	<div class="rocket-column-2" rid="userPicker" style="display:none;">
		<p rid="userPickerTitle">
			<span rid="userPickerToggle"/> <span rid="userPickerLabel">Users</span>:
		</p>
		<p rid="userPickerContent">
			<div component="wideselect" rid="usersList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addUser()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeUser()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openUser()"/>
		</p>
	</div>


	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getElementByRID("userPicker").style.display = "block";
			this.toggleField("userPickerToggle","userPickerContent");
			if(!this.getProperties().userListProp) this.getProperties().userListProp = "users";
		},
		prepareSaveUserPicker : function(o){
			this.prepareSaveUsersList(o);
		},
		setUserPickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("userPickerLabel"),s);
		},
		initUserPicker : function(){
			/// Have to put a little extra logic here because user information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableUserInformation = (o != null ? 1 : 0);
			if(_s.enableUserInformation){
				this.getProperties().userListProp = "users";
				this.getComponentByRID("usersList").setLoadHandler(this.scopeHandler("configUsersList",0,1,1));
			}
		},

		
		openUser : function(){
			var oI = this.getUsersList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"User");
		},
		addUser : function(){
			this.manageList("User", this.getUsersList().getObjectId());
		},
		removeUser : function(){
			var oI = this.getUsersList().getActiveItem();
			if(oI) this.getUsersList().clearItem(oI.index);
		},

		configUsersList : function(s,v){
			var oL = this.getUsersList(),_s = this.getProperties();
			if(!_s.enableUserInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshUsers();
		},
		refreshUsers : function(){
			var oL = this.getUsersList(), aP = this.getProperties().userListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]){
				return;
			}
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getUsersList : function(){
			return this.getComponentByRID("usersList").GetWideSelect();
		},
		prepareSaveUsersList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableUserInformation) return;
			aP = this.getProperties().userListProp;
			o[aP] = [];
			var aUsers = this.getUsersList().getItems();
			for(var i = 0; i < aUsers.length;i++) o[aP].push(aUsers[i].data);
		}
		
		
		
	]]></embedded-script>
</span></fragment><fragment id = "UserFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
			<input rid="userType" type="text" class="rocket-text" disabled="true" bind="${bean.rocketType}"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Status:
		</p>
		<p>
			<input rid="userStatus" type="text" class="rocket-text" disabled="true" bind="${bean.rocketType}"/>
		</p>
	</div>

	<div class="rocket-column-2" rid="apiCredentialContainer" style="display: none;">
		<p>
			API Credential:
		</p>
		<p>
			<input type="button" class="rocket-button" value="Reset API Credential" onclick="${this}.resetApiCredential()"/>
		</p>
	</div>
	<div class="rocket-column-2" rid="credentialContainer" style="display: none;">
		<p>
			Credential:
		</p>
		<p>
			<input type="button" class="rocket-button" value="Reset Credential" onclick="${this}.resetCredential()"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'JWTPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ContactInformation.xml']/span" src="${dwac.path}"/>
	
	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getElementByRID("credentialContainer").style.display = (this.getBean("rocketType").id ? "block":"none");
			this.getElementByRID("pathCont").style.display = "none";
			this.initContactInformation();
			var o = this.getBean("rocketType");
			if(o.objectId){
				var aR = AM6Client.entitlements("USER",o.objectId);
				for(var i = 0; i < aR.length;i++){
					if(aR[i].name.match(/^apiusers$/gi)){
						this.getElementByRID("apiCredentialContainer").style.display = "block";
						break;
					}
				}
			}
		},
		resetApiCredential : function(){
			var o = this.getBean("rocketType");
			var oProps = {openerId:this.getObjectId(),viewType:0,tokenMode:1,apiToken:1};
			Hemi.app.createWindow(o.name + " Credentials", "${dwac.path}[CredentialForm.xml]", "ApiCredential-" + o.id, 0, 0, oProps)
			.then((oW)=>{
	           if (oW) {
		           	oW.resizeTo(475, 400);
		           	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
		           	oW.setHideOnClose(0);
	           }
	         });
		},

		resetCredential : function(){
			var o = this.getBean("rocketType");
			var oProps = {openerId:this.getObjectId(),viewType:o};
			Hemi.app.createWindow(o.name + " Credentials", "${dwac.path}[CredentialForm.xml]", "Credential-" + o.id, 0, 0, oProps, 0)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	oW.setHideOnClose(0);
	            }
			});
		},
		addType : function(o){
			Hemi.log("Add user type: " + o.name );
			return AM6Client.update("USER",o);
		},
		prepareSave : function(o){
			this.getElementByRID("text").className = "rocket-text";
			this.prepareSaveContactInformation(o);
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "User.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "User";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			this.getProperties().defaultPath = "~/Users";
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}

				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "UnauthMain.xml">
<Template>
<h2>Authentication Required</h2>

</Template></fragment><fragment id = "UnauthIn.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<span rid="cntLogin" style="display:none; text-decoration:underline;cursor:pointer;" tabindex="1" onclick="${this}.loadTemplate('${dwac.path}','LoginIn.xml')">
		<img valign="middle" src="/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/user-auth.png" width="24" height="24" alt="Crystal SVG Icon - User Auth"/>
	</span>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			var oMod = uwm.getRule("IsLoggedIn");
			Hemi.event.addScopeBuffer(this);
			this.scopeHandler("session_refresh",0,0,1);
			Hemi.message.service.subscribe(this, "onsessionrefresh",this._prehandle_session_refresh);
			if(!oMod){
				uwm.altMain = {
					form : "Forms/MainIn.xml"
				};
				uwm.altLogin = {
					form : "Forms/UnauthIn.xml"	
				};
				
				uwm.altPane = {
					opener : this.getObjectId()
				};
				uwm.getUser().then((o)=>{
					if(o != null) this.getProperties().userName = o.name;
					uwm.rule("IsLoggedIn",{opener:this.getObjectId()}, "ContinueWorkflow","RequireAuthentication");
				});
			}
			else{
				this.getElementByRID("cntLogin").style.display = "";
			}

		},
		template_destroy : function(){
			Hemi.message.service.unsubscribe(this, "onsessionrefresh",this._prehandle_session_refresh);
		},
		_handle_session_refresh : function(s,v){
			window.uwm.operation("ContinueWorkflow",{opener:this.getObjectId()});
			/// if(uwm.rule("IsLoggedIn")) this.loadTemplate('${dwac.path}','MainIn.xml');
		}
	
		]]>
	</embedded-script>
</Template></fragment><fragment id = "TraitFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
				<select rid="traitType" bind="${bean.rocketType}">
					<option>UNKNOWN</option>
					<option>LOCATION</option>
					<option>TRANSPORT</option>
					<option>PROTOCOL</option>
					<option>EVENT</option>
					<option>PERSON</option>
			</select>
		</p>
	</div>
	

	<div class="rocket-column-2">
		<p>
			Alignment:
		</p>
		<p>
				<select rid="alignmentType" bind="${bean.rocketType}">
					<option>LAWFULGOOD</option>
					<option>NEUTRALGOOD</option>
					<option>CHAOTICGOOD</option>
					<option>LAWFULNEUTRAL</option>
					<option>NEUTRAL</option>
					<option>CHAOTICNEUTRAL</option>
					<option>LAWFULEVIL</option>
					<option>NEUTRALEVIL</option>
					<option>CHAOTICEVIL</option>
			</select>
		</p>
	</div>
	
		<div class="rocket-column-2">
		<p>
			Score:
		</p>
		<p>
			<input type="text" rid="score" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	
	<embedded-script><![CDATA[
		embedded_init : function(o){
			var o = this.getBean("rocketType");

		},
	
		addType : function(o){
			return AM6Client.update("TRAIT",o);
		},
		prepareSave : function(o){


			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Trait.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Trait";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "TimePickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Time:
		</p>
		<p>
			<input type="text" disable="true" rid="time" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseTime()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickTime('Time')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openTime()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().timeProp){
			this.getProperties().timeProp = "time";
		}
		var o = this.getBean("rocketType");
		this.pickTime('Time',o[this.getProperties().timeProp]);

	},
	chooseTime : function(){
		this.manageList("Time", this.getObjectId(),"pickTime");
	},

		openTime : function(){
			var o = this.getBean("rocketType");
			if(o && o[this.getProperties().timeProp] && this.openItem) this.openItem(o[this.getProperties().timeProp],"Time");
		},
	pickTime : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().timeProp] = v;
		this.getElementByRID("time").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "TimePicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="timePickerTitle">
			<span rid="timePickerToggle"/> Times:
		</p>
		<p rid="timePickerContent">
			<div component="wideselect" rid="timesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addTime()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeTime()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openTime()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("timePickerToggle","timePickerContent");
			if(!this.getProperties().timeListProp) this.getProperties().timeListProp = "times";
		},
		openTime : function(){
			var oI = this.getTimesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Time");
		},
		addTime : function(){
			this.manageList("Time", this.getTimesList().getObjectId());
		},
		removeTime : function(){
			var oI = this.getTimesList().getActiveItem();
			if(oI) this.getTimesList().clearItem(oI.index);
		},

		configTimesList : function(s,v){
			var oL = this.getTimesList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshTimes();
		},
		refreshTimes : function(){
			var oL = this.getTimesList(), aP = this.getProperties().timeListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getTimesList : function(){
			return this.getComponentByRID("timesList").GetWideSelect();
		},
		prepareSaveTimesList : function(o){
			aP = this.getProperties().timeListProp;
			o[aP] = [];
			var aTimes = this.getTimesList().getItems();
			for(var i = 0; i < aTimes.length;i++) o[aP].push(aTimes[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "TimeFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Value:
		</p>
		<p>
			<input rid="value" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
			<select rid="basisType" bind="${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>MINUTE</option>
				<option>HOUR</option>
				<option>DAY</option>
				<option>WEEK</option>
				<option>MONTH</option>
				<option>YEAR</option>
			</select>
		</p>
	</div>

	<embedded-script><![CDATA[
		addType : function(o){
			Hemi.log("Add time type: " + o.name + ":" + o.text);
			return AM6Client.update("TIME",o);
		},

		prepareSave : function(o){
			this.getElementByRID("value").className = "rocket-text";

			if(!this.validateForPattern("value","numbers-only")){
				this.getElementByRID("value").className = "rocket-text rocket-text-error";
				this.setStatus("Value must only contain numeric characters");
				return 0;
			}

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Time.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Time";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "TicketFields.xml">
<span>

	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid="ticketStatus" bind="${bean.rocketType}">
	    		<option>UNKNOWN</option>
	    		<option>OPEN</option>
	    		<option>REVIEW</option>
	    		<option>CLOSED</option>
	    		<option>BLOCKED</option>
	    		<option>REJECTED</option>
			</select>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Priority:
		</p>
		<p>
			<select rid="priority" bind="${bean.rocketType}">
	    		<option>UNKNOWN</option>
	    		<option>LOW</option>
	    		<option>NORMAL</option>
	    		<option>HIGH</option>
	    		<option>VITAL</option>
			</select>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Severity:
		</p>
		<p>
			<select rid="severity" bind="${bean.rocketType}">
	    		<option>UNKNOWN</option>
	    		<option>LOW</option>
	    		<option>MEDIUM</option>
	    		<option>HIGH</option>
	    		<option>CAUTION</option>
	    		<option>CRITICAL</option>
	    		<option>FATAL</option>
			</select>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Assigned:
		</p>
		<p>
			<input type="text" disable="true" rid="assigned" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseAssigned()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickAssigned('Resource')"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Estimate:
		</p>
		<p>
			<input type="text" disable="true" rid="estimate" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseEstimate()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickEstimate('Estimate')"/>
		</p>
	</div>
		<div class="rocket-column-2">
		<p>
			Actual Time:
		</p>
		<p>
			<input type="text" disable="true" rid="actualTime" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseActualTime()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickActualTime('Time')"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Actual Cost:
		</p>
		<p>
			<input type="text" disable="true" rid="actualCost" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseActualCost()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickActualCost('Cost')"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Created Date:
		</p>
		<p>
			<input type="date" disabled="true" rid="createdDate" bind="${bean.rocketType}" class="rocket-text rocket-text-readonly"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Modified Date:
		</p>
		<p>
			<input type="date" disabled="true" rid="modifiedDate" bind="${bean.rocketType}" class="rocket-text rocket-text-readonly"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Due Date:
		</p>
		<p>
			<input type="date" component="calendar" rid="dueDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>

		
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ArtifactPicker.xml']/span" src="${dwac.path}"/>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DependencyPicker.xml']/span" src="${dwac.path}"/>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'NotePicker.xml']/span" src="${dwac.path}"/>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ResourcePicker.xml']/span" src="${dwac.path}"/>

	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'FormPicker.xml']/span" src="${dwac.path}"/>

	<embedded-script><![CDATA[
		embedded_init : function(o){

			
			
			
			var o = this.getBean("rocketType");
			this.pickAssigned('Resource',o.assignedResource);
			this.pickEstimate('Estimate',o.estimate);
			this.pickActualTime('Time',o.actualTime);
			this.pickActualCost('Cost',o.actualCost);
			this.getProperties().dependencyListProp = "dependencies";
			this.getProperties().artifactListProp = "artifacts";
			this.getProperties().resourceListProp = "requiredResources";
			this.getProperties().formListProp = "forms";
			this.getProperties().noteListProp = "notes";
			this.getComponentByRID("notesList").setLoadHandler(this.scopeHandler("configNotesList",0,1,1));
			this.getComponentByRID("formsList").setLoadHandler(this.scopeHandler("configFormsList",0,1,1));
			this.getComponentByRID("artifactsList").setLoadHandler(this.scopeHandler("configArtifactsList",0,1,1));
			this.getComponentByRID("dependenciesList").setLoadHandler(this.scopeHandler("configDependenciesList",0,1,1));
			this.getComponentByRID("resourcesList").setLoadHandler(this.scopeHandler("configResourcesList",0,1,1));
		},
		chooseAssigned : function(){
			this.manageList("Resource", this.getObjectId(),"pickAssigned");
		},

		pickAssigned : function(s, v){
			var o = this.getBean("rocketType");
			o.assignedResource = v;
			this.getElementByRID("assigned").value = (v ? v.name : "");
		},
		chooseEstimate : function(){
			this.manageList("Estimate", this.getObjectId(),"pickEstimate");
		},

		pickEstimate : function(s, v){
			var o = this.getBean("rocketType");
			o.estimate = v;
			this.getElementByRID("estimate").value = (v ? v.name + " " + v.estimateType : "");
		},
		chooseActualTime : function(){
			this.manageList("Time", this.getObjectId(),"pickActualTime");
		},

		pickActualTime : function(s, v){
			var o = this.getBean("rocketType");
			o.actualTime = v;
			this.getElementByRID("actualTime").value = (v ? v.name + " " + v.basisType : "");
		},
		chooseActualCost : function(){
			this.manageList("Cost", this.getObjectId(),"pickActualCost");
		},

		pickActualCost : function(s, v){
			var o = this.getBean("rocketType");
			o.actualCost = v;
			this.getElementByRID("actualCost").value = (v ? v.name + " " + v.currencyType : "");
		},
		

		
		
		addType : function(o){
			return AM6Client.update("TICKET",o);
		},
		prepareSave : function(o){

			o.forms = [];
			var aForms = this.getFormsList().getItems();
			for(var i = 0; i < aForms.length;i++) o.forms.push(aForms[i].data);
			
			o.dependencies = [];
			var aDependencies = this.getDependenciesList().getItems();
			for(var i = 0; i < aDependencies.length;i++) o.dependencies.push(aDependencies[i].data);
			
			o.artifacts = [];
			var aArtifacts = this.getArtifactsList().getItems();
			for(var i = 0; i < aArtifacts.length;i++) o.artifacts.push(aArtifacts[i].data);

			o.notes = [];
			var aNotes = this.getNotesList().getItems();
			for(var i = 0; i < aNotes.length;i++) o.notes.push(aNotes[i].data);

			o.requiredResources = [];
			var aResources = this.getResourcesList().getItems();
			for(var i = 0; i < aResources.length;i++) o.requiredResources.push(aResources[i].data);

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Ticket.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Ticket";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "TextPicker.xml">
<Template Title="Picker">
		<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<div class="rocket-column-2">
		<p rid="picker-label">
			[picker label]:
		</p>
		<p>
			<input type="text" class="rocket-text" rid="pick-text"/>
			<input type="button" value="Choose" class="rocket-button" onclick="${this}.pickText()"/>
			<input type="button" value="Cancel" class="rocket-button" onclick="${this}.Close()"/>
		</p>
	</div>


	<embedded-script>
            <![CDATA[
		template_init : function (){
			this.getElementByRID("pick-text").focus();
			if(this.getProperties().pickerLabel) this.setPickerLabel(this.getProperties().pickerLabel);
			var oText = this.getElementByRID("pick-text");
			if(this.getProperties().pickerDefault) oText.value = this.getProperties().pickerDefault;
			var oCtl = this;
			oText.onkeyup = function(e){
				e = Hemi.event.getEvent(e);
				if(e.keyCode == 13) oCtl.pickText();
				if(e.keyCode == 27) oCtl.Close();
			};
		},
		setPickerLabel : function(s){
			if(this.setTitle) this.setTitle("Pick " + s);
			Hemi.xml.setInnerXHTML(this.getElementByRID("picker-label"),s);
		},
		setPickerHandler : function(f){
			this.getProperties().picker_handler = f;
		},
		template_destroy : function(){
			this.getProperties().picker_handler = 0;
		},
		pickText : function(){
			if(this.getProperties().picker_handler && this.getProperties().openerId) Hemi.registry.service.getObject(this.getProperties().openerId)[this.getProperties().picker_handler](this.getElementByRID("pick-text").value);
			this.Close();
		}
	

	]]></embedded-script>
</Template></fragment><fragment id = "TaskPicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			<span rid="taskPickerToggle"/> <span rid="taskPickerTitle">Tasks</span>:
		</p>
		<p rid="taskPickerContent">
			<div component="wideselect" rid="tasksList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addTask()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeTask()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openTask()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("taskPickerToggle","taskPickerContent");
			if(!this.getProperties().taskListProp) this.getProperties().taskListProp = "tasks";
		},
		openTask : function(){
			var oI = this.getTasksList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Task");
		},
		addTask : function(){
			this.manageList("Task", this.getTasksList().getObjectId());
		},
		removeTask : function(){
			var oI = this.getTasksList().getActiveItem();
			if(oI) this.getTasksList().clearItem(oI.index);
		},

		configTasksList : function(s,v){
			var oL = this.getTasksList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshTasks();
		},
		refreshTasks : function(){
			var oL = this.getTasksList(), aP = this.getProperties().taskListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getTasksList : function(){
			return this.getComponentByRID("tasksList").GetWideSelect();
		},
		prepareSaveTasksList : function(o){
			aP = this.getProperties().taskListProp;
			o[aP] = [];
			var aTasks = this.getTasksList().getItems();
			for(var i = 0; i < aTasks.length;i++) o[aP].push(aTasks[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "TaskFields.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ParentPicker.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'EstimatePicker.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			Start Date:
		</p>
		<p>
			<input type="date" component="calendar" rid="startDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>	
	<div class="rocket-column-2">
		<p>
			Due Date:
		</p>
		<p>
			<input type="date" component="calendar" rid="dueDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Completed Date:
		</p>
		<p>
			<input type="date" component="calendar" rid="completedDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid="taskStatus" bind="${bean.rocketType}">
	    		<option>UNKNOWN</option>
	    		<option>ESTIMATED</option>
	    		<option>IN_PROGRESS</option>
	    		<option>COMPLETED</option>
	    		<option>BLOCKED</option>
	    		<option>APPROVED</option>
	    		<option>WASTE</option>
	    		<option>UNPLANNED</option>
	    		<option>REJECTED</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'TaskPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'RequirementPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DependencyPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ArtifactPicker.xml']/span" src="${dwac.path}"/>	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'WorkPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'NotePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'TimePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'CostPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ResourcePicker.xml']/span" src="${dwac.path}"/>


	<embedded-script><![CDATA[
		embedded_init : function(o){
			
			this.getProperties().taskListProp = "childTasks";
			this.getProperties().costListProp = "actualCost";
			this.getProperties().timeListProp = "actualTime";
			this.getProperties().requirementListProp = "requirements";
			this.getProperties().dependencyListProp = "dependencies";
			this.getProperties().artifactListProp = "artifacts";
			this.getProperties().resourceListProp = "resources";
			this.getProperties().workListProp = "work";
			Hemi.xml.setInnerXHTML(this.getElementByRID("taskPickerTitle"),"Child Tasks");
			this.getComponentByRID("requirementsList").setLoadHandler(this.scopeHandler("configRequirementsList",0,1,1));
			this.getComponentByRID("dependenciesList").setLoadHandler(this.scopeHandler("configDependenciesList",0,1,1));
			this.getComponentByRID("artifactsList").setLoadHandler(this.scopeHandler("configArtifactsList",0,1,1));
			this.getComponentByRID("tasksList").setLoadHandler(this.scopeHandler("configTasksList",0,1,1));
			this.getComponentByRID("timesList").setLoadHandler(this.scopeHandler("configTimesList",0,1,1));
			this.getComponentByRID("costsList").setLoadHandler(this.scopeHandler("configCostsList",0,1,1));
			this.getComponentByRID("resourcesList").setLoadHandler(this.scopeHandler("configResourcesList",0,1,1));
			this.getComponentByRID("notesList").setLoadHandler(this.scopeHandler("configNotesList",0,1,1));
			this.getComponentByRID("worksList").setLoadHandler(this.scopeHandler("configWorksList",0,1,1));
			var o = this.getBean("rocketType");
			this.pickEstimate('Estimate',o.estimate);
		},

		updateChildTasks : function(o){
			var aI = this.getTasksList().getItems();
			var a = [];
			var iUp = 0;
			for(var i = 0; o.childTasks && i < o.childTasks.length; i++) a[o.childTasks[i].id] = o.childTasks[i];
			for(var i = 0; i < aI.length;i++){
				var oI = aI[i].data;
				if(!oI) continue;
				/// Skip existing
				if(a[oI.id]){
					a[oI.id] = 0;
					continue;
				}
				/// Set oI parent to task
				oI.parentId = o.id;
				AM6Client.update("TASK",oI);
				iUp++;
			}
			for(var i = 0; i < a.length;i++){
				if(typeof a[i]=="object"){
					AM6Client.delete("TASK",a[i].objectId);
					iUp++;
				}
			}
			
		},
		
		addType : function(o){
			var b = AM6Client.update("TASK",o),oT;
			if(b){
				var oP;
				if(o.parentId){
					//oP = AM6Client.get("TASK",o.parentId);
					//oT = rocket.getTaskByParent(o.name,oP);
					oP = AM6Client.get("TASK",o.parentId);
					oT = AM6Client.getByNameInGroupParent("TASK",oP.objectId,o.name);
				}
				else{
					oT = AM6Client.getByName("TASK",AM6Client.find("GROUP","DATA",this.getPath()).objectId,o.name);
				}
				
				this.updateChildTasks(oT);
			}
			AM6Client.clearCache(oT);
			return b;
		},
		prepareSave : function(o){
			this.getElementByRID("logicalOrder").className = "rocket-text";

			o.requirements = [];
			var aRequirements = this.getRequirementsList().getItems();
			for(var i = 0; i < aRequirements.length;i++) o.requirements.push(aRequirements[i].data);
			
			o.dependencies = [];
			var aDependencies = this.getDependenciesList().getItems();
			for(var i = 0; i < aDependencies.length;i++) o.dependencies.push(aDependencies[i].data);
			
			o.artifacts = [];
			var aArtifacts = this.getArtifactsList().getItems();
			for(var i = 0; i < aArtifacts.length;i++) o.artifacts.push(aArtifacts[i].data);

			o.work = [];
			var aWorks = this.getWorksList().getItems();
			for(var i = 0; i < aWorks.length;i++) o.work.push(aWorks[i].data);

			o.notes = [];
			var aNotes = this.getNotesList().getItems();
			for(var i = 0; i < aNotes.length;i++) o.notes.push(aNotes[i].data);

			o.actualTime = [];
			var aTimes = this.getTimesList().getItems();
			for(var i = 0; i < aTimes.length;i++) o.actualTime.push(aTimes[i].data);

			o.actualCost = [];
			var aCosts = this.getCostsList().getItems();
			for(var i = 0; i < aCosts.length;i++) o.actualCost.push(aCosts[i].data);

			o.resources = [];
			var aResources = this.getResourcesList().getItems();
			for(var i = 0; i < aResources.length;i++) o.resources.push(aResources[i].data);

			if(!this.validateForPattern("logicalOrder","numbers-only")){
				this.getElementByRID("logicalOrder").className = "rocket-text rocket-text-error";
				this.setStatus("Text cannot be empty");
				return 0;
			}
			if(o.id){
				this.updateChildTasks(o);
				AM6Client.clearCache(o);
			}
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Task.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Task";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "TagSearch.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'TagPicker.xml']/span" src="${dwac.path}"/>
	
	
	<div class="rocket-column-2">
		<p>
			Search
		</p>
		<p>
			<input type="button" value="Search" class="rocket-button" onclick="${this}.search()"/>
		</p>
	</div>
	<div id="btnCacheButton" class="rocket-column-2">
		<p>
			Use Tag List
		</p>
		<p>
			<input type="button" value="Use List" class="rocket-button" onclick="${this}.cache()"/>
			<input type="button" value="List" class="rocket-button" onclick="${this}.copy()"/>
		</p>
	</div>
	<!--
	<p style = "clear:both;"><input type = "button" value = "Search" onclick = "${this}.search()" /></p>
	
	<p rid = "btnCacheButton" style = "clear:both;display:none;"><input type = "button" value = "Copy" onclick = "${this}.copy()" /><input type = "button" value = "Cache" onclick = "${this}.cache()" /></p>
	-->
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	
	<embedded-script><![CDATA[
		template_init : function(){
			this.initTagPicker();
			
			/// invoke again to open the toggle
			///
			this.toggleField("tagPickerToggle","tagPickerContent");
			var _s = this.getProperties();
			if(!_s.altSearch){
				_s.iconView = 1;
				this.initGrid("Data", "~/Data");
			}
			else{
				this.getElementByRID("buttons-bar").style.display = "none";
				this.getElementByRID("typelist").style.display = "none";
			}
			
			if(_s.cacheTags){
				this.getElementByRID("btnCacheButton").style.display = "";
			}
			
			this.getElementByRID("path").style.display = "none";
			
		},
		decorateListItemName : function(o){
			var _p = this.getProperties();
			if(!_p.iconView) return o.name;
			var w = (_p.iconWidth ? _p.iconWidth : 48);
			var h = (_p.iconHeight ? _p.iconHeight : 48);
			var oL = document.createElement("div");
			var oP = document.createElement("p");
			oP.setAttribute("style","text-indent:0px !important;");
			var oP2 = document.createElement("p");
			var oI = document.createElement("img");
			oI.setAttribute("class","alignright");
			var sIco = "/AccountManagerService/Media/Icons/Crystal/48x48/48px-Crystal_Clear_action_filenew.png";
			if(o.mimeType.match(/^image/)){
				sIco = "/AccountManagerService/thumbnail/" + AM6Client.dotPath(o.organizationPath) + "/Data" + o.groupPath + "/" + o.name + "/" + w + "x" + h
			}
			oI.setAttribute("src",sIco);
			oP.appendChild(oI);
			oP.appendChild(document.createTextNode(o.name));
			oP.appendChild(document.createElement("br"));
			if(o.description != null) oP.appendChild(document.createTextNode(o.description));
			oP.appendChild(document.createElement("br"));
			oP.appendChild(document.createTextNode(o.createdDate.toString()));
			oL.appendChild(oP);
			oP2.setAttribute("class","clearalign");
			oL.appendChild(oP2);
			return oL;
						
		},
		cache : function(){
			this.search(1);
			this.Close();
		},
		search : function(bCache){
			var _s = this.getProperties();
			_s.providedCount = 0;
			_s.start_record = 0;
			_s.record_count = 10;
			if(!_s.altSearch){
				this.toggleField("tagPickerToggle","tagPickerContent");
				this.refreshList();
			}
			else{
				var o = Hemi.registry.service.getObject(_s.openerId);
				o[(bCache ? _s.cacheTags : _s.searchHandler)](this.getCurrentTags());
			}
		},
		copy : function(){
			var aC = this.getProperties().cachedTags;
			if(aC && aC.length){
				for(var i = 0; i < aC.length; i++){
					this.getTagsList().addItem(aC[i].name, aC[i]);
				}
			}
		},
		getCurrentTags : function(){
			var aT = [];
			var aI = this.getTagsList().getItems();
			for(var i = 0; i < aI.length;i++) aT.push(aI[i].data);
			return aT;
		
		},
		provideList : function(){
			var aT = this.getCurrentTags();
			if(aT.length == 0) return aT;
			var oR = new org.cote.objects.dataTagSearchRequest();
			oR.startRecord = this.getProperties().start_record;
			oR.recordCount = 10;
			oR.paginate = true;
			oR.tags = aT;
			return AM6Client.findByTag("DATA",oR);

		},
		provideCount : function(){
			if(this.getProperties().providedCount > 0) return this.getProperties().providedCount;
			var aT = [];
			var aI = this.getTagsList().getItems();
			for(var i = 0; i < aI.length;i++) aT.push(aI[i].data);
			if(aT.length == 0) return 0;
			
			var oR = new org.cote.objects.dataTagSearchRequest();
			oR.tags = aT;
			this.getProperties().providedCount = AM6Client.countByTag("DATA",oR);
			return this.getProperties().providedCount;
			
		},
		/// The following should really be in a separate tools file
		/// because they replicate the shared code in BaseTemplate, except apply in one-off cases that don't use BaseTemplate
		/// Note: This is modded from the default

		toggleField : function(l, n){
			var lbl =  this.getElementByRID(l);//(typeof l == "string" ? this.getElementByRID(l) : l);
			var cnt =  this.getElementByRID(n);//(typeof n == "string" ? this.getElementByRID(n) : n);
			var b = cnt.mark;
			var s = (b ? "[ - ]" : "[ + ]");
			var d = (b ? "block" : "none");
			cnt.mark = (b ? 0 : 1);
			Hemi.xml.setInnerXHTML(lbl,s);
			cnt.style.display = d;
			if(!lbl.mark){
				var ctl = this;
				lbl.mark = 1;
				var sL = l;
				var sN = n;
				lbl.onclick = function(){
					ctl.toggleField(sL,sN);
					ctl.resizeForm();
				};
			}
			if(this.resizeList) this.resizeList();
			//this.resizeForm();
		},
		manageList : function(sType, sListId, sFN){
			var oProps = {openerId:this.getObjectId(),listType:"Tag",picker:1,pickFunction:sFN,listId:sListId};
			Hemi.app.createWindow("ManageList", uwm.getApiTypeView(sType) + "/Forms/List" + sType + "s.xml", "Manager-" + (sListId ? sListId : Hemi.guid()), 0, 0, oProps, 0)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 300);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		}
	]]></embedded-script>
</Template></fragment><fragment id = "TagPicker.xml">
<span>
	<div class="rocket-column-2" rid="tagPicker" style="display:none;">
		<p rid="tagPickerTitle">
			<span rid="tagPickerToggle"/> <span rid="tagPickerLabel">Tags</span>:
		</p>
		<p rid="tagPickerContent">
			<div component="wideselect" rid="tagsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addTag()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeTag()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openTag()"/>
		</p>
	</div>


	<embedded-script><![CDATA[
		embedded_init : function(){
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			if(_s.altSearch || (o && o != null && o.objectId)){
				this.enableTagPicker();
			}
		},
		enableTagPicker : function(){
			this.getElementByRID("tagPicker").style.display = "block";
			this.toggleField("tagPickerToggle","tagPickerContent");
			if(!this.getProperties().tagListProp) this.getProperties().tagListProp = "tags";
		},
		prepareSaveTagPicker : function(o){
			this.prepareSaveTagsList(o);
		},
		setTagPickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("tagPickerLabel"),s);
		},
		initTagPicker : function(){
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableTagInformation = (o != null ? 1 : 0);
			
			if(_s.enableTagInformation){
				//this.getProperties().tagListProp = "tags";
				this.getComponentByRID("tagsList").setLoadHandler(this.scopeHandler("configTagsList",0,1,1));
			}
		},

		openTag : function(){
			var oI = this.getTagsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Tag");
		},
		addTag : function(){
			this.manageList("Tag", this.getTagsList().getObjectId(), "handleAddTag");
		},
		handleAddTag : function(s, v){
			var o = this.getBean("rocketType");
			this.getTagsList().addItem(v.name, v);
			if(!o) return;
			AM6Client.tag(o.nameType, o.objectId, v.objectId, true);
		},
		removeTag : function(){
			var oI = this.getTagsList().getActiveItem(), o = this.getBean("rocketType"), oT = this.getTagsList();
			if(oI){
				
				if(o){
					AM6Client.tag(o.nameType, o.objectId, oI.data.objectId,false,function(s,v){
						if(v && v.json) v = v.json;
						if(v) oT.clearItem(oI.index);
					});
				}
				else oT.clearItem(oI.index);
			}
		},

		configTagsList : function(s,v){
			var oL = this.getTagsList(),_s = this.getProperties();
			if(!_s.enableTagInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshTags();
		},
		refreshTags : function(){
			var oL = this.getTagsList(), aP = this.getProperties().tagListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o) return;
			AM6Client.findTags(o.nameType, o.objectId,function(s,v){
				if(!v || v == null || v.json == null) return;
				if(v.json) v = v.json;
	
				
				v.sort(function(a,b){ 
				    var x = a.name < b.name? -1:1; 
				    return x; 
				});
				
				for(var i = 0; i < v.length; i++){
					oL.addItem(v[i].name, v[i]);
				}
				
			});

		},
		getTagsList : function(){
			return this.getComponentByRID("tagsList").GetWideSelect();
		},
		prepareSaveTagsList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableTagInformation) return;
			aP = this.getProperties().tagListProp;
			o[aP] = [];
			var aTags = this.getTagsList().getItems();
			for(var i = 0; i < aTags.length;i++) o[aP].push(aTags[i].data);
		}
		
		
		
	]]></embedded-script>
</span></fragment><fragment id = "TagFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
			<select rid="tagType" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>ACCOUNT</option>
    		<option>DATA</option>
    		<option>GROUP</option>
    		<option>PERSON</option>
			<option>USER</option>
			</select>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getElementByRID("pathCont").style.display = "none";
		},
		addType : function(o){
			Hemi.log("Add tag type: " + o.name );
			var b = false;
			//o.group = tagManager.getCleanGroup(o.group);
			return AM6Client.update("TAG",o);
		},
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Tag.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Tag";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);;
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "Story.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Task";
			this.getProperties().viewTypeName = "Story";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = new org.cote.objects.taskType();
					o.name = "";
					o.description = "";
					o.nameType = "TASK";
					o.taskStatus = "UNKNOWN";
					o.id = 0;
					o.logicalOrder = 0;
					o.startDate = (new Date());
					o.dueDate = (new Date());
					o.completedDate = (new Date());
					o.childTasks = [];
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "StatusFrag.xml">
<span>
<p rid="statusCont" style="display:none;margin: 0px !important;clear:both;"><span rid="status"/></p>
	<embedded-script><![CDATA[
		embedded_init : function(){
			if(!this.setStatus){
				this.setStatus = this._setStatus;
				this.getElementByRID("statusCont").style.display = "block";
			}
		},
		_setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("status"),s);
		}
]]></embedded-script>
</span></fragment><fragment id = "StagePicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="stagePickerTitle">
			<span rid="stagePickerToggle"/> Stages:
		</p>
		<p rid="stagePickerContent">
			<div component="wideselect" rid="stagesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addStage()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeStage()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openStage()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("stagePickerToggle","stagePickerContent");
			if(!this.getProperties().stageListProp) this.getProperties().stageListProp = "stages";
		},
		openStage : function(){
			var oI = this.getStagesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Stage");
		},
		addStage : function(){
			this.manageList("Stage", this.getStagesList().getObjectId());
		},
		removeStage : function(){
			var oI = this.getStagesList().getActiveItem();
			if(oI) this.getStagesList().clearItem(oI.index);
		},

		configStagesList : function(s,v){
			var oL = this.getStagesList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshStages();
		},
		refreshStages : function(){
			var oL = this.getStagesList(), aP = this.getProperties().stageListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getStagesList : function(){
			return this.getComponentByRID("stagesList").GetWideSelect();
		},
		prepareSaveStagesList : function(o){
			aP = this.getProperties().stageListProp;
			o[aP] = [];
			var aStages = this.getStagesList().getItems();
			for(var i = 0; i < aStages.length;i++) o[aP].push(aStages[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "StageFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'SchedulePickerSingle.xml']/span" src="${dwac.path}"/>

	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'MethodologyPickerSingle.xml']/span" src="${dwac.path}"/>

	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'WorkPickerSingle.xml']/span" src="${dwac.path}"/>

	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BudgetPickerSingle.xml']/span" src="${dwac.path}"/>

	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType");
			this.getProperties().workProp = "work";
			this.getProperties().budgetProp = "budget";
			this.getProperties().scheduleProp = "schedule";
			this.getProperties().methodologyProp = "methodology";
			this.pickMethodology('Methodology',o.methodology);
			this.pickBudget('Budget',o.budget);
			this.pickSchedule('Schedule',o.schedule);
			this.pickWork('Work',o.work);
			
		},
		addType : function(o){
			Hemi.log("Add Stage type: " + o.name + ":" + o.text);
			return AM6Client.update("STAGE",o);
		},
		
		
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Stage.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Stage";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "Sharing.xml">
<Template Title="Sharing">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<div class="rocket-column-2">
		<p>
			Actor:
		</p>
		<p>
			<select rid="shareWhoType" onchange="${this}.refreshWhoView()">
				<option>Unknown</option>
				<option>Nobody</option>
				<option selected="true" value="ROLE">Role</option>
				<option value="GROUP">Group</option>
				<option value="PERSON">Person</option>
				<option value="ACCOUNT">Account</option>
				<option value="USER">User</option>
				<option>Public</option>
			</select>
			<input type="text" rid="shareWhoName" class="rocket-text" style="width:150px !important" disabled="true"/>
			<input type="button" class="rocket-button" value="..." onclick="${this}.findType(1)"/>

		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Object:
		</p>
		<p>
			<select rid="shareType">
				<option value="ROLE">Role</option>
				<option value="PERMISSION">Permission</option>
				<option value="DATA">Data</option>
				<option value="GROUP">Group</option>
			</select>
			<input type="text" rid="shareName" class="rocket-text" style="width:150px !important" disabled="true"/>
			<input type="button" class="rocket-button" value="..." onclick="${this}.findType()"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'PermissionPicker.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			System Permissions:
		</p>
		<p>
			<input type="checkbox" rid="chkRead"/> : Read
			<br/>
			<input type="checkbox" rid="chkUpdate"/> : Update
			<br/>
			<input type="checkbox" rid="chkAdd"/> : Add
			<br/>
			<input type="checkbox" rid="chkDelete"/> : Delete
		</p>
	</div>
	<div rid="systemGroupContainer" style="display: none;" class="rocket-column-2">
		<p>
			System:
		</p>
		<p>
			<input type="checkbox" rid="chkSystemGroups"/> : .thumbnail
			<br/>
			<input type="checkbox" rid="chkRecurseGroups"/> : Recurse
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Authorize:
		</p>
		<p>
			<input type="button" value="Authorize" disabled="true" rid="btnAuthZ" class="rocket-button" onclick="${this}.authorize()"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Unauthorize:
		</p>
		<p>
			<input type="button" value="Unauthorize" disabled="true" rid="btnUAuthZ" class="rocket-button" onclick="${this}.uauthorize()"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Note:
		</p>
		<p>
			Sharing an image will not automatically share the thumbnail directory.  To share the thumbnail directory, check the <i>Include System Groups</i> checkbox.
		</p>
	</div>	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.refreshView();
				this.refreshView(1);
				this.initPermissionPicker();
			},
			refreshWhoView : function(){
				this.getElementByRID("shareWhoName").value = "";
				this.getProperties().whoType = 0;
			},
			refreshView : function(b){
				var o = this.getProperties()[(b ? "whoType":"viewType")];
				if(this.setStatus) this.setStatus("");
				if(!o){
					Hemi.logError("Type is not specified");
					if(this.setStatus) this.setStatus("View type is not specified");
					return;
				}
				this.getElementByRID("btnAuthZ").disabled = false;
				this.getElementByRID("btnUAuthZ").disabled = false;
				if(typeof o == "string" && b){
				}
				else{
					this.getElementByRID((b ? "shareWhoName" : "shareName")).value = o.nameType + " " + o.name + " (#" + o.id + ")";
					this.getElementByRID((b ? "shareWhoType" : "shareType")).value = o.nameType;
				}
				this.getElementByRID("systemGroupContainer").style.display = (this.getProperties().viewType.nameType == "GROUP" ? "" : "none");
			},
		findType : function(b){
			var sFType = this.getElementByRID((b ? "shareWhoType":"shareType")).value;
			if(b && !sFType.match(/(role|group|person|account|user)/gi)){
				this.pickWhoType(0,sFType);
			}
			else{
				this.manageList(sFType.substring(0,1) + sFType.substring(1,sFType.length).toLowerCase(),0,(b ? "pickWhoType" : "pickType"));
			}
		},
		pickWhoType : function(t, o){
			return this.pickType(t, o, 1);
		},
		pickType : function(t, o, b){
			this.getProperties()[(b ? "whoType" : "viewType")] = o;
			this.refreshView(b);
			
		},
			authorize : function(){
				if(!this.getElementByRID("chkRecurseGroups").checked || confirm("Recursive is currently client-driven, and so will take a while to complete as each authorization call is made independently.  Continue?")){
					this.authorizeType();
				}
			},
			unauthorize : function(){
				if(!this.getElementByRID("chkRecurseGroups").checked || confirm("Recursive is currently client-driven, and so will take a while to complete as each authorization call is made independently.  Continue?")){

					this.authorizeType(1);
				}
			},
			
			authorizeType : function(b,x){
				var o = (x ? x : this.getProperties().viewType);
				if(!o || !o.id){
					Hemi.logError("View type is not specified");
					if(this.setStatus) this.setStatus("View type is not specified");
					return;
				}
				var oS = this.getElementByRID("shareType");
				var sW = this.getElementByRID("shareWhoType").value;
				if(sW.match(/^nobody$/gi)){
					Hemi.logError("TODO: Policy OM not yet ready to strip all rights without specifying a specific target");
					if(this.setStatus) this.setStatus("TODO: Policy OM not yet ready to strip all rights without specifying a specific target");
					return;
				}
				var oO = 0;

				if(sW.match(/^public$/gi)){
					oO = AM6Client.anonymous();
					sW = "User";
				}
				else if(sW.match(/^(role|group|person|account|user)$/gi)){
					oO = this.getProperties().whoType;
					sW = sW.substring(0,1) + sW.substring(1,sW.length).toLowerCase();
				}
				if(!oO){
					Hemi.logError("Target " + sT + " not specified");
					if(this.setStatus) this.setStatus("Target " + sT + " not specified");
					return;
				
				}

				var sT = oS.options[oS.selectedIndex].text;
				var aPerms = this.getPermissionsList().getItems();
				var r = 0;
				if(sW.match(/^(role|user)$/gi)){
					Hemi.log("Authorize " + sT + " " + sW);
					r = AM6Client.permitSystem(o.nameType, o.objectId, oO.nameType, oO.objectId,(b ? false : this.getElementByRID("chkRead").checked), (b ? false : this.getElementByRID("chkUpdate").checked), (b ? false : this.getElementByRID("chkDelete").checked), (b ? false : this.getElementByRID("chkAdd").checked));
					if(r && o.nameType == "GROUP" && !o.name.match(/^\.thumbnail$/)){
						if(this.getElementByRID("chkSystemGroups").checked){
							var oT = AM6Client.make("GROUP","DATA",o.path + "/.thumbnail");
							if(oT) this.authorizeType(b,oT);
						}
						if(this.getElementByRID("chkRecurseGroups").checked){
							var aSG = AM6Client.list("GROUP",o.objectId,0,0);
							for(var s = 0; s < aSG.length; s++){
								this.authorizeType(b,aSG[s]);
							}
						}
					}
				}
				var p = 0;
				if(sW.match(/^(role|user|person|account|group|user)$/gi)){
				
					for(var i = 0; i < aPerms.length; i++){
						if(AM6Client.permit(o.nameType, o.objectId,oO.nameType,oO.objectId,aPerms[i].data.objectId,(b?false:true))){
							p++;
						}
					}
				}
				if(this.setStatus) this.setStatus("Authorization: " + (r ? true : false) + " / Permissions: " + p + " of " + aPerms.length);

			},
			
		manageList : function(sType, sListId, sFN){
			var oProps = {openerId:this.getObjectId(),listType:"Tag",picker:1,manualPick:1,pickFunction:sFN,listId:sListId};
			Hemi.app.createWindow("ManageList", uwm.getApiTypeView(sType) + "/Forms/List" + sType + "s.xml", "Manager-" + (sListId ? sListId : Hemi.guid()), 0, 0, oProps, 0)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 300);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		}
			
		]]>
	</embedded-script>
</Template></fragment><fragment id = "SchedulePickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Schedule:
		</p>
		<p>
			<input type="text" disable="true" rid="schedule" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseSchedule()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickSchedule('Schedule')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openSchedule()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().scheduleProp){
			this.getProperties().scheduleProp = "schedule";
		}
		//var o = this.getBean("rocketType");
		//this.pickSchedule('Schedule',o[this.getProperties().scheduleProp]);

	},
	chooseSchedule : function(){
		this.manageList("Schedule", this.getObjectId(),"pickSchedule");
	},

		openSchedule : function(){
			var o = this.getBean("rocketType");
			if(o && o[this.getProperties().scheduleProp] && this.openItem) this.openItem(o[this.getProperties().scheduleProp],"Schedule");
		},
	pickSchedule : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().scheduleProp] = v;
		this.getElementByRID("schedule").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "SchedulePicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="schedulePickerTitle">
			<span rid="schedulePickerToggle"/> Schedules:
		</p>
		<p rid="schedulePickerContent">
			<div component="wideselect" rid="schedulesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addSchedule()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeSchedule()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openSchedule()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("schedulePickerToggle","schedulePickerContent");
			if(!this.getProperties().scheduleListProp) this.getProperties().scheduleListProp = "schedules";
		},
		openSchedule : function(){
			var oI = this.getSchedulesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Schedule");
		},
		addSchedule : function(){
			this.manageList("Schedule", this.getSchedulesList().getObjectId());
		},
		removeSchedule : function(){
			var oI = this.getSchedulesList().getActiveItem();
			if(oI) this.getSchedulesList().clearItem(oI.index);
		},

		configSchedulesList : function(s,v){
			var oL = this.getSchedulesList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshSchedules();
		},
		refreshSchedules : function(){
			var oL = this.getSchedulesList(), aP = this.getProperties().scheduleListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getSchedulesList : function(){
			return this.getComponentByRID("schedulesList").GetWideSelect();
		},
		prepareSaveSchedulesList : function(o){
			aP = this.getProperties().scheduleListProp;
			o[aP] = [];
			var aSchedules = this.getSchedulesList().getItems();
			for(var i = 0; i < aSchedules.length;i++) o[aP].push(aSchedules[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "ScheduleFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Start Time:
		</p>
		<p>
			<input type="date" component="calendar" rid="startTime" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			End Time:
		</p>
		<p>
			<input type="date" component="calendar" rid="endTime" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GoalPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BudgetPicker.xml']/span" src="${dwac.path}"/>
	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.getProperties().budgetListProp = "budgets";
			this.getProperties().goalListProp = "goals";
			this.getComponentByRID("goalsList").setLoadHandler(this.scopeHandler("configGoalsList",0,1,1));
			this.getComponentByRID("budgetsList").setLoadHandler(this.scopeHandler("configBudgetsList",0,1,1));
		},
	
		addType : function(o){
			return AM6Client.update("SCHEDULE",o);
		},
		prepareSave : function(o){
			this.getElementByRID("endTime").className = "rocket-text";
			o.goals = [];
			o.budgets = [];
			var aGoals = this.getGoalsList().getItems();
			var aBudgets = this.getBudgetsList().getItems();
			for(var i = 0; i < aGoals.length;i++) o.goals.push(aGoals[i].data);
			for(var i = 0; i < aBudgets.length;i++) o.budgets.push(aBudgets[i].data);
			Hemi.log("Adding " + o.goals.length + " Goals and " + o.budgets.length + " Budgets"); 
			if(o.startTime.getTime() > (o.endTime.getTime() + 1000)){
				this.getElementByRID("endTime").className = "rocket-text rocket-text-error";
				this.setStatus("End time cannot be before the start time");
				return;
			}
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Schedule.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Schedule";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "RuleFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Score:
		</p>
		<p>
			<input type="text" rid="score" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
		<select rid="ruleType" bind="${bean.rocketType}">
			<option>UNKNOWN</option>
			<option>PERMIT</option>
			<option>DENY</option>
			</select>
    	</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Condition:
		</p>
		<p>
		<select rid="condition" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>ALL</option>
    		<option>ANY</option>
    		<option>NONE</option>
    		<option>LESS_THAN</option>
    		<option>LESS_THAN_OR_EQUALS</option>
    		<option>GREATER_THAN</option>
    		<option>GREATER_THAN_OR_EQUALS</option>
    		</select>
    				</p>
	</div>
	<div class="rocket-column-2" rid="patternPicker" style="display:none;">
		<p rid="patternPickerTitle">
			<span rid="patternPickerToggle"/> <span rid="patternPickerLabel">Patterns</span>:
		</p>
		<p rid="patternPickerContent">
			<div component="wideselect" rid="patternsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addPattern()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removePattern()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openPattern()"/>
		</p>
	</div>
	<div class="rocket-column-2" rid="rulePicker" style="display:none;">
		<p rid="rulePickerTitle">
			<span rid="rulePickerToggle"/> <span rid="rulePickerLabel">Rules</span>:
		</p>
		<p rid="rulePickerContent">
			<div component="wideselect" rid="rulesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addRule()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeRule()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openRule()"/>
		</p>
	</div>
	
	<embedded-script><![CDATA[
	embedded_init : function(){
		var o = this.getBean("rocketType");
			this.getElementByRID("patternPicker").style.display = "block";
			this.toggleField("patternPickerToggle","patternPickerContent");
			if(!this.getProperties().patternListProp) this.getProperties().patternListProp = "patterns";
			this.getElementByRID("rulePicker").style.display = "block";
			this.toggleField("rulePickerToggle","rulePickerContent");
			if(!this.getProperties().ruleListProp) this.getProperties().ruleListProp = "rules";
			
			this.initRulePicker();
			this.initPatternPicker();


	},
setPatternPickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("patternPickerLabel"),s);
		},
		initPatternPicker : function(){
			/// Have to put a little extra logic here because pattern information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enablePatternInformation = (o != null ? 1 : 0);
			
			if(_s.enablePatternInformation){
				//this.getProperties().patternListProp = "patterns";
				this.getComponentByRID("patternsList").setLoadHandler(this.scopeHandler("configPatternsList",0,1,1));
			}
		},

		
		openPattern : function(){
			var oI = this.getPatternsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Pattern");
		},
		addPattern : function(){
			this.manageList("Pattern", this.getPatternsList().getObjectId());
		},
		removePattern : function(){
			var oI = this.getPatternsList().getActiveItem();
			if(oI) this.getPatternsList().clearItem(oI.index);
		},

		configPatternsList : function(s,v){
			var oL = this.getPatternsList(),_s = this.getProperties();
			if(!_s.enablePatternInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshPatterns();
		},
		refreshPatterns : function(){
			var oL = this.getPatternsList(), aP = this.getProperties().patternListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getPatternsList : function(){
			return this.getComponentByRID("patternsList").GetWideSelect();
		},
setRulePickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("rulePickerLabel"),s);
		},
		initRulePicker : function(){
			/// Have to put a little extra logic here because rule information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableRuleInformation = (o != null ? 1 : 0);
			
			if(_s.enableRuleInformation){
				//this.getProperties().ruleListProp = "rules";
				this.getComponentByRID("rulesList").setLoadHandler(this.scopeHandler("configRulesList",0,1,1));
			}
		},

		
		openRule : function(){
			var oI = this.getRulesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Rule");
		},
		addRule : function(){
			this.manageList("Rule", this.getRulesList().getObjectId());
		},
		removeRule : function(){
			var oI = this.getRulesList().getActiveItem();
			if(oI) this.getRulesList().clearItem(oI.index);
		},

		configRulesList : function(s,v){
			var oL = this.getRulesList(),_s = this.getProperties();
			if(!_s.enableRuleInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshRules();
		},
		refreshRules : function(){
			var oL = this.getRulesList(), aP = this.getProperties().ruleListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getRulesList : function(){
			return this.getComponentByRID("rulesList").GetWideSelect();
		},
	addType : function(o){
			Hemi.log("Add rule type: " + o.name + ":" + o.patternType);
			return AM6Client.update(o.nameType, o);
		},
		prepareSave : function(o){
			var _s = this.getProperties();
			aP = _s.patternListProp;
			o[aP] = [];
			var aPatterns = this.getPatternsList().getItems();
			for(var i = 0; i < aPatterns.length;i++) o[aP].push(aPatterns[i].data);
			aP = this.getProperties().ruleListProp;
			o[aP] = [];
			var aRules = this.getRulesList().getItems();
			for(var i = 0; i < aRules.length;i++) o[aP].push(aRules[i].data);
			return 1;
		}
	]]></embedded-script>
	</span></fragment><fragment id = "Rule.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Rule";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName,"~/Rules");
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "RolePicker.xml">
<span>
	<div class="rocket-column-2" rid="rolePicker" style="display:none;">
		<p rid="rolePickerTitle">
			<span rid="rolePickerToggle"/> <span rid="rolePickerLabel">Roles</span>:
		</p>
		<p rid="rolePickerContent">
			<div component="wideselect" rid="rolesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addRole()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeRole()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openRole()"/>
		</p>
	</div>


	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getElementByRID("rolePicker").style.display = "block";
			if(this.toggleField) this.toggleField("rolePickerToggle","rolePickerContent");
			if(!this.getProperties().roleListProp) this.getProperties().roleListProp = "roles";
		},
		prepareSaveRolePicker : function(o){
			this.prepareSaveRolesList(o);
		},
		setRolePickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("rolePickerLabel"),s);
		},
		initRolePicker : function(){
			/// Have to put a little extra logic here because role information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableRoleInformation = (o != null ? 1 : 0);
			
			if(_s.enableRoleInformation){
				//this.getProperties().roleListProp = "roles";
				this.getComponentByRID("rolesList").setLoadHandler(this.scopeHandler("configRolesList",0,1,1));
			}
		},

		
		openRole : function(){
			var oI = this.getRolesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Role");
		},
		addRole : function(){
			this.manageList("Role", this.getRolesList().getObjectId());
		},
		removeRole : function(){
			var oI = this.getRolesList().getActiveItem();
			if(oI) this.getRolesList().clearItem(oI.index);
		},

		configRolesList : function(s,v){
			var oL = this.getRolesList(),_s = this.getProperties();
			if(!_s.enableRoleInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshRoles();
		},
		refreshRoles : function(){
			var oL = this.getRolesList(), aP = this.getProperties().roleListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getRolesList : function(){
			return this.getComponentByRID("rolesList").GetWideSelect();
		},
		prepareSaveRolesList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableRoleInformation) return;
			aP = this.getProperties().roleListProp;
			o[aP] = [];
			var aRoles = this.getRolesList().getItems();
			for(var i = 0; i < aRoles.length;i++) o[aP].push(aRoles[i].data);
		}
		
		
		
	]]></embedded-script>
</span></fragment><fragment id = "RoleFields.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ParentPicker.xml']/span" src="${dwac.path}"/>

	<div class="rocket-column-2" rid="dataTypeContainer">
		<p>
			Type:
		</p>
		<p>
			<select rid="roleType" bind="${bean.rocketType}">
				<option>ACCOUNT</option>
				<option selected="true">PERSON</option>
				<option>USER</option>
			</select>
		</p>
	</div>
	
	<div class="rocket-column-2" rid="memberPicker" style="display:none;">
		<p rid="memberPickerTitle">
			<span rid="memberPickerToggle"/> <span rid="memberPickerLabel">Members</span>:
		</p>
		<p rid="memberPickerContent">

			<div component="wideselect" rid="membersList">
			</div>

			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addChildMember()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeChildMember()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openChildMember()"/>
		</p>
	</div>
	
	<div class="rocket-column-2" rid="rolePicker" style="display:none;">
		<p rid="rolePickerTitle">
			<span rid="rolePickerToggle"/> <span rid="rolePickerLabel">Roles</span>:
		</p>
		<p rid="rolePickerContent">
			<div component="wideselect" rid="rolesList">
			</div>

			<br/>
			<!--
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addChildRole()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removeChildRole()" />
			-->
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openChildRole()"/>
		</p>
	</div>
	
	<embedded-script><![CDATA[
		embedded_init : function(o){
			var o = this.getBean("rocketType");
			this.getElementByRID("rolePicker").style.display = "block";
			this.toggleField("rolePickerToggle","rolePickerContent");

			this.getElementByRID("pathCont").style.display = "none";
			this.getComponentByRID("rolesList").setLoadHandler(this.scopeHandler("configRolesList",0,1,1));
			
			if(o.id && o.roleType.match(/^(person|account|user)$/gi)){
				this.toggleField("memberPickerToggle","memberPickerContent");
				this.getElementByRID("memberPicker").style.display = "block";
				this.getComponentByRID("membersList").setLoadHandler(this.scopeHandler("configMembersList",0,1,1));
			}

		},

		openChildMember : function(){
			var oI = this.getMembersList().getActiveItem();
			var sType = this.getElementByRID("roleType").value;
			sType = sType.substring(0,1) + sType.substring(1,sType.length).toLowerCase();
			if(oI && oI.data && this.openItem){
				var d = oI.data;
				var sDType = d.nameType.substring(0,1) + d.nameType.substring(1,d.nameType.length).toLowerCase();
				//if(!d.populated) d =  accountManager["get" + sDType + "ById"](d.id);
				this.openItem(d,sDType);
			}
		},
		addChildMember : function(){
			var sType = this.getElementByRID("roleType").value;
			sType = sType.substring(0,1) + sType.substring(1,sType.length).toLowerCase();
			this.manageList(sType, this.getObjectId(),"pickMember",this.getBean("rocketType").path,1);
		},
		pickMember : function(s, v){
			if(v){
				var o = this.getBean("rocketType");
				var ctl = this;
				AM6Client.member("ROLE",o.objectId,v.nameType,v.objectId,true,function(s1, v1){
					if(v1 && v1.json) ctl.getMembersList().addItem(v.name,v);
				});
				
			}
		},
		removeChildMember : function(){
			var oI = this.getMembersList().getActiveItem();
			if(oI){
				if(oI.data){
					var v = oI.data;
					var o = this.getBean("rocketType");
					var ctl = this;
					AM6Client.member("ROLE",o.objectId,v.nameType,v.objectId,false,function(s1, v1){
						if(v1 && v1.json) ctl.getMembersList().clearItem(oI.index);
					});
				}
			}
		},
		configMembersList : function(s,v){
			var o = this.getBean("rocketType");
			var oL = this.getMembersList();
			oL.getContainer().style.height = "100px";
			oL.getContainer().style.width = "250px";
			this.refreshMembers();
		},
		refreshMembers : function(a){
			var sType = this.getElementByRID("roleType").value;
			//sType = sType.substring(0,1) + sType.substring(1,sType.length).toLowerCase();
		
			var oL = this.getMembersList();
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || o == null || o.id <= 0) return;

			var aL = AM6Client.members("ROLE",o.objectId,sType);
			for(var i = 0; i < aL.length;i++){
				oL.addItem(aL[i].name,aL[i]);
			}
		},
		getMembersList : function(){
			return this.getComponentByRID("membersList").GetWideSelect();
		},
		openChildRole : function(){
			var oI = this.getRolesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Role");
		},
		addChildRole : function(){
			this.manageList("Role", this.getRolesList().getObjectId());
		},
		removeChildRole : function(){
			var oI = this.getRolesList().getActiveItem();
			if(oI){
				this.getRolesList().clearItem(oI.index);
			}
		},
		configRolesList : function(s,v){
			var o = this.getBean("rocketType");
			var oL = this.getRolesList();
			oL.getContainer().style.height = "50px";
			oL.getContainer().style.width = "150px";
			this.refreshRoles();
		},
		refreshRoles : function(a){
			var oL = this.getRolesList();
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || o == null || o.id <= 0) return;

			var aL = AM6Client.list("ROLE",o.objectId,0,0);
			for(var i = 0; i < aL.length;i++){
				oL.addItem(aL[i].name + " " + aL[i].roleType,aL[i]);
			}
		},
		getRolesList : function(){
			return this.getComponentByRID("rolesList").GetWideSelect();
		},
		embedded_destroy : function(){
		},
		
		addType : function(o){
			Hemi.log("Add role type: " + o.name + ":" + o.roleType);

			return AM6Client.update("ROLE",o);
		},
		
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Role.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Role";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			this.getProperties().populate = 0;
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
					o.parentId = (this.getProperties().parentRef ? this.getProperties().parentRef.id : 0);

				}
				else if(o.parentId > 0){
					this.getProperties().defaultPath = o.parentPath;
				}
				delete this.getProperties().parentRef;
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ResourcePickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p rid="resourcePickerTitle">
			Resource:
		</p>
		<p>
			<input type="text" disable="true" rid="resource" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseResource()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickResource('Resource')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openResource()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().resourceProp){
			this.getProperties().resourceProp = "resource";
		}
		//var o = this.getBean("rocketType");
		//this.pickResource('Resource',o[this.getProperties().resourceProp]);

	},
	chooseResource : function(){
		this.manageList("Resource", this.getObjectId(),"pickResource");
	},

		openResource : function(){
			var o = this.getBean("rocketType");
			if(o && o[this.getProperties().resourceProp] && this.openItem) this.openItem(o[this.getProperties().resourceProp],"Resource");
		},
	pickResource : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().resourceProp] = v;
		this.getElementByRID("resource").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "ResourcePicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			<span rid="resourcePickerToggle"/> <span rid="resourcePickerTitle">Resources</span>:
		</p>
		<p rid="resourcePickerContent">
			<div component="wideselect" rid="resourcesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addResource()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeResource()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openResource()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		this.toggleField("resourcePickerToggle","resourcePickerContent");
		if(!this.getProperties().resourceListProp) this.getProperties().resourceListProp = "requiredResources";
	},
	openResource : function(){
		var oI = this.getResourcesList().getActiveItem();
		if(oI && oI.data && this.openItem) this.openItem(oI.data,"Resource");
	},
	addResource : function(){
		this.manageList("Resource", this.getResourcesList().getObjectId());
	},
	removeResource : function(){
		var oI = this.getResourcesList().getActiveItem();
		if(oI) this.getResourcesList().clearItem(oI.index);
	},

	configResourcesList : function(s,v){
		var oL = this.getResourcesList();
			oL.getContainer().className = "rocket-wideselect-container";
		this.refreshResources();
	},
	refreshResources : function(){
		var oL = this.getResourcesList(),aP = this.getProperties().resourceListProp;
		oL.clearItems();
		var o = this.getBean("rocketType");
		if(!o || !o[aP]) return;
		for(var i = 0; i < o[aP].length;i++){
			oL.addItem(o[aP][i].name,o[aP][i]);
		}
	},
	getResourcesList : function(){
		return this.getComponentByRID("resourcesList").GetWideSelect();
	},
		prepareSaveResourcesList : function(o){
			aP = this.getProperties().resourceListProp;
			o[aP] = [];
			var aResources = this.getResourcesList().getItems();
			for(var i = 0; i < aResources.length;i++) o[aP].push(aResources[i].data);
		}

	]]></embedded-script>
</span></fragment><fragment id = "ResourceFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'EstimatePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'SchedulePickerSingle.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			Utilization:
		</p>
		<p>
			<input type="text" rid="utilization" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
			<select onchange="${this}.chooseResourceType()" rid="resourceType" bind="${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>ACCOUNT</option>
				<option>PERSON</option>
    			<option>USER</option>
    			<option>GROUP</option>
    			<option>ROLE</option>
     			<option>HARDWARE</option>
    			<option>SOFTWARE</option>
			</select>
		</p>
	</div>
	<div rid="accountPickerCont" style="display:none;">
		<import-dxml context-path="/DWAC/fragments/fragment[@id = 'AccountPickerSingle.xml']/span" src="${dwac.path}"/>
	</div>
	<div rid="personPickerCont" style="display:none;">
		<import-dxml context-path="/DWAC/fragments/fragment[@id = 'PersonPickerSingle.xml']/span" src="${dwac.path}"/>
	</div>

	<div rid="userPickerCont" style="display:none;">
		<import-dxml context-path="/DWAC/fragments/fragment[@id = 'UserPickerSingle.xml']/span" src="${dwac.path}"/>
	</div>
	<embedded-script><![CDATA[
		embedded_init :function(){
			this.getProperties().userProp = "user";
			this.getProperties().personProp = "person";
			this.getProperties().accountProp = "account";
			
			this.chooseResourceType(1);
		},
		chooseResourceType : function(b){
			var sVal = this.getElementByRID("resourceType").value,d;
			var o = this.getBean("rocketType");
			if(b) d = this.getResourceDataByType();
			var bUser = (sVal == "USER"), bPerson = (sVal == "PERSON"), bAccount = (sVal == "ACCOUNT");
			this.pickUser(null,(bUser ? d : 0));
			this.pickAccount(null,(bAccount ? d : 0));
			this.pickPerson(null,(bPerson ? d : 0));
			o.resourceDataId = 0;
			this.getElementByRID("userPickerCont").style.display = (bUser ? "block" : "none");
			this.getElementByRID("accountPickerCont").style.display = (bAccount ? "block" : "none");
			this.getElementByRID("personPickerCont").style.display = (bPerson ? "block" : "none");
			
		},
		getResourceDataByType : function(){
			var o = this.getBean("rocketType"),d;
			if(o.resourceData){
				d = o.resourceData;
			}
			else if(o.resourceDataId){
				if(this.getElementByRID("resourceType").value == "USER"){
					d = AM6Client.get("USER",o.resourceDataId);
				}
				else if(this.getElementByRID("resourceType").value == "ACCOUNT"){
					d = AM6Client.get("ACCOUNT",o.resourceDataId);
				}
				else if(this.getElementByRID("resourceType").value == "PERSON"){
					d = AM6Client.get("PERSON",o.resourceDataId);
				}

			}
			return d;
		},
		addType : function(o){
			Hemi.log("Add resource type: " + o.name + ":" + o.description);
			this.applyResourceId(o);
			return AM6Client.update("RESOURCE",o);
		},
		applyResourceId : function(o){
			var sType = o.resourceType.toLowerCase();
			if(o[sType]){
				o.resourceDataId = o[sType].id;
			}
			delete o.user;
			delete o.person;
			delete o.account;
		},
		prepareSave : function(o){
			this.getElementByRID("utilization").className = "rocket-text rocket-text-short";
			this.applyResourceId(o);			
			delete o.resourceData;
			if(!this.validateForPattern("utilization","numbers-only")){
				this.getElementByRID("utilization").className = "rocket-text rocket-text-short rocket-text-error";
				this.setStatus("Utilization may only be numeric");
				return 0;
			}

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Resource.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Resource";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "RequirementPicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="requirementPickerTitle">
			<span rid="requirementPickerToggle"/> Requirements:
		</p>
		<p rid="requirementPickerContent">
			<div component="wideselect" rid="requirementsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addRequirement()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeRequirement()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openRequirement()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		this.toggleField("requirementPickerToggle","requirementPickerContent");
		if(!this.getProperties().requirementListProp) this.getProperties().requirementListProp = "requiredRequirements";
	},
	openRequirement : function(){
		var oI = this.getRequirementsList().getActiveItem();
		if(oI && oI.data && this.openItem) this.openItem(oI.data,"Requirement");
	},
	addRequirement : function(){
		this.manageList("Requirement", this.getRequirementsList().getObjectId());
	},
	removeRequirement : function(){
		var oI = this.getRequirementsList().getActiveItem();
		if(oI) this.getRequirementsList().clearItem(oI.index);
	},

	configRequirementsList : function(s,v){
		var oL = this.getRequirementsList();
		oL.getContainer().className = "rocket-wideselect-container";
		this.refreshRequirements();
	},
	refreshRequirements : function(){
		var oL = this.getRequirementsList(),aP = this.getProperties().requirementListProp;
		oL.clearItems();
		var o = this.getBean("rocketType");
		if(!o || !o[aP]) return;
		for(var i = 0; i < o[aP].length;i++){
			oL.addItem(o[aP][i].name,o[aP][i]);
		}
	},
	getRequirementsList : function(){
		return this.getComponentByRID("requirementsList").GetWideSelect();
	},
		prepareSaveRequirementsList : function(o){
			aP = this.getProperties().requirementListProp;
			o[aP] = [];
			var aRequirements = this.getRequirementsList().getItems();
			for(var i = 0; i < aRequirements.length;i++) o[aP].push(aRequirements[i].data);
		}

	]]></embedded-script>
</span></fragment><fragment id = "RequirementFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Requirement Id:
		</p>
		<p>
			<input type="text" rid="requirementId" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Priority:
		</p>
		<p>
			<select rid="priority" bind="${bean.rocketType}">
	    		<option>UNKNOWN</option>
	    		<option>LOW</option>
	    		<option>NORMAL</option>
	    		<option>HIGH</option>
	    		<option>VITAL</option>
			</select>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid="requirementType" bind="${bean.rocketType}">
	  			<option>UNKNOWN</option>
	    		<option>DESIGN</option>
	    		<option>TECHNICAL</option>
	    		<option>FUNCTIONAL</option>
	    		<option>BUSINESS</option>
	    		<option>CUSTOMER</option>
	    		<option>MARKETING</option>
	    		<option>EXECUTIVE</option>
	    		<option>ARCHITECTURAL</option>
	    		<option>TEST</option>
	    		<option>DEVELOPMENT</option>
	    		<option>DEPENDENCY</option>
			</select>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Status:
		</p>
		<p>
			<select rid="requirementStatus" bind="${bean.rocketType}">
	  			<option>UNKNOWN</option>
	    		<option>DEFINED</option>
	    		<option>UNDEFINED</option>
	    		<option>IMPLEMENTED</option>
	    		<option>PENDING</option>
	    		<option>MISSED</option>
	    		<option>REJECTED</option>
	    		<option>APPROVED</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'NotePickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'FormPickerSingle.xml']/span" src="${dwac.path}"/>
	<embedded-script><![CDATA[
		addType : function(o){
			Hemi.log("Add requirement type: " + o.name + ":" + o.description);
			return AM6Client.update("REQUIREMENT",o);
		},
		prepareSave : function(o){
			this.getElementByRID("text").className = "rocket-text";
			/*
			if(!this.validateForPattern("text","not-empty")){
				this.getElementByRID("text").className = "rocket-text rocket-text-error";
				this.setStatus("Text cannot be empty");
				return 0;
			}
			*/
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Requirement.xml">
<Template>
	<!--
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<import-xml src = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/BaseType.xml" id = "BaseType" />
	<p>
	</p>
	-->
	<p>Note Base</p>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Requirement";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "Register.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'OrganizationPicker.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			Email:
		</p>
		<p>
			<input type="text" class="input_text" rid="email"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Email as Login:
		</p>
		<p>
			<input onclick="${this}.getElementByRID('user_name').disabled = this.checked" type="checkbox" class="input_checkbox" rid="email_login" checked="true"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			User Name:
		</p>
		<p>
			<input type="text" disabled="true" class="input_text" rid="user_name"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Password:
		</p>
		<p>
			<input type="password" class="input_text" rid="password"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Confirm:
		</p>
		<p>
			<input type="password" class="input_text" rid="confirm_password"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			<input type="button" value="Cancel" class="input_button" onclick="${this}.DoCancel()"/>
		</p>
		<p>
			<input type="button" value="Register" class="input_button" onclick="${this}.DoRegister()"/>
		</p>
	</div>
<p><span rid="status">[ ... ]</span></p>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			this.setStatus(" ");
			/// Get the session so that any registration information is properly stored
			///
			var oR = uwm.getSession();
		},
		DoCancel : function(){
			uwm.rule("IsLoggedIn",0, "ContinueWorkflow","RequireAuthentication");
		},
		DoRegister : function(){

			var bChecked = this.getFormValue("email_login");
			if(bChecked){
				this.synchronizeForm(1);
				this.setFormValue("user_name",this.getFormValue("email"));
			}
			if(!this.Validate()) return;
			
			var oOrg = AM6Client.find("ORGANIZATION",this.getOrgPath());
			if(!oOrg){
				this.setStatus("Invalid organization");
				return;
			}
			
			var sName = this.getFormValue("user_name");
			var sPassword = this.getFormValue("password");
			var sEmail = this.getFormValue("email");
			this.setFormValue("password","");
			this.setFormValue("confirm_password","");
			this.setStatus(" ");
			window.uwm.operation("Register", {user_name : sName, password : sPassword, email:sEmail, organization: oOrg});		
		},

		Validate : function(){
			try{
				this.assert(this.validateForPattern("user_name","not-empty"),"Invalid user_name");
				this.assert(this.validateForPattern("user_name","not-empty"),"Invalid user_name");
				this.assert(this.validateForPattern("password","not-empty"),"Invalid password");
				this.assert(this.validateForPattern("confirm_password","not-empty"),"Invalid password confirmation");
				this.assert(this.getFormValue("password") == this.getFormValue("confirm_password"), "Password confirmation doesn't match");
			}
			catch(e){
				this.setStatus((typeof e== "string" ? e : e.message ? e.message : e.description));
				return 0;
			}
			return 1;
		},
		
		setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("status"),s);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ProjectPicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="projectPickerTitle">
			<span rid="projectPickerToggle"/> Projects:
		</p>
		<p rid="projectPickerContent">
			<div component="wideselect" rid="projectsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addProject()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeProject()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openProject()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("projectPickerToggle","projectPickerContent");
			if(!this.getProperties().projectListProp) this.getProperties().projectListProp = "projects";
		},
		openProject : function(){
			var oI = this.getProjectsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Project");
		},
		addProject : function(){
			this.manageList("Project", this.getProjectsList().getObjectId());
		},
		removeProject : function(){
			var oI = this.getProjectsList().getActiveItem();
			if(oI) this.getProjectsList().clearItem(oI.index);
		},

		configProjectsList : function(s,v){
			var oL = this.getProjectsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshProjects();
		},
		refreshProjects : function(){
			var oL = this.getProjectsList(), aP = this.getProperties().projectListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getProjectsList : function(){
			return this.getComponentByRID("projectsList").GetWideSelect();
		},
		prepareSaveProjectsList : function(o){
			aP = this.getProperties().projectListProp;
			o[aP] = [];
			var aProjects = this.getProjectsList().getItems();
			for(var i = 0; i < aProjects.length;i++) o[aP].push(aProjects[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "ProjectFields.xml">
<span>

	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'SchedulePickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BlueprintPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'RequirementPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DependencyPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ArtifactPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ModulePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'StagePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DataDndPicker.xml']/span" src="${dwac.path}"/>

	<div rid="regionCont" style="display:none;clear:both;" class="rocket-column-2">
		<p rid="lblRegion">
			<span rid="cfgRegionToggle"/> Configure Region:
		</p>
		<p rid="cfgRegionCont">
			<input rid="txtLocCount" type="text" class="rocket-text rocket-text-short" value="3"/>
			<input rid="txtInitPop" type="text" class="rocket-text rocket-text-short" value="250"/>
			<input rid="btnConfigProjectRegion" type="button" class="rocket-button" value="Configure" onclick="${this}.configureProjectRegion()"/>
		</p>
	</div>

	<div rid="evolveCont" style="display:none;clear:both;" class="rocket-column-2">
		<p rid="lblEvolve">
			<span rid="evoRegionToggle"/> Evolve Region:
		</p>
		<p rid="evoRegionCont">
			<input rid="txtEpochCount" type="text" class="rocket-text rocket-text-short" value="1"/>
			<input rid="txtIterCount" type="text" class="rocket-text rocket-text-short" value="12"/>
			<input rid="btnConfigProjectRegion" type="button" class="rocket-button" value="Evolve" onclick="${this}.evolveProjectRegion()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		evolveProjectRegion : function(){
			var o = this.getBean("rocketType"), oC = this;
			this.setStatus("Evolving project region");
			
			AM6Client.evolveCommunityProjectRegion(irocket.getCommunityLifecycle().objectId, o.objectId, this.getElementByRID("txtEpochCount").value, this.getElementByRID("txtIterCount").value, function(s, v){
				if(v && v.json) v = v.json;
				if(v){
					oC.setStatus("Evolved project region");
					oC.refreshRegionCont();
				}
				else oC.setStatus("Failed to evolve project region");
			});
		
		
		},
		configureProjectRegion : function(){
			var o = this.getBean("rocketType"), oC = this;
			this.setStatus("Configuring project region");
			
			AM6Client.configureCommunityProjectRegion(irocket.getCommunityLifecycle().objectId, o.objectId, this.getElementByRID("txtLocCount").value, this.getElementByRID("txtInitPop").value, function(s, v){
				if(v && v.json) v = v.json;
				if(v){
					oC.setStatus("Configured project region");
					oC.refreshRegionCont();
				}
				else oC.setStatus("Failed to configure project region");
			});
		
		
		},
		refreshRegionCont : function(){
			var bD1 = 0;
			var bD2 = 0;
			var o = this.getBean("rocketType");

			if(o.objectId && irocket.getCommunityMode()){
				AM6Client.clearCache("EVENT",1);
				var oL =  AM6Client.find("GROUP","DATA",o.groupPath + "/Events");
				if(oL){
					var iL = AM6Client.count("EVENT",oL.objectId);
					console.log("Count: " + iL);
					if(iL == 0) bD1 = 1;
					else{
						bD2 = 1;
						this.getElementByRID("txtEpochCount").value = iL + 1;
					}
				}
			}

			this.getElementByRID("regionCont").style.display = (bD1 ? "block" : "none" );
			this.getElementByRID("evolveCont").style.display = (bD2 ? "block" : "none" );
		
		},
		embedded_init : function(){
			var o = this.getBean("rocketType"),_s = this.getProperties();
			_s.dndHandler = "local_handle_dnd_form";
			_s.dndShowForm = "local_handle_dnd_form_show";
			_s.blueprintListProp = "blueprints";
			_s.requirementListProp = "requirements";
			_s.dependencyListProp = "dependencies";
			_s.artifactListProp = "artifacts";
			_s.moduleListProp = "modules";
			_s.stageListProp = "stages";
			_s.scheduleProp = "schedule";
			this.pickSchedule('Schedule',o.schedule);
			
			
			this.getComponentByRID("blueprintsList").setLoadHandler(this.scopeHandler("configBlueprintsList",0,1,1));
			this.getComponentByRID("requirementsList").setLoadHandler(this.scopeHandler("configRequirementsList",0,1,1));
			this.getComponentByRID("dependenciesList").setLoadHandler(this.scopeHandler("configDependenciesList",0,1,1));
			this.getComponentByRID("artifactsList").setLoadHandler(this.scopeHandler("configArtifactsList",0,1,1));
			this.getComponentByRID("modulesList").setLoadHandler(this.scopeHandler("configModulesList",0,1,1));
			this.getComponentByRID("stagesList").setLoadHandler(this.scopeHandler("configStagesList",0,1,1));
			
			this.toggleField("cfgRegionToggle","cfgRegionCont");
			this.toggleField("evoRegionToggle","evoRegionCont");
			
			this.refreshRegionCont();
		},
		embedded_destroy : function(){

		},
		local_handle_dnd_form_show : function(oW){
			this.setStatus("Warning: Window will close if successful");
		},
		local_handle_dnd_form : function(oW, aF){
			var o = this.getBean("rocketType");
			if(aF.length){
				var oD = AM6Client.get("DATA",AM6Client.find("GROUP","DATA",uwm.getPathForType("Data")).objectId,aF[0]);
				if(oD){
					uwmServices.getService("Rocket").importProject(o.id,oD.id,false);
					oW.Close();
					this.Close();
				}
			}
			
		},
		addType : function(o){
			if(irocket.getCommunityMode()){
				var oL = irocket.getCommunityLifecycle();
				if(!oL || oL == null){
					this.setStatus("Invalid community lifecycle selection");
					return false;
				}
				var oP = AM6Client.addCommunityProject(oL.objectId,o.name);
				if(!oP || oP == null){
					this.setStatus("Failed to create community project");
					return false;
				}
				oP = AM6Client.communityProject(oL.name, o.name);
				oP.description = o.description;
				oP.blueprints = o.blueprints;
				oP.requirements = o.requirements;
				oP.dependencies = o.dependencies;
				oP.artifacts = o.artifacts;
				oP.modules = o.modules;
				oP.stages = o.stages;
				oP.schedule = o.schedule;
				if(AM6Client.update("PROJECT",oP)){
					AM6Client.clearCache("PROJECT");
					Hemi.message.service.publish("onchangecommunity",this);
					return 1;
				}
				return 0;
			}
			else{
				uwmServiceCache.clearCache();
				return AM6Client.update("PROJECT",o);
			}
		},
		prepareSave : function(o){
			this.prepareSaveBlueprintsList(o);
			this.prepareSaveRequirementsList(o);
			this.prepareSaveDependenciesList(o);
			this.prepareSaveArtifactsList(o);
			this.prepareSaveModulesList(o);
			this.prepareSaveStagesList(o);
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "ProjectDesign.xml">
<Template>
	<p>Design Base</p>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().designMode = 1;
			this.loadTemplate('${dwac.path}','Project.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "Project.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Project";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			if(this.getProperties().designMode) this.loadTemplate('${dwac.path}','ProjectDesigner.xml');
			else this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ProfileFields.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<div>
		<p style="float: left;width:150px;">
			<span style="color:#76933c;" rid="profileName">Anonymous</span>
			<br/>
			<img rid="btnProfile" style="border:1px dotted transparent;margin:0px;padding:0px;" src="/AccountManagerService/Media/Icons/user_100x100.png" width="100" height="100" title="Profile"/>
			<span rid="editProfileCont" style="display:none;margin:0px;padding:0px;"><br/><span style="color:#76933c;" onclick="${this}.chooseProfileText()">Pick</span> | <span style="color:#76933c;" onclick="${this}.openProfileText()">Edit</span></span>
		</p>
		<div style="margin-left:150px;" rid="txtProfile">
			[ Profile ]
			<br/>
		</div>
	</div>
	<p style="clear:both;"/>
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.refreshProfile();
			},
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			},
			DoGallery : function(){
				var sTxt = Hemi.xml.getText("/AccountManagerService/Scripts/canvasGallery.js");
				eval(sTxt);
			},
			handleDesignerSave : function(){
				if(this.getObjects().profileText){
					AM6Client.clearCache(this.getObjects().profileText);
					delete this.getObjects().profileText;
				}
				Hemi.log("Handling designer save");
				this.refreshProfile();
			},
			openProfileText : function(){

				this.openItem(this.getObjects().profileText, "Data", (this.getObjects().profileText ? this.getObjects().profileText.objectId : 0));
			},
			openProfileType : function(){
				this.openItem(this.getObjects().profile,this.getProperties().profileType,this.getProperties().profileId);
			},
			  refreshProfile : function(){
			  		var sUid = this.getProperties().profileId;
			  		var sUType = this.getProperties().profileType.toUpperCase();
			  		
			  		if(!sUid || !sUType){
			  			Hemi.logWarning("No profile id or type provided");
			  			return;
			  		}
			  		var ctl = this;
			  		AM6Client.user().then((oU)=>{
				  		AM6Client.application().then((oX)=>{

					    	AM6Client.get(sUType,sUid,function(s,v){
						    	var oP = (v && v.json ? v.json : v);
						    	if(!oP){
						    		Hemi.logWarning("Invalid object in client handler: " + s + " / " + v);
						    		return;
						    	}
						    	var iOwnerComp = oP.ownerId;
							    var bEdit = 0;
								if(iOwnerComp == oU.id || sUid == oU.objectId || oX.userRoles.filter(r => r.name.match(/^accountadministrators$/gi)).length){
					  				bEdit = 1;
					  			}

					  			if(bEdit){
					  				ctl.rid.profileName.onclick = function(){ctl.openProfileType();};
					  				ctl.rid.editProfileCont.style.display = "";
					  				ctl.rid.btnProfile.onmouseover = function(e){
										var o = Hemi.event.getEventSource(e);
										o.style.border = "1px solid #00FF00";
									};
									ctl.rid.btnProfile.onmouseout = function(e){
										var o = Hemi.event.getEventSource(e);
										o.style.borderColor = "transparent";
									};
									ctl.rid.btnProfile.onclick = function(){ctl.chooseProfile();};
					  			}
						    	
						    	Hemi.xml.setInnerXHTML(ctl.rid.profileName, oP.name);
						    	ctl.getObjects().profile = oP;
						    	var sPid = AM6Client.getAttributeValue(oP,"v1-profile",0);
						    	var sTid = AM6Client.getAttributeValue(oP,"v1-profile-text",0);
								Hemi.logDebug("Profile: " + sPid + " / Text: " + sTid);
						    	if(sPid && sPid.length > 0){
							    	AM6Client.get("DATA",sPid,function(s,v){
							    		/// TODO: There's an issue here where if the attribute reference is invalid (ie: the object was deleted) it's not being caught here
								    	if(v && v.json) v = v.json;
								    	if(!v || v == null || !v.nameType){
								    		return;
								    	}
								    	var o = v;
										
								    	var oG = o.groupPath;
										var sOrg = AM6Client.dotPath(o.organizationPath);
										var sThumbUrl = "/AccountManagerService/thumbnail/" + sOrg + "/Data" + oG + "/" + o.name + "/100x100";
										var oImg = ctl.rid.btnProfile;
										oImg.removeAttribute("width");
										oImg.removeAttribute("height");
										oImg.src = sThumbUrl;
									});
								}
								if(sTid && sTid.length > 0){
							    	AM6Client.get("DATA",sTid,function(s,v){
							    		if(v && v.json) v = v.json;
								    	if(!v || v == null){
								    		return;
								    	}
								    	var o = v;
								    	ctl.getObjects().profileText = o;
								    	bbConverter.copyInto(bbConverter.import(uwm.base64Decode(o.dataBytesStore)), ctl.rid.txtProfile);
										uwm.decorateLinkToPopIn(ctl.rid.txtProfile);
									});
								}
							}); // end get
						}); // end application
					}); // end user
					
			
				},
			    pickProfile : function(s, o, i, w){
			    	var oP = this.getObjects().profile;
			    	if(!oP) return;
			    	
			    	var oAttr = AM6Client.getAttribute(oP,"v1-profile");
					if(!oAttr || !oAttr.values.length){
						AM6Client.addAttribute(oP,"v1-profile",o.objectId);
					}
					else{
						oAttr.values = [o.objectId];
					}
					
					AM6Client.update(oP.nameType,oP);
					if(this.getProperties().linkProfileId){
						var oX = AM6Client.get((oP.nameType == "PERSON" ? "USER" : "PERSON"),this.getProperties().linkProfileId);
						if(oX != null){
							oAttr = AM6Client.getAttribute(oX,"v1-profile");
							if(!oAttr || !oAttr.values.length){
								AM6Client.addAttribute(oX,"v1-profile",o.objectId);
							}
							else{
								oAttr.values = [o.objectId];
							}
							AM6Client.update(oX.nameType,oX);
						}
					}
					this.refreshProfile();
			    },
				chooseProfile : function(){
						var sPath = "~/GalleryHome";
						var oProps = {openerId:this.getObjectId(),defaultPath:sPath,listType:"Data",picker:1,pickFunction:"pickProfile",listId:0};
						Hemi.app.createWindow("ManageList", "${dwac.path}[ListDatas.xml]", "DataPicker", 0, 0, oProps)
						.then((oW)=>{
				            if (oW) {
				            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
				            	oW.setHideOnClose(0);
				            }
			            });
				},
			    pickProfileText : function(s, o, i, w){
			    	var oP = this.getObjects().profile;
			    	if(!oP) return;
			    	var oAttr = AM6Client.getAttribute(oP,"v1-profile-text");
					if(!oAttr || !oAttr.values.length){
						AM6Client.addAttribute(oP,"v1-profile-text",o.objectId);
					}
					else{
						oAttr.values = [o.objectId];
					}
					AM6Client.update(oP.nameType,oP);
					this.refreshProfile();
			    },
				chooseProfileText : function(){
						var sPath = "~/Data";
						var oProps = {openerId:this.getObjectId(),defaultPath:sPath,listType:"Data",picker:1,pickFunction:"pickProfileText",listId:0};
						Hemi.app.createWindow("ManageList", "${dwac.path}[ListDatas.xml]", "DataPicker", 0, 0, oProps)
						.then((oW)=>{
				            if (oW) {
				            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
				            	oW.setHideOnClose(0);
				            }
			            });
				},
				
			openItem : function(o, sType, sGid,fHandler){
				if(!o) o = AM6Client.get(sType.toUpperCase(),sGid);
					
			
				
				this.openWindow(sType, o, fHandler);
		},
		openWindow : function(sType,oType, fHandler){
			var oProps = {openerId:this.getObjectId(),picker:0,viewType:oType,listId:0};
			var oWp = 0, bD = 0;
			if(sType.match(/^data$/gi)){
				oWp = Hemi.app.createWindow("Design " + o.name, "${dwac.path}[DataDesign.xml]", "DesView-" + o.id, 0, 0, oProps);
				bD = 1;
			}
			else oWp = Hemi.app.createWindow((oType && oType.id ? oType.name : "New" + sType), uwm.getApiTypeView(sType) + "/Forms/" + sType + ".xml", "View-" + (oType && oType.id ? sType + "-" + oType.id : Hemi.guid()), 0, 0, oProps, fHandler);
            if (oWp) {
            	oWp.then((oW)=>{
	            	oW.resizeTo((bD ? 600 : 475), 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
            	});
            }
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "Profile.xml">
<Template>
	<p>Not Authenticated</p>
	<embedded-script>
		<![CDATA[
			template_init: function(){
				var oUp = 0;
				var _s = this.getProperties();
				/// The link is specifically for the master person/user at the organization level
				///
				var sLinkProfId = 0;
				var oT = _s.viewType;
				if(oT && _s.listType){
					oUp = (oT instanceof Promise ? oT : Promise.resolve(oT));
					_s.profileType = _s.listType;
				}
				else oUp = uwm.getUser();
				
				oUp.then((oU)=>{
					if(!oU || oU == null){
						if(_s.listType && _s.listType.match(/^person$/gi)){
							_s.profileType = _s.listType = "User";
							oU = _s.viewType = _s.user;
						
						}
						if(!oU || oU == null) return;
					}
					if(oU.nameType == "USER"){
						AM6Client.userPerson(oU.objectId).then((oP)=>{
							if(oP){
								sLinkProfId = oU.objectId;
								oU = oP;
								_s.profileType = "Person";
							}
							else{
								_s.profileType = "User";
							}
							this.completeConfig(oU, sLinkProfId);
						});
						
					}
					/// If the person includes a user ...
					else if(oU.nameType == "PERSON" && oU.users.length > 0){
						this.completeConfig(oU, oU.users[0].objectId);
					}

				});
			},
			completeConfig : function(oU, sLinkProfId){
				this.getProperties().profileId = oU.objectId;
				this.getProperties().linkProfileId = sLinkProfId;
				this.loadTemplate('${dwac.path}','ProfileFields.xml');
			},
			
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ProcessStepPicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="processStepPickerTitle">
			Process Steps:
		</p>
		<p>
			<div component="wideselect" rid="processStepsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addProcessStep()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeProcessStep()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openProcessStep()"/>

		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().processStepListProp) this.getProperties().processStepListProp = "processSteps";
		//this.getComponentByRID("processStepsList").setLoadHandler(this.scopeHandler("configProcessStepsList",0,1,1));
	},
	openProcessStep : function(){
		var oI = this.getProcessStepsList().getActiveItem();
		if(oI && oI.data && this.openItem) this.openItem(oI.data,"ProcessStep");
	},
	
	addProcessStep : function(){
			this.manageList("ProcessStep", this.getProcessStepsList().getObjectId());
		},
		removeProcessStep : function(){
			var oI = this.getProcessStepsList().getActiveItem();
			if(oI) this.getProcessStepsList().clearItem(oI.index);
		},

		configProcessStepsList : function(s,v){
			var oL = this.getProcessStepsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshProcessSteps();
		},
		refreshProcessSteps : function(){
			var oL = this.getProcessStepsList(), aP = this.getProperties().processStepListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getProcessStepsList : function(){
			return this.getComponentByRID("processStepsList").GetWideSelect();
		},
		prepareSaveProcessStepsList : function(o){
			aP = this.getProperties().processStepListProp;
			o[aP] = [];
			var aProcessSteps = this.getProcessStepsList().getItems();
			for(var i = 0; i < aProcessSteps.length;i++) o[aP].push(aProcessSteps[i].data);
		}
	
	]]></embedded-script>
</span></fragment><fragment id = "ProcessStepFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GoalPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BudgetPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'RequirementPicker.xml']/span" src="${dwac.path}"/>
	
	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.getProperties().budgetListProp = "budgets";
			this.getProperties().goalListProp = "goals";
			this.getProperties().requirementListProp = "requirements";
			this.getComponentByRID("requirementsList").setLoadHandler(this.scopeHandler("configRequirementsList",0,1,1));
			this.getComponentByRID("goalsList").setLoadHandler(this.scopeHandler("configGoalsList",0,1,1));
			this.getComponentByRID("budgetsList").setLoadHandler(this.scopeHandler("configBudgetsList",0,1,1));
		},
	
		addType : function(o){
			return AM6Client.update("PROCESSSTEP",o);
		},
		prepareSave : function(o){
			this.prepareSaveGoalsList(o);
			this.prepareSaveBudgetsList(o);
			this.prepareSaveRequirementsList(o);

			this.getElementByRID("logicalOrder").className = "rocket-text";
			if(!this.validateForPattern("logicalOrder","numbers-only")){
				this.getElementByRID("logicalOrder").className = "rocket-text rocket-text-error";
				this.setStatus("Text cannot be empty");
				return 0;
			}
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "ProcessStep.xml">
<Template>
	<!--
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<import-xml src = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/BaseType.xml" id = "BaseType" />
	<p>
	</p>
	-->
	<p>Note Base</p>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "ProcessStep";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ProcessPicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="processPickerTitle">
			Processes:
		</p>
		<p>
			<div component="wideselect" rid="processesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addProcess()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeProcess()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openProcess()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			if(!this.getProperties().processListProp) this.getProperties().processListProp = "processes";
			//this.getComponentByRID("processesList").setLoadHandler(this.scopeHandler("configProcessesList",0,1,1));
		},
		openProcess : function(){
			var oI = this.getProcessesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Process");
		},
		addProcess : function(){
			this.manageList("Process", this.getProcessesList().getObjectId());
		},
		removeProcess : function(){
			var oI = this.getProcessesList().getActiveItem();
			if(oI) this.getProcessesList().clearItem(oI.index);
		},

		configProcessesList : function(s,v){
			var oL = this.getProcessesList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshProcesses();
		},
		refreshProcesses : function(){
			var oL = this.getProcessesList(), aP = this.getProperties().processListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getProcessesList : function(){
			return this.getComponentByRID("processesList").GetWideSelect();
		},
		prepareSaveProcessesList : function(o){
			aP = this.getProperties().processListProp;
			o[aP] = [];
			var aProcesses = this.getProcessesList().getItems();
			for(var i = 0; i < aProcesses.length;i++) o[aP].push(aProcesses[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "ProcessFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Iterates:
		</p>
		<p>
			<input type="checkbox" rid="iterates" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ProcessStepPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BudgetPicker.xml']/span" src="${dwac.path}"/>
	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.getProperties().processStepListProp = "steps";
			this.getProperties().budgetListProp = "budgets";
			this.getComponentByRID("processStepsList").setLoadHandler(this.scopeHandler("configProcessStepsList",0,1,1));
			this.getComponentByRID("budgetsList").setLoadHandler(this.scopeHandler("configBudgetsList",0,1,1));
		},
		
		addType : function(o){
			return AM6Client.update("PROCESS",o);
		},
		prepareSave : function(o){

			this.prepareSaveBudgetsList(o);
			this.prepareSaveProcessStepsList(o);

			this.getElementByRID("logicalOrder").className = "rocket-text";
			if(!this.validateForPattern("logicalOrder","numbers-only")){
				this.getElementByRID("logicalOrder").className = "rocket-text rocket-text-error";
				this.setStatus("Text cannot be empty");
				return 0;
			}
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Process.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Process";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "PolicyFields.xml">
<span>

	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Score:
		</p>
		<p>
			<input type="text" rid="score" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Enabled:
		</p>
		<p>
			<input type="checkbox" bind="${bean.rocketType}" rid="enabled"/>
		</p>
	</div>	
	<div class="rocket-column-2">
		<p>
			Created:
		</p>
		<p>
			<input type="date" disabled="true" component="calendar" rid="createdDate" bind="${bean.rocketType}" class="rocket-text rocket-text-readonly"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Modified:
		</p>
		<p>
			<input type="date" disabled="true" component="calendar" rid="modifiedDate" bind="${bean.rocketType}" class="rocket-text rocket-text-readonly"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Expires:
		</p>
		<p>
			<input type="date" component="calendar" rid="expiresDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
		<div class="rocket-column-2">
		<p>
			Decision Age:
		</p>
		<p>
			<input type="text" rid="decisionAge" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Condition:
		</p>
		<p>
		<select rid="condition" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>ALL</option>
    		<option>ANY</option>
    		<option>NONE</option>
      		<option>LESS_THAN</option>
    		<option>LESS_THAN_OR_EQUALS</option>
    		<option>GREATER_THAN</option>
    		<option>GREATER_THAN_OR_EQUALS</option>
    		</select>
    	</p>
	</div>
<div class="rocket-column-2" rid="rulePicker" style="display:none;">
		<p rid="rulePickerTitle">
			<span rid="rulePickerToggle"/> <span rid="rulePickerLabel">Rules</span>:
		</p>
		<p rid="rulePickerContent">
			<div component="wideselect" rid="rulesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addRule()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeRule()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openRule()"/>
		</p>
	</div>
	<div rid="defineCont" style="display:none;clear:both;" class="rocket-column-2">
		<p rid="lblDebug">
			Test:
		</p>
		<p>
			<input rid="btnDefine" type="button" class="rocket-button" value="Test" onclick="${this}.evaluatePolicy()"/>
		</p>
	</div>

<embedded-script><![CDATA[
	embedded_init : function(){
		var o = this.getBean("rocketType");
			this.getElementByRID("rulePicker").style.display = "block";
			this.getElementByRID("defineCont").style.display = (o.id ? "block" : "none");
			this.toggleField("rulePickerToggle","rulePickerContent");
			if(!this.getProperties().ruleListProp) this.getProperties().ruleListProp = "rules";
			
			this.initRulePicker();
	},
	evaluatePolicy : function(){
		
		var o = this.getBean("rocketType");
		var oProps = {policy:o};
		Hemi.app.createWindow("Evaluate " + o.name, "${dwac.path}[EvaluatePolicy.xml]", "Evaluate-" + o.urn, 0, 0, oProps, 0)
		.then((oW)=>{
	        if (oW) {
	           	oW.resizeTo(475, 400);
	           	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	           	// Destroy the window when closed
	           	//
	           	oW.setHideOnClose(0);
	        }
	    });
	},

	definePolicy : function(){
		this.sendToDebug(AM6Client.define(this.getBean("rocketType").objectId));
	},
setRulePickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("rulePickerLabel"),s);
		},
		initRulePicker : function(){
			/// Have to put a little extra logic here because rule information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableRuleInformation = (o != null ? 1 : 0);
			
			if(_s.enableRuleInformation){
				//this.getProperties().ruleListProp = "rules";
				this.getComponentByRID("rulesList").setLoadHandler(this.scopeHandler("configRulesList",0,1,1));
			}
		},

		
		openRule : function(){
			var oI = this.getRulesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Rule");
		},
		addRule : function(){
			this.manageList("Rule", this.getRulesList().getObjectId());
		},
		removeRule : function(){
			var oI = this.getRulesList().getActiveItem();
			if(oI) this.getRulesList().clearItem(oI.index);
		},

		configRulesList : function(s,v){
			var oL = this.getRulesList(),_s = this.getProperties();
			if(!_s.enableRuleInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshRules();
		},
		refreshRules : function(){
			var oL = this.getRulesList(), aP = this.getProperties().ruleListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getRulesList : function(){
			return this.getComponentByRID("rulesList").GetWideSelect();
		},
	addType : function(o){
			Hemi.log("Add policy type: " + o.name);
			return AM6Client.update(o.nameType, o);
		},
		prepareSave : function(o){
			var _s = this.getProperties();
			aP = this.getProperties().ruleListProp;
			o[aP] = [];
			var aRules = this.getRulesList().getItems();
			for(var i = 0; i < aRules.length;i++) o[aP].push(aRules[i].data);
			return 1;
		}
	]]></embedded-script>
	</span></fragment><fragment id = "Policy.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Policy";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName,"~/Policies");
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "PersonPickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Person:
		</p>
		<p>
			<input type="text" disable="true" rid="person" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.choosePerson()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickPerson('Person')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openPerson()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().personProp) this.getProperties().personProp = "person";
		var o = this.getBean("rocketType");
		this.pickPerson('Person',o.person);
	},
	choosePerson : function(){
		this.manageList("Person", this.getObjectId(),"pickPerson");
	},

		openPerson : function(){
			var o = this.getBean("rocketType"), aP = this.getProperties().personProp;
			if(o && o[aP] && this.openItem) this.openItem(o[aP],"Person");
		},
	pickPerson : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().personProp] = v;
		this.getElementByRID("person").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "PersonPicker.xml">
<span>
	<div class="rocket-column-2" rid="personPicker" style="display:none;">
		<p rid="personPickerTitle">
			<span rid="personPickerToggle"/> <span rid="personPickerLabel">Persons</span>:
		</p>
		<p rid="personPickerContent">
			<div component="wideselect" rid="personsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addPerson()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removePerson()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openPerson()"/>
		</p>
	</div>


	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getElementByRID("personPicker").style.display = "block";
			this.toggleField("personPickerToggle","personPickerContent");
			if(!this.getProperties().personListProp) this.getProperties().personListProp = "persons";
		},
		prepareSavePersonPicker : function(o){
			this.prepareSavePersonsList(o);
		},
		setPersonPickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("personPickerLabel"),s);
		},
		initPersonPicker : function(){
			/// Have to put a little extra logic here because person information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enablePersonInformation = (o != null ? 1 : 0);
			
			if(_s.enablePersonInformation){
				//this.getProperties().personListProp = "persons";
				this.getComponentByRID("personsList").setLoadHandler(this.scopeHandler("configPersonsList",0,1,1));
			}
		},

		
		openPerson : function(){
			var oI = this.getPersonsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Person");
		},
		addPerson : function(){
			this.manageList("Person", this.getPersonsList().getObjectId());
		},
		removePerson : function(){
			var oI = this.getPersonsList().getActiveItem();
			if(oI) this.getPersonsList().clearItem(oI.index);
		},

		configPersonsList : function(s,v){
			var oL = this.getPersonsList(),_s = this.getProperties();
			if(!_s.enablePersonInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshPersons();
		},
		refreshPersons : function(){
			var oL = this.getPersonsList(), aP = this.getProperties().personListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getPersonsList : function(){
			return this.getComponentByRID("personsList").GetWideSelect();
		},
		prepareSavePersonsList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enablePersonInformation) return;
			aP = this.getProperties().personListProp;
			o[aP] = [];
			var aPersons = this.getPersonsList().getItems();
			for(var i = 0; i < aPersons.length;i++) o[aP].push(aPersons[i].data);
		}
		
		
		
	]]></embedded-script>
</span></fragment><fragment id = "PersonFields.xml">
<span>
	<div rid="descriptionCont" class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div rid="titleCont" class="rocket-column-2">
		<p>
			Title:
		</p>
		<p>
			<input type="text" rid="title" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div rid="prefixCont" class="rocket-column-2">
		<p>
			Prefix:
		</p>
		<p>
			<input type="text" rid="prefix" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			First Name:
		</p>
		<p>
			<input type="text" rid="firstName" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Middle Name:
		</p>
		<p>
			<input type="text" rid="middleName" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Last Name:
		</p>
		<p>
			<input type="text" rid="lastName" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div rid="suffixCont" class="rocket-column-2">
		<p>
			Suffix:
		</p>
		<p>
			<input type="text" rid="suffix" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div rid="aliasCont" class="rocket-column-2">
		<p>
			Alias:
		</p>
		<p>
			<input type="text" rid="alias" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Birthdate:
		</p>
		<p>
			<input component="calendar" type="text" rid="birthDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div rid="genderCont" class="rocket-column-2">
		<p>
			Gender:
		</p>
		<p>
			<select rid="gender" bind="${bean.rocketType}">
				<option default="true" value="unknown">Unknown</option>
				<option value="male">Male</option>
				<option value="female">Female</option>
				<option value="unspecified">Unspecified</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'JWTPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ContactInformation.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2" rid="partnerPicker" style="display:none;">
		<p rid="partnerPickerTitle">
			<span rid="partnerPickerToggle"/> <span rid="partnerPickerLabel">Partners</span>:
		</p>
		<p rid="partnerPickerContent">
			<div component="wideselect" rid="partnersList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addPartner()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removePartner()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openPartner()"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'PersonPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'AccountPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'UserPicker.xml']/span" src="${dwac.path}"/>


	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getElementByRID("partnerPicker").style.display = "block";
			this.toggleField("partnerPickerToggle","partnerPickerContent");
			if(!this.getProperties().partnerListProp) this.getProperties().partnerListProp = "partners";
			this.initPartnerPicker();
			this.initUserPicker();
			this.initAccountPicker();
			this.initContactInformation();
			this.getProperties().personListProp = "dependents";
			this.setPersonPickerLabel("Deps");
			this.initPersonPicker();
		},
		
		prepareSavePartnerPicker : function(o){
			this.prepareSavePartnersList(o);
		},
		setPartnerPickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("partnerPickerLabel"),s);
		},
		initPartnerPicker : function(){
			/// Have to put a little extra logic here because partner information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enablePartnerInformation = (o != null ? 1 : 0);
			
			if(_s.enablePartnerInformation){
				//this.getProperties().partnerListProp = "partners";
				this.getComponentByRID("partnersList").setLoadHandler(this.scopeHandler("configPartnersList",0,1,1));
			}
		},

		
		openPartner : function(){
			var oI = this.getPartnersList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Person");
		},
		addPartner : function(){
			this.manageList("Person", this.getPartnersList().getObjectId());
		},
		removePartner : function(){
			var oI = this.getPartnersList().getActiveItem();
			if(oI) this.getPartnersList().clearItem(oI.index);
		},

		configPartnersList : function(s,v){
			var oL = this.getPartnersList(),_s = this.getProperties();
			if(!_s.enablePartnerInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshPartners();
		},
		refreshPartners : function(){
			var oL = this.getPartnersList(), aP = this.getProperties().partnerListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getPartnersList : function(){
			return this.getComponentByRID("partnersList").GetWideSelect();
		},
		prepareSavePartnersList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enablePartnerInformation) return;
			aP = this.getProperties().partnerListProp;
			o[aP] = [];
			var aPartners = this.getPartnersList().getItems();
			for(var i = 0; i < aPartners.length;i++) o[aP].push(aPartners[i].data);
		},
		
		addType : function(o){
			Hemi.log("Add person type: " + o.name );
			var b = false;
			
			return AM6Client.update("PERSON",o);
		},
		prepareSave : function(o){
			this.prepareSaveContactInformation(o);
			this.prepareSaveAccountsList(o);
			this.prepareSaveUsersList(o);
			this.prepareSavePersonsList(o);
			this.prepareSavePartnersList(o);
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Person.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Person";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getProperties().defaultPath) this.getProperties().defaultPath = "~/Persons";
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "PermissionPicker.xml">
<span>
	<div class="rocket-column-2" rid="permissionPicker" style="display:none;">
		<p rid="permissionPickerTitle">
			<span rid="permissionPickerToggle"/> <span rid="permissionPickerLabel">Permissions</span>:
		</p>
		<p rid="permissionPickerContent">
			<div component="wideselect" rid="permissionsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addPermission()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removePermission()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openPermission()"/>
		</p>
	</div>


	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getElementByRID("permissionPicker").style.display = "block";
			if(this.toggleField) this.toggleField("permissionPickerToggle","permissionPickerContent");
			if(!this.getProperties().permissionListProp) this.getProperties().permissionListProp = "permissions";
		},
		prepareSavePermissionPicker : function(o){
			this.prepareSavePermissionsList(o);
		},
		setPermissionPickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("permissionPickerLabel"),s);
		},
		initPermissionPicker : function(){
			/// Have to put a little extra logic here because permission information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enablePermissionInformation = (o != null ? 1 : 0);
			
			if(_s.enablePermissionInformation){
				//this.getProperties().permissionListProp = "permissions";
				this.getComponentByRID("permissionsList").setLoadHandler(this.scopeHandler("configPermissionsList",0,1,1));
			}
		},

		
		openPermission : function(){
			var oI = this.getPermissionsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Permission");
		},
		addPermission : function(){
			this.manageList("Permission", this.getPermissionsList().getObjectId());
		},
		removePermission : function(){
			var oI = this.getPermissionsList().getActiveItem();
			if(oI) this.getPermissionsList().clearItem(oI.index);
		},

		configPermissionsList : function(s,v){
			var oL = this.getPermissionsList(),_s = this.getProperties();
			if(!_s.enablePermissionInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshPermissions();
		},
		refreshPermissions : function(){
			var oL = this.getPermissionsList(), aP = this.getProperties().permissionListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getPermissionsList : function(){
			return this.getComponentByRID("permissionsList").GetWideSelect();
		},
		prepareSavePermissionsList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enablePermissionInformation) return;
			aP = this.getProperties().permissionListProp;
			o[aP] = [];
			var aPermissions = this.getPermissionsList().getItems();
			for(var i = 0; i < aPermissions.length;i++) o[aP].push(aPermissions[i].data);
		}
		
		
		
	]]></embedded-script>
</span></fragment><fragment id = "PermissionFields.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ParentPicker.xml']/span" src="${dwac.path}"/>

	<div class="rocket-column-2" rid="dataTypeContainer">
		<p>
			Type:
		</p>
		<p>
			<select rid="permissionType" bind="${bean.rocketType}">
			<option>UNKNOWN</option>
    		<option>DATA</option>
    		<option>GROUP</option>
    		<option>ROLE</option>
    		<option>ACCOUNT</option>
    		<option selected="true">USER</option>
    		<option>PERSON</option>
    		<option>OBJECT</option>
    		<option>APPLICATION</option>
			</select>
		</p>
	</div>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'SharingFrag.xml']/span" src="${dwac.path}"/>
	
	<div class="rocket-column-2" rid="permissionPicker" style="display:none;">
		<p rid="permissionPickerTitle">
			<span rid="permissionPickerToggle"/> <span rid="permissionPickerLabel">Permissions</span>:
		</p>
		<p rid="permissionPickerContent">

			<div component="wideselect" rid="permissionsList">
			</div>

			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addChildPermission()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeChildPermission()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openChildPermission()"/>
		</p>
	</div>
	
	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.getElementByRID("permissionPicker").style.display = "block";
			this.toggleField("permissionPickerToggle","permissionPickerContent");

			this.getElementByRID("pathCont").style.display = "none";
			this.getComponentByRID("permissionsList").setLoadHandler(this.scopeHandler("configPermissionsList",0,1,1));
		},
		
		openChildPermission : function(){
			var oI = this.getPermissionsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Permission");
		},
		addChildPermission : function(){
			this.manageList("Permission", this.getPermissionsList().getObjectId());
		},
		removeChildPermission : function(){
			var oI = this.getPermissionsList().getActiveItem();
			if(oI){
				this.getPermissionsList().clearItem(oI.index);
			}
		},
		configPermissionsList : function(s,v){
			var o = this.getBean("rocketType");
			var oL = this.getPermissionsList();
			oL.getContainer().style.height = "50px";
			oL.getContainer().style.width = "150px";
			this.refreshPermissions();
		},
		refreshPermissions : function(a){
			var oL = this.getPermissionsList();
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || o == null || o.id <= 0) return;
			var aL = AM6Client.list("PERMISSION",o.objectId,0,0);
			for(var i = 0; i < aL.length;i++){
				oL.addItem(aL[i].name + " " + aL[i].permissionType,aL[i]);
			}
		},
		getPermissionsList : function(){
			return this.getComponentByRID("permissionsList").GetWideSelect();
		},
		embedded_destroy : function(){
		},
		
		addType : function(o){
			Hemi.log("Add permission type: " + o.name + ":" + o.permissionType);

			return AM6Client.update("PERMISSION",o);
		},
		
		prepareSave : function(o){

			return 1;
		}
	
	]]></embedded-script>
</span></fragment><fragment id = "Permission.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Permission";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			this.getProperties().populate = 0;
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
					o.parentId = (this.getProperties().parentRef ? this.getProperties().parentRef.id : 0);
				}
				else if(o.parentId > 0){
					this.getProperties().defaultPath = o.parentPath;
				}
				delete this.getProperties().parentRef;
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "PatternFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Score:
		</p>
		<p>
			<input type="text" rid="score" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
		<select rid="patternType" onchange="${this}.chooseType()" bind="${bean.rocketType}">
			<option>UNKNOWN</option>
			<option>PARAMETER</option>
			<option>FUNCTION</option>
			<option>OPERATION</option>
			<option>EXPRESSION</option>
			<option>AUTHORIZATION</option>
			<option>APPROVAL</option>
			<option>SEPARATION_OF_DUTY</option>
			</select>
    	</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'OperationPickerSingle.xml']/span" src="${dwac.path}"/>
	<!-- 
	<div class = "rocket-column-2" rid = "operationContainer" style = "display:none;">
		<p>
			Operation:
		</p>
		<p>
			<input type = "text"  rid = "operationUrn" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
		-->
		<div class="rocket-column-2">
		<p>
			Fact:
		</p>
		<p>
			<input type="text" disable="true" rid="fact" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseFact()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickFact('Fact')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openFact()"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Comparator:
		</p>
		<p>
		<select rid="comparator" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>EQUALS</option>
    		<option>NOT_EQUALS</option>
    		<option>BETWEEN</option>
    		<option>LESS_THAN</option>
    		<option>LESS_THAN_OR_EQUALS</option>
    		<option>GREATER_THAN</option>
    		<option>GREATER_THAN_OR_EQUALS</option>
    		<option>NOT_IN</option>
    		<option>IN</option>
    		<option>NOT_NULL</option>
    		<option>IS_NULL</option>
    		<option>IS_NULL_EQUALS</option>
    		<option>IS_NULL_NOT_EQUALS</option>
    		<option>LIKE</option>
    		<option>GROUP_AND</option>
    		<option>GROUP_OR</option>
    		</select>
    				</p>
	</div>
		<div class="rocket-column-2">
		<p>
			Match:
		</p>
		<p>
			<input type="text" disable="true" rid="match" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseMatch()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickMatch('Match')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openMatch()"/>
		</p>
	</div>
	
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().factProp) this.getProperties().factProp = "fact";
		if(!this.getProperties().matchProp) this.getProperties().matchProp = "match";
		if(!this.getProperties().operationProp) this.getProperties().operationProp = "operationUrn";
		var o = this.getBean("rocketType");
		this.pickFact('Fact',o.fact);
		this.pickMatch('Match',o.match);
		this.pickOperation('Operation',o.operationUrn);
		this.chooseType();
	},
	chooseType : function(){
		var sT = this.getElementByRID("patternType").value;
		this.getElementByRID("operationContainer").style.display = (sT.match(/^operation$/gi) ? "block" : "none");
	},
	chooseFact : function(){
		this.manageList("Fact", this.getObjectId(),"pickFact");
	},

	openFact : function(){
		var o = this.getBean("rocketType"), aP = this.getProperties().factProp;
		if(o && o[aP] && this.openItem) this.openItem(o[aP],"Fact");
	},
	pickFact : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().factProp] = v;
		this.getElementByRID("fact").value = (v ? v.name : "");
	},
chooseMatch : function(){
		this.manageList("Fact", this.getObjectId(),"pickMatch");
	},

		openMatch : function(){
			var o = this.getBean("rocketType"), aP = this.getProperties().matchProp;
			if(o && o[aP] && this.openItem) this.openItem(o[aP],"Fact");
		},
	pickMatch : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().matchProp] = v;
		this.getElementByRID("match").value = (v ? v.name : "");
	},
	addType : function(o){
			Hemi.log("Add pattern type: " + o.name + ":" + o.patternType);
			return AM6Client.update(o.nameType,o);
		},
		prepareSave : function(o){
			o.matchUrn = (o.match ? o.match.urn : 0);
			o.factUrn = (o.fact ? o.fact.urn : 0);
			return 1;
		}
	]]></embedded-script>
	</span></fragment><fragment id = "Pattern.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Pattern";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName,"~/Patterns");
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ParentPicker.xml">
<span>

	<div rid="parentPickerCont" class="rocket-column-2">
		<p rid="parentPickerLabel">
			Parent:
		</p>
		<p>
			<input type="text" disable="true" rid="parent" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseParent()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickParent(${this}.getProperties().typeName)"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openParent()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		var o = this.getBean("rocketType");
		if(!this.getProperties().hideParent){
			var oP;
			if(o.parentId > 0) oP = AM6Client.get(this.getProperties().typeName.toUpperCase(),o.parentId);
			this.pickParent(this.getProperties().typeName,oP);
		}
		else{
			this.getElementByRID("parentPickerCont").style.display = "none";
		}
	},
	chooseParent : function(){
		this.manageList( this.getProperties().typeName, this.getObjectId(),"pickParent");
	},

		openParent : function(){
			var o = this.getBean("rocketType"),oP;
			if(o && o.parentId && this.openItem){
				oP =AM6Client.get(this.getProperties().typeName.toUpperCase(),o.parentId);
				this.openItem(oP,this.getProperties().typeName);
			}
		},
	pickParent : function(s, v){
		var o = this.getBean("rocketType");
		if(o.id > 0 && v && v.id > 0 && v.id == o.id){
			Hemi.logError(o.id + " cannot be set to its own parent");
			if(this.setStatus) this.setStatus("Object #" + o.id + " cannot be set to its own parent");
			return;
		}
		o.parentId = (v ? v.id : 0);
		this.getElementByRID("parent").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "OrganizationPickerIn.xml">
<span>
	<select onchange="${this}.chooseOrg()" rid="organization">
		<option value="/Public">Public</option>
		<option value="/Accelerant/Rocket" selected="true">Rocket</option>
		<option value="custom">Custom</option>
	</select>
	<input style="display:none;" type="text" placeholder="/Public" class="rocket-text rocket-text-short" rid="organization_path"/>
	<embedded-script><![CDATA[
		chooseOrg : function(sV){
			if(!sV || typeof sV != "string") sV = this.getElementByRID("organization").value;
			else this.getElementByRID("organization").value = sV;
			this.getElementByRID('organization_path').style.display = (sV == 'custom' ? 'inline' : 'none');
		},
		getOrgPath : function(){
			var sOrg = this.getElementByRID("organization").value;
			if(sOrg == 'custom'){
				var op = this.getElementByRID("organization_path");
				sOrg = op.value;
				if(sOrg.length == 0 && op.placeholder) sOrg = op.placeholder;
			}
			return sOrg;
		}
	]]></embedded-script>
</span></fragment><fragment id = "OrganizationPicker.xml">
<span>
	<div class="uwm-field-container">
		<label>
			Organization:
		</label>
			<select onchange="${this}.chooseOrg()" rid="organization">
				<option value="/Public">Public</option>
				<option value="/Accelerant/Rocket">Rocket</option>
				<option value="custom">Custom</option>
			</select>
	</div>
	<div style="display:none;" rid="orgPathCont" class="uwm-field-container">
		<label>Path:</label>
		<input type="text" class="input_text" rid="organization_path"/>
	</div>
	<embedded-script><![CDATA[
		chooseOrg : function(sV){
			if(!sV || typeof sV != "string") sV = this.getElementByRID("organization").value;
			else this.getElementByRID("organization").value = sV;
			this.getElementByRID('orgPathCont').style.display = (sV == 'custom' ? 'block' : 'none');
		},
		getOrgPath : function(){
			var sOrg = this.getElementByRID("organization").value;
			if(sOrg == 'custom'){
				sOrg = this.getElementByRID("organization_path").value;
			}
			return sOrg;
		}
	]]></embedded-script>
</span></fragment><fragment id = "OperationPickerSingle.xml">
<span>
	<div class="rocket-column-2" rid="operationContainer">
		<p>
			Operation:
		</p>
		<p>
			<input type="text" disable="true" rid="operationUrn" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseOperation()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickOperation('Operation')"/>
	<!--
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openOperation()" />
   -->
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().operationProp){
			this.getProperties().operationProp = "operationUrn";
			
		}
		this.getProperties().operationAttributeProp = "urn";
	},
	chooseOperation : function(){
		this.manageList("Operation", this.getObjectId(),"pickOperation");
	},

		openOperation : function(){
			var o = this.getBean("rocketType");
			if(o && o[this.getProperties().operationProp] && this.openItem) this.openItem(o[this.getProperties().operationProp],"Operation");
		},
	pickOperation : function(s, v){
		var o = this.getBean("rocketType"), _s = this.getProperties();
		o[_s.operationProp] = (typeof v == "object" && _s.operationAttributeProp ? v[_s.operationAttributeProp] : v);
		this.getElementByRID("operationUrn").value = (v && typeof v == "object" ? v.urn : (v ? v : ""));
	}
	]]></embedded-script>
</span></fragment><fragment id = "OperationFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Score:
		</p>
		<p>
			<input type="text" rid="score" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
		<select rid="operationType" onchange="${this}.chooseType()" bind="${bean.rocketType}">
			<option>UNKNOWN</option>
			<option>NAMED</option>
			<option>PERMISSION</option>
			<option>FUNCTION</option>
			<option>INTERNAL</option>
			</select>
    	</p>
	</div>
	<div class="rocket-column-2" rid="operationContainer">
		<p>
			Operation:
		</p>
		<p>
			<input type="text" rid="operation" bind="${bean.rocketType}" class="rocket-text"/>
			<input rid="btnFind" style="display:none;" type="button" class="rocket-button" value="..." onclick="${this}.findType()"/>
		</p>
	</div>
	
	
	<embedded-script><![CDATA[
	embedded_init : function(){
		this.chooseType(1);
	},
	chooseType : function(b){
		var s = this.getElementByRID("operationType").value.match(/^(permission|function)$/gi);
		this.getElementByRID("operation").className = "rocket-text" + (s ? " rocket-text-short" : "");
		this.getElementByRID("btnFind").style.display = (s ? "" : "none");
		if(!b) this.getElementByRID("operation").value = "";
	},
		findType : function(){
			var sFType = this.getElementByRID("operationType").value;
			this.manageList(sFType.substring(0,1) + sFType.substring(1,sFType.length).toLowerCase(),0,"pickType");
		},
		pickType : function(t, o){
			this.importType(o);
			
		},

		importType : function(oBean){
			o = this.getBean("rocketType");
			var _s = this.getProperties();
			if(!oBean.id || !oBean.nameType.match(/^(permission|function)$/gi)){
				Hemi.logError("Unsupported fact import type " + oBean.nameType + " #" + oBean.id);
				return;
			}
			
			this.getElementByRID("operation").value = oBean.urn;
			
		},
	addType : function(o){
			Hemi.log("Add operation type: " + o.name + ":" + o.operationType);
			return AM6Client.update(o.nameType, o);
		},
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
	</span></fragment><fragment id = "Operation.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Operation";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName,"~/Operations");
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "NotePickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Note:
		</p>
		<p>
			<input type="text" disable="true" rid="note" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseNote()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickNote('Note')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openNote()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		var o = this.getBean("rocketType");
		this.pickNote('Note',o.note);
	},
	chooseNote : function(){
		this.manageList("Note", this.getObjectId(),"pickNote");
	},

		openNote : function(){
			var o = this.getBean("rocketType");
			if(o && o.note && this.openItem) this.openItem(o.note,"Note");
		},
	pickNote : function(s, v){
		var o = this.getBean("rocketType");
		o.note = v;
		this.getElementByRID("note").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "NotePicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			<span rid="notePickerToggle"/> Notes:
		</p>
		<p rid="notePickerContent">
			<div component="wideselect" rid="notesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addNote()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeNote()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openNote()"/>
		</p>
	</div>
<embedded-script><![CDATA[
	embedded_init : function(){
		this.toggleField("notePickerToggle","notePickerContent");
		if(!this.getProperties().noteListProp) this.getProperties().noteListProp = "notes";
	},
	openNote : function(){
		var oI = this.getNotesList().getActiveItem();
		if(oI && oI.data && this.openItem) this.openItem(oI.data,"Note");
	},
	addNote : function(){
		this.manageList("Note", this.getNotesList().getObjectId());
	},
	removeNote : function(){
		var oI = this.getNotesList().getActiveItem();
		if(oI) this.getNotesList().clearItem(oI.index);
	},

	configNotesList : function(s,v){
		var oL = this.getNotesList();
		oL.getContainer().className = "rocket-wideselect-container";
		this.refreshNotes();
	},
	refreshNotes : function(){
		var oL = this.getNotesList(),aP=this.getProperties().noteListProp;
		oL.clearItems();
		var o = this.getBean("rocketType");
		if(!o || !o[aP]) return;
		for(var i = 0; i < o[aP].length;i++){
			oL.addItem(o[aP][i].name,o[aP][i]);
		}
	},
	getNotesList : function(){
		return this.getComponentByRID("notesList").GetWideSelect();
	},
		prepareSaveNotesList : function(o){
			aP = this.getProperties().noteListProp;
			o[aP] = [];
			var aNotes = this.getNotesList().getItems();
			for(var i = 0; i < aNotes.length;i++) o[aP].push(aNotes[i].data);
		}
]]></embedded-script>
</span></fragment><fragment id = "NoteFields.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ParentPicker.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			Text:
		</p>
		<p>
			<textarea rid="text" onfocus="${this}.showTextFloat()" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Created:
		</p>
		<p>
			<input type="date" disabled="true" rid="createdDate" bind="${bean.rocketType}" class="rocket-text rocket-text-readonly"/>
		</p>
	</div>
		<div class="rocket-column-2">
		<p>
			Modified:
		</p>
		<p>
			<input type="date" disabled="true" rid="modifiedDate" bind="${bean.rocketType}" class="rocket-text rocket-text-readonly"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Child Notes:
		</p>
		<p>
			<div component="wideselect" rid="notesList">
			</div>

			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addChildNote()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeChildNote()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openChildNote()"/>
		</p>
	</div>
	<textarea rid="textNoteFloat" style="z-index:250;display:none;position:absolute;top:0px;left:0px;width:250px;height:250px;" onblur="${this}.hideTextFloat()"/>
	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.getComponentByRID("notesList").setLoadHandler(this.scopeHandler("configNotesList",0,1,1));
		},
		resizers : function(){
			this.getElementByRID("textNoteFloat").style.height = (this.getContainer().clientHeight - (this.getObjects().title_bar.offsetHeight + this.getObjects().status_bar.offsetHeight)) + "px";
			this.getElementByRID("textNoteFloat").style.width = "100%";
		},
		showTextFloat : function(){
			this.getElementByRID("textNoteFloat").style.top = (this.getObjects().title_bar ? this.getObjects().title_bar.offsetHeight + "px" : "0px");
			// (this.getBody ? this.getBody().offsetTop + "px" : "0px");
			// 
			this.getElementByRID("textNoteFloat").style.display = "block";
			this.getElementByRID("textNoteFloat").value = this.getElementByRID("text").value;
			this.getElementByRID("textNoteFloat").focus();
			this.resizers();
			
		},
		hideTextFloat : function(){
			this.getElementByRID("textNoteFloat").style.display = "none";
			this.getElementByRID("text").value = this.getElementByRID("textNoteFloat").value;
		},
		openChildNote : function(){
			var oI = this.getNotesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Note");
		},
		addChildNote : function(){
			this.manageList("Note", this.getNotesList().getObjectId());
		},
		removeChildNote : function(){
			var oI = this.getNotesList().getActiveItem();
			if(oI){
				this.getNotesList().clearItem(oI.index);
			}
		},
		configNotesList : function(s,v){
			var o = this.getBean("rocketType");
			var oL = this.getNotesList();
			oL.getContainer().style.height = "50px";
			oL.getContainer().style.width = "150px";
			this.refreshNotes();
		},
		refreshNotes : function(a){
			var oL = this.getNotesList();
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o.childNotes) return;
			for(var i = 0; i < o.childNotes.length;i++){
				oL.addItem(o.childNotes[i].name,o.childNotes[i]);
			}
		},
		getNotesList : function(){
			return this.getComponentByRID("notesList").GetWideSelect();
		},
		updateChildNotes : function(o){
			var aI = this.getNotesList().getItems();
			var a = [];
			var iUp = 0;
			for(var i = 0; i < o.childNotes.length; i++) a[o.childNotes[i].id] = o.childNotes[i];
			for(var i = 0; i < aI.length;i++){
				var oI = aI[i].data;
				if(!oI) continue;
				/// Skip existing
				if(a[oI.id]){
					a[oI.id] = 0;
					continue;
				}
				/// Set oI parent to note
				oI.parentId = o.id;
				AM6Client.update("NOTE",oI);
				iUp++;
			}
			for(var i = 0; i < a.length;i++){
				if(typeof a[i]=="object"){
					AM6Client.delete("NOTE",a[i].objectId);
					//rocket.deleteNote(a[i]);
					iUp++;
				}
			}
			//if(iUp > 0) rocket.flushNotes();
			
		},
		addType : function(o){
			Hemi.log("Add note type: " + o.name + ":" + o.text);
			var b =  AM6Client.update("NOTE",o),x;
			if(b){
				x = AM6Client.getByName("NOTE",AM6Client.find("GROUP","DATA",this.getPath()).objectId,o.name);
				this.updateChildNotes(x);
			}
			if(x) AM6Client.clearCache(x);
			return b; 
		},
		prepareSave : function(o){
			this.getElementByRID("text").className = "rocket-text";
			if(!this.validateForPattern("text","not-empty")){
				this.getElementByRID("text").className = "rocket-text rocket-text-error";
				this.setStatus("Text cannot be empty");
				return 0;
			}
			if(o.id){
				this.updateChildNotes(o);
				AM6Client.clearCache(o);
			}
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Note.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Note";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ModulePicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="modulePickerTitle">
			<span rid="modulePickerToggle"/> Modules:
		</p>
		<p rid="modulePickerContent">
			<div component="wideselect" rid="modulesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addModule()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeModule()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openModule()"/>

		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		this.toggleField("modulePickerToggle","modulePickerContent");
		if(!this.getProperties().moduleListProp) this.getProperties().moduleListProp = "modules";
	},
	openModule : function(){
		var oI = this.getModulesList().getActiveItem();
		if(oI && oI.data && this.openItem) this.openItem(oI.data,"Module");
	},
	
	addModule : function(){
			this.manageList("Module", this.getModulesList().getObjectId());
		},
		removeModule : function(){
			var oI = this.getModulesList().getActiveItem();
			if(oI) this.getModulesList().clearItem(oI.index);
		},

		configModulesList : function(s,v){
			var oL = this.getModulesList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshModules();
		},
		refreshModules : function(){
			var oL = this.getModulesList(), aP = this.getProperties().moduleListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getModulesList : function(){
			return this.getComponentByRID("modulesList").GetWideSelect();
		},
		prepareSaveModulesList : function(o){
			aP = this.getProperties().moduleListProp;
			o[aP] = [];
			var aModules = this.getModulesList().getItems();
			for(var i = 0; i < aModules.length;i++) o[aP].push(aModules[i].data);
		}
	
	]]></embedded-script>
</span></fragment><fragment id = "ModuleFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid="moduleType" bind="${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>ASSEMBLY</option>
				<option>SCRAP</option>
				<option>COMPONENT</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'TimePickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'CostPickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ArtifactPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'WorkPicker.xml']/span" src="${dwac.path}"/>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getProperties().artifactListProp = "artifacts";
			this.getProperties().workListProp = "work";
			
			this.getComponentByRID("artifactsList").setLoadHandler(this.scopeHandler("configArtifactsList",0,1,1));
			this.getComponentByRID("worksList").setLoadHandler(this.scopeHandler("configWorksList",0,1,1));
		
			var o = this.getBean("rocketType");
			this.getProperties().timeProp = "actualTime";
			this.getProperties().costProp = "actualCost";

			this.pickTime('Time',o.actualTime);
			this.pickCost('Cost',o.actualCost);
		},

		
		addType : function(o){
			Hemi.log("Add Module type: " + o.name + ":" + o.text);
			return AM6Client.update("MODULE",o);
		},
		
		prepareSave : function(o){
		
			this.prepareSaveArtifactsList(o);
			this.prepareSaveWorksList(o);

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Module.xml">
<Template>
	<!--
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<import-xml src = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/BaseType.xml" id = "BaseType" />
	<p>
	</p>
	-->
	<p>Note Base</p>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Module";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ModelPicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="modelPickerTitle">
			<span rid="modelPickerToggle"/> Models:
		</p>
		<p rid="modelPickerContent">
			<div component="wideselect" rid="modelsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addModel()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeModel()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openModel()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("modelPickerToggle","modelPickerContent");
			if(!this.getProperties().modelListProp) this.getProperties().modelListProp = "models";
		},
		openModel : function(){
			var oI = this.getModelsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Model");
		},
		addModel : function(){
			this.manageList("Model", this.getModelsList().getObjectId());
		},
		removeModel : function(){
			var oI = this.getModelsList().getActiveItem();
			if(oI) this.getModelsList().clearItem(oI.index);
		},

		configModelsList : function(s,v){
			var oL = this.getModelsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshModels();
		},
		refreshModels : function(){
			var oL = this.getModelsList(), aP = this.getProperties().modelListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getModelsList : function(){
			return this.getComponentByRID("modelsList").GetWideSelect();
		},
		prepareSaveModelsList : function(o){
			aP = this.getProperties().modelListProp;
			o[aP] = [];
			var aModels = this.getModelsList().getItems();
			for(var i = 0; i < aModels.length;i++) o[aP].push(aModels[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "ModelFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'CasePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'RequirementPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DependencyPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ArtifactPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ModelPicker.xml']/span" src="${dwac.path}"/>
	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.getProperties().caseListProp = "cases";
			this.getProperties().dependencyListProp = "dependencies";
			this.getProperties().artifactListProp = "artifacts";
			this.getProperties().modelListProp = "models";
			this.getProperties().requirementListProp = "requirements";
			
			this.getComponentByRID("requirementsList").setLoadHandler(this.scopeHandler("configRequirementsList",0,1,1));
			this.getComponentByRID("casesList").setLoadHandler(this.scopeHandler("configCasesList",0,1,1));
			this.getComponentByRID("dependenciesList").setLoadHandler(this.scopeHandler("configDependenciesList",0,1,1));
			this.getComponentByRID("artifactsList").setLoadHandler(this.scopeHandler("configArtifactsList",0,1,1));
			this.getComponentByRID("modelsList").setLoadHandler(this.scopeHandler("configModelsList",0,1,1));
		},
	
		addType : function(o){
			return AM6Client.update("MODEL",o);
		},
		prepareSave : function(o){
			this.getElementByRID("endTime").className = "rocket-text";
			o.cases = [];
			var aCases = this.getCasesList().getItems();
			for(var i = 0; i < aCases.length;i++) o.cases.push(aCases[i].data);

			o.requirements = [];
			var aRequirements = this.getRequirementsList().getItems();
			for(var i = 0; i < aRequirements.length;i++) o.requirements.push(aRequirements[i].data);
			
			o.dependencies = [];
			var aDependencies = this.getDependenciesList().getItems();
			for(var i = 0; i < aDependencies.length;i++) o.dependencies.push(aDependencies[i].data);
			
			o.artifacts = [];
			var aArtifacts = this.getArtifactsList().getItems();
			for(var i = 0; i < aArtifacts.length;i++) o.artifacts.push(aArtifacts[i].data);
			
			o.models = [];
			var aModels = this.getModelsList().getItems();
			for(var i = 0; i < aModels.length;i++) o.models.push(aModels[i].data);

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Model.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Model";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "MethodologyPickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Methodology:
		</p>
		<p>
			<input type="text" disable="true" rid="methodology" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseMethodology()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickMethodology('Methodology')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openMethodology()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().methodologyProp){
			this.getProperties().methodologyProp = "methodology";
		}
		var o = this.getBean("rocketType");
		this.pickMethodology('Methodology',o[this.getProperties().methodologyProp]);

	},
	chooseMethodology : function(){
		this.manageList("Methodology", this.getObjectId(),"pickMethodology");
	},

		openMethodology : function(){
			var o = this.getBean("rocketType");
			if(o && o[this.getProperties().methodologyProp] && this.openItem) this.openItem(o[this.getProperties().methodologyProp],"Methodology");
		},
	pickMethodology : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().methodologyProp] = v;
		this.getElementByRID("methodology").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "MethodologyFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ProcessPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BudgetPicker.xml']/span" src="${dwac.path}"/>
	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.getProperties().processListProp = "processes";
			this.getProperties().budgetListProp = "budgets";
			this.getComponentByRID("processesList").setLoadHandler(this.scopeHandler("configProcessesList",0,1,1));
			this.getComponentByRID("budgetsList").setLoadHandler(this.scopeHandler("configBudgetsList",0,1,1));
		},
		
		addType : function(o){
			return AM6Client.update("METHODOLOGY",o);
		},
		prepareSave : function(o){
			this.getElementByRID("endTime").className = "rocket-text";
			this.prepareSaveProcessesList(o);
			this.prepareSaveBudgetsList(o);
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Methodology.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Methodology";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "MainProject.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<div class="rocket-column-2" style="display:none;">
		<p>
			Location:
		</p>
		<p>
			<input type="text" placeholder="~/" rid="path" class="rocket-text"/>
		</p>
	</div>
	<div style="display:none;" rid="lifecycleNameCont" class="rocket-column-2">
		<p>
			Lifecycle:
		</p>
		<p>
			<input type="text" rid="lifecycleName" class="rocket-text"/>
		</p>
	</div>
	
	<div style="display:none;" rid="projectNameCont" class="rocket-column-2">
		<p>
			Project Name:
		</p>
		<p>
			<input type="text" rid="projectName" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Methodology:
		</p>
		<p>
			<select rid="method" onchange="${this}.setupMethodology()">
				<option selected="true">Pick Project Methodology</option>
				<option value="wf">Waterfall</option>
				<option value="ag">Agile</option>
				<option value="custom">Custom</option>
			</select>
		</p>
	</div>

	<div class="rocket-column-2" style="display:none;" rid="addStageCont">
		<p>
			Options:
		</p>
		<p>
			<input type="button" onclick="${this}.addStage()" value="Add Stage"/>
		</p>
	</div>
	
	<div rid="stages"/>
	
	<div><input type="button" onclick="${this}.DoLogout()" value="Logout"/></div>
	<embedded-script>
		<![CDATA[
			/// Simplified Project View
			/// 
			
			
			/*
				Move the Stage/Work/Story table into a separate import to support multiple stages
			*/
			template_init: function(){
				this.getObjects().stages = [];
				this.getObjects().stageTrash = {};
				this.getObjects().taskRows = [];
				this.getObjects().taskTrash = {};
				this.getProperties().rowCount = 0;
				this.getProperties().stageCount = 0;
				this.getProperties().elementNames = ["rowNum","name","end","estimate","dependencies","resources"];
				//this.getObjects().methodology = 0;
				//this.getObjects().process = 0;
				this.scopeHandler("project_picker_open",0,0,1);
				this.scopeHandler("project_picker_choose",0,0,1);
				
				/*
				this.getElementByRID("estimate-row1").onkeydown = function(e){
					Hemi.event.cancelEvent(e);
					return false;
				};
				*/
				//this.addStage();
				if(!this.getProperties().defaultPath) this.getProperties().defaultPath = "~/";
				this.getElementByRID("path").setAttribute("placeholder",this.getProperties().defaultPath);
			},
			template_destroy : function(){
				this._prehandle_project_picker_open = 0;
				this._prehandle_project_picker_choose = 0;
			},
			getPath : function(){
				var sP = this.getElementByRID("path").value;
				if(sP.length == 0) sP = this.getProperties().defaultPath;
				return sP;
			},
			setupMethodology : function(){
				var sV = this.getElementByRID("method").value;
				if(sV.match(/(wf|ag|custom)/gi) == false) return;
				
				if(sV == "wf"){
					var oMGroup = AM6Client.make("GROUP","DATA",this.getPath() + "Methodologies");
					var oPGroup = AM6Client.make("GROUP","DATA",this.getPath() + "Processes");
					var oPSGroup = AM6Client.make("GROUP","DATA",this.getPath() + "ProcessSteps");
					
					var oM = rocket.getMethodology("Waterfall",oMGroup);
					if(!oM){
						rocket.addProcessStep("Waterfall - Design","Waterfall design",1,0,0,0,oPSGroup);
						rocket.addProcessStep("Waterfall - Gather Requirements","Waterfall gather requirements",2,0,0,0,oPSGroup);
						rocket.addProcessStep("Waterfall - Implementation","Waterfall implementation",3,0,0,0,oPSGroup);
						rocket.addProcessStep("Waterfall - Maintenance","Waterfall maintenance",4,0,0,0,oPSGroup);
						rocket.addProcessStep("Waterfall - Verification","Waterfall verification",5,0,0,0,oPSGroup);
						rocket.addProcess("Waterfall", "Standard waterfall process", 1, 0, [rocket.getProcessStep("Waterfall - Design",oPSGroup),rocket.getProcessStep("Waterfall - Gather Requirements",oPSGroup),rocket.getProcessStep("Waterfall - Implementation",oPSGroup),rocket.getProcessStep("Waterfall - Maintenance",oPSGroup),rocket.getProcessStep("Waterfall - Verification",oPSGroup)], 0, oPGroup);
						rocket.addMethodology("Waterfall","Waterfall project methodology",[rocket.getProcess("Waterfall",oPGroup)],0,oMGroup);
					}
					var oP = rocket.getProcess("Waterfall",oPGroup);
					this.getElementByRID("projectName").value = "Waterfall Project";
					for(var i = 0; i < oP.steps.length;i++){
						this.addStage();
						this.getElementByRID(this.getStageIdPrefix(i+1) + "name").value = oP.steps[i].name;
					}
					/*
					this.getObjects().methodology = oM;
					this.getObjects().process = oP;
					*/
					
				}
				
				var oGroup = AM6Client.make("GROUP","DATA",this.getPath() + "Times");
				var aTimes = rocket.listTimes(this.getPath() + "Times",0,0);
				var vH = {};
				for(var i = 0; i < aTimes.length;i++){
					vH[aTimes[i].name]=1;
				}
				
				this.getElementByRID("projectNameCont").style.display = "block";
				
			},
			getStageTemplate : function(){
				/*
				var aBuff = [];
				aBuff.push("<div style = \"clear:both;\" class = \"uwm-content uwm-box-border\">");
				aBuff.push("<div class = \"rocket-column-2\"><p>Order:</p><p><input disabled = \"true\" value = \"1\" class = \"rocket-text\" type = \"text\" style = \"width: 25px !important; border-width: 0px !important;\" rid = \"${id}stageNum\" /></p></div>");
				aBuff.push("<div class = \"rocket-column-2\"><p>Name:</p><p><input type = \"text\" rid = \"${id}name\" class = \"rocket-text\" /></p></div>");
				aBuff.push("<div class = \"rocket-column-2\"><p>Date:</p><p><input class = \"rocket-text\" type = \"text\" component = \"calendar\" style = \"width: 75px !important;\" rid = \"${id}start\" /><input class = \"rocket-text\" type = \"text\" component = \"calendar\" style = \"width: 75px !important;\" rid = \"${id}end\" /></p></div>");
				//aBuff.push("<div class = \"rocket-column-2\"><p>End:</p><p><input class = \"rocket-text\" type = \"text\" component = \"calendar\" style = \"width: 75px !important;\" rid = \"${id}end\" /></p></div>");
				//aBuff.push("<div class = \"rocket-column-2\"><p>Description:</p><p><input type = \"text\" rid = \"${id}description\" class = \"rocket-text\" /></p></div>");

				aBuff.push("<div style = \"clear:both;\"><table cellpadding = \"0\" margin = \"0\" cellspacing = \"0\"><thead><tr><th></th><th>Name</th><th>Estimate</th><th>Due</th><th>Dependencies</th><th>Resources</th><th></th></tr></thead><tbody rid = \"${id}rows\"></tbody></table></div>");
				aBuff.push("<div style = \"clear:both;\"><input type = \"button\" onclick = \"${this}.addRow(${stageNum})\" value = \"Add Row\" /><input type = \"button\" value = \"Delete Stage\" onclick = \"${this}.deleteStage(${stageNum})\" /></div>");
				aBuff.push("</div>");
				return aBuff.join("");
				*/
				return Hemi.xml.getText("/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/Templates/ProjectStageSection.xml",0,0,"ProjectStageSection",1);
			},
			getRowTemplate : function(){
				/*
				var aRowBuff = [];	
				aRowBuff.push("<tr><td rid = \"${id}rowNumCell\">");
				aRowBuff.push("<input disabled = \"true\" value = \"1\" class = \"rocket-text\" type = \"text\" style = \"width: 25px !important; border-width: 0px !important;\" rid = \"${id}rowNum\" />");
				aRowBuff.push("</td><td>");
				aRowBuff.push("<input class = \"rocket-text\" type = \"text\" style = \"width: 125px !important;\" rid = \"${id}name\" />");
				aRowBuff.push("</td><td>");
				aRowBuff.push("<input onclick = \"${this}.chooseEstimate(${stageNum},${rowNum})\" type = \"text\" rid = \"${id}estimate\" style = \"width: 100px !important;\" class = \"rocket-text\" />");
				aRowBuff.push("</td><td>");

				aRowBuff.push("<input class = \"rocket-text\" type = \"text\" component = \"calendar\" style = \"width: 75px !important;\" rid = \"${id}end\" />");
				aRowBuff.push("</td><td>");
				aRowBuff.push("<input class = \"rocket-text\" type = \"text\" style = \"width: 75px !important;\" rid = \"${id}dependencies\" />");
				aRowBuff.push("</td><td>");
				aRowBuff.push("<input class = \"rocket-text\" type = \"text\" style = \"width: 100px !important;\" rid = \"${id}resources\" />");
				aRowBuff.push("</td><td><input type = \"button\" value = \"X\" onclick = \"${this}.deleteRow(${stageNum},${rowNum})\" /></td></tr>");
				return aRowBuff.join("");
				*/
				return Hemi.xml.getText("/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/Templates/ProjectRowSection.xml",0,0,"ProjectRowSection",1);
			},
			getStageIdPrefix : function(i){
				return ("Stage-" + Hemi.text.pad(i,10) + "-"); 
			},
			getRowIdPrefix : function(s,i){
				return this.getStageIdPrefix(s) + ("Row-" + Hemi.text.pad(i,10) + "-"); 
			},
			deleteRow : function(s,i){
				var o = this.getTaskAtRow(s,i),p = this.getProperties(),udef;
				if(o.id > 0){
					this.getObjects().taskTrash[o.id] = o;
				}
				this.getObjects().taskRows[i] = udef;
				var oXForm = this.getForm();
				var sId = this.getRowIdPrefix(s,i);
			   	for(var i = 0; i < p.elementNames.length; i++){
					oXForm.removeElement(oXForm.getElementByName(sId + p.elementNames[i]));
				}
				Hemi.log("Delete Row: " + sId);
				var oRow = this.getElementByRID(sId + "rowNumCell").parentNode;
				if(oRow){
					/// Remove and unlink node and all framework objects;
					Hemi.xml.removeChildren(oRow, 1);
					Hemi.xml.removeChild(oRow,oRow.parentNode,1);
				}
				else{
					Hemi.logError("Row " + sId + " not found");
				}
			},
			deleteStage : function(i){
				var o = this.getStage(s),p = this.getProperties(),udef;
				if(o.id > 0){
					this.getObjects().stageTrash[o.id] = o;
				}
				this.getObjects().stages[i] = udef;
				var oXForm = this.getForm();
				var sId = this.getRowIdPrefix(s,i);
				alert('TODO: Delete or move tasks');
				/*
			   	for(var i = 0; i < p.elementNames.length; i++){
					oXForm.removeElement(oXForm.getElementByName(sId + p.elementNames[i]));
				}
				Hemi.log("Delete Row: " + sId);
				var oRow = this.getElementByRID(sId + "rowNumCell").parentNode;
				if(oRow){
					/// Remove and unlink node and all framework objects;
					Hemi.xml.removeChildren(oRow, 1);
					Hemi.xml.removeChild(oRow,oRow.parentNode,1);
				}
				else{
					Hemi.logError("Row " + sId + " not found");
				}
				*/
			},
			addStage : function(){
				var p = this.getProperties();
				var sId = this.getStageIdPrefix(p.stageCount+1);
				p.stageCount++;
				var sT = this.getStageTemplate().replace(/\${id}/gi,sId);
				sT = sT.replace(/\${stageNum}/gi,p.stageCount);
   				var sB =  sT;
   				//alert(sT);
				var oX = Hemi.xml.parseXmlDocument(sB);
			   	if(!oX || !oX.documentElement){
			   		alert("Invalid XML from:\n\n" + sB);
			   		return;
			   	}
			   	//Hemi.xml.setInnerXHTML(this.getElementByRID("rows"), oX.documentElement,1, 0, 0, 0, 0, this._handle_xhtml_token);
			   	
				for(var i = 0; i < oX.documentElement.childNodes.length;i++){
   					Hemi.xml.setInnerXHTML(this.getElementByRID("stages"), oX.documentElement.childNodes[i],1, 0, 0, 0, 0, this._handle_xhtml_token);
   				}
   				var aC = this.getElementByRID("stages").childNodes;
   				// Note -extendSpaceConfiguration operates against a container, without registering the container itself
   				// therefore, the container (tr) is not registered when configured like this
			   	// 
			   	this.extendSpaceConfiguration(aC[aC.length-1]);
			   	this.getElementByRID(sId + "stageNum").value = p.stageCount;
			   	for(var i = 0; i < 5; i++) this.addRow(p.stageCount);
			},
			addRow : function(iStage){
				var p = this.getProperties();
				var sSid = this.getStageIdPrefix(iStage);
				var sId = this.getRowIdPrefix(iStage,p.rowCount+1);
				/// Prime the task slot
				///
				var oT = this.getTaskAtRow(iStage,p.rowCount+1);
				p.rowCount++;
				var sT = this.getRowTemplate().replace(/\${id}/gi,sId);
				sT = sT.replace(/\${rowNum}/gi,p.rowCount);
				sT = sT.replace(/\${stageNum}/gi,p.stageCount);
   				var sB = sT ;
				var oX = Hemi.xml.parseXmlDocument(sB);
			   	if(!oX || !oX.documentElement){
			   		alert("Invalid XML from:\n\n" + sB);
			   		return;
			   	}

			   	//Hemi.xml.setInnerXHTML(this.getElementByRID("rows"), oX.documentElement,1, 0, 0, 0, 0, this._handle_xhtml_token);
			   	var xRows = this.getElementByRID(sSid + "rows");
			   	if(!xRows || xRows == null){
			   		alert("Null model reference");
			   		return;
			   	}
				for(var i = 0; i < oX.documentElement.childNodes.length;i++){
   					Hemi.xml.setInnerXHTML(xRows, oX.documentElement.childNodes[i],1, 0, 0, 0, 0, this._handle_xhtml_token);
   				}
   				var aC = xRows.childNodes;
   				// Note -extendSpaceConfiguration operates against a container, without registering the container itself
   				// therefore, the container (tr) is not registered when configured like this
			   	// 
			   	this.extendSpaceConfiguration(aC[aC.length-1]);
			   	this.getElementByRID(sId + "rowNum").value = p.rowCount;
			   	this.getElementByRID(sId + "estimate").onkeydown =  function(e){
					Hemi.event.cancelEvent(e);
					return false;
				};
			   	
   			},
			getTaskAtRow : function(s,i){
				var o = this.getObjects(), ot;
				if(typeof i != "number") return;
				if(!o.taskRows[s]) o.taskRows[s] = [];
				if(!(ot = o.taskRows[s][i])){
					ot = new org.cote.objects.taskType();
					ot.name = "";
					ot.description = "";
					ot.taskStatus = "UNKNOWN";
					ot.id = 0;
					ot.logicalOrder = i;
					ot.dueDate = (new Date());
					ot.completedDate = (new Date());
					o.taskRows[s][i] = ot;
				}
				return ot;
			},
			getStage : function(i){
				var o = this.getObjects(), ot;
				if(typeof i != "number") return;
				if(!(ot = o.stages[i])){
					ot = new org.cote.objects.stageType();
					ot.name = "";
					ot.description = "";
					ot.id = 0;
					ot.logicalOrder = i;
					
					ot.work = new org.cote.objects.workType();
					ot.work.name = "";
					ot.work.description = "";
					ot.work.id = 0;
					ot.work.logicalOrder = i;
					
					ot.schedule = new org.cote.objects.scheduleType();
					ot.schedule.name = "";
					ot.schedule.id = 0;
					ot.schedule.startTime = new Date();
					ot.schedule.endTime = ot.schedule.startTime;
					
					o.stages[i] = ot;
					
				}
				return ot;
			},
			chooseMethodology : function(iStage){
				var o = this.getStage();
				if(!o.methodology || !o.process) return;
				
				var ctid=this.getStageIdPrefix(iStage) + "name";
				//this.openPicker({stage:iStage,ctrlId:ctid},"Schedule", ctid,"pickSchedule");
				this.getObjects().link_target = {type:"process",stage:iStage,ctrlId:ctid};
				Hemi.app.createWindow("Template Picker","Templates/Picker.xml","ProcessPicker",0,0,{opener_id:this.getObjectId()},this._prehandle_project_picker_open);
			},
			chooseProcess : function(iStage){
				var o = this.getObjects();
				if(!o.methodology || !o.process) return;
				
				var ctid=this.getStageIdPrefix(iStage) + "name";
				//this.openPicker({stage:iStage,ctrlId:ctid},"Schedule", ctid,"pickSchedule");
				this.getObjects().link_target = {type:"process",stage:iStage,ctrlId:ctid};
				Hemi.app.createWindow("Template Picker","Templates/Picker.xml","ProcessPicker",0,0,{opener_id:this.getObjectId()},this._prehandle_project_picker_open);
			},
	
			_handle_project_picker_open : function(oW){
				var p = this.getObjects().process;
				oW.setCanResize(0);
				oW.resizeTo(200,300);
				Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
				oW.setIsModal(1);
				oW.SetPickerHandler(this._prehandle_project_picker_choose);
				oW.setHideOnClose(0);
				this.getObjects().current_picker = oW;
				oW.GetPickerList().clearItems();
				var oLT = this.getObjects().link_target;
				var aL = [];
				switch(oLT.type){
					case "process":
						aL = p.steps;
						break;
					case "schedule":
						aL = rocket.listSchedules(this.getPath() + "Schedules");
						break;
				}
				for(var i = 0; i < aL.length; i++){
					oW.GetPickerList().addItem(aL[i].name,aL[i]);
				}
				
			},
			_handle_project_picker_choose : function(oPicker, oItem){
				oPicker.Close();
				var oList;
				var oLT = this.getObjects().link_target;
				var sN = "";
				switch(oLT.type){
					case "process":
						sN = this.getStageIdPrefix(oLT.stage) + "name";
						break;
					case "schedule":
						sN = this.getStageIdPrefix(oLT.stage) + "schedule";
						this.pushScheduleToTasks(oItem.data,oLT.stage);
						break;
				}
				this.getElementByRID(sN).value = oItem.data.name;
			},
			
			
			
			chooseSchedule : function(iStage){
				var ctid=this.getStageIdPrefix(iStage) + "schedule";
				//this.openPicker({stage:iStage,ctrlId:ctid},"Schedule", ctid,"pickSchedule");
				this.getObjects().link_target = {type:"schedule",stage:iStage,ctrlId:ctid};
				Hemi.app.createWindow("Template Picker","Templates/Picker.xml","ProcessPicker",0,0,{opener_id:this.getObjectId()},this._prehandle_project_picker_open);
			},
		
			pushScheduleToTasks : function(v,i){
				var tr = this.getObjects().taskRows;
				if(tr[i]){
					var atr = tr[i];
					for(var k = 0; k < atr.length;k++){
						if(atr[k]){
							var sN = this.getRowIdPrefix(i,k) + "end";
							var oD = this.getElementByRID(sN);
							if(oD.value.length == 0){
								oD.value = (v.endTime.getMonth() + 1) + "/" + v.endTime.getDate() + "/" + v.endTime.getFullYear();
							}
						}
					}
				}
			},
			pickSchedule : function(s, v, i){
				var o = this.getStage(i.stage);
				if(!o){
					Hemi.logError("Schedule not found at stage " + i);
					return;
				}
				o.schedule = v;
				this.getElementByRID(this.getStageIdPrefix(i.stage) + "schedule").value = (v ? v.name : "");
				this.pushScheduleToTasks(v,i.stage);
				
			},
			chooseEstimate : function(iStage,iRow){
				var ctid=this.getRowIdPrefix(iStage, iRow) + "estimate";
				this.openPicker({stage:iStage,row:iRow,ctrlId:ctid}, "Estimate", ctid,"pickEstimate");
			},
			pickEstimate : function(s, v, i){
				var o = this.getTaskAtRow(i.stage,i.row);
				if(!o){
					Hemi.logError("Task not found at row " + i);
					return;
				}
				o.estimate = v;
				this.getElementByRID(this.getRowIdPrefix(i.stage,i.row) + "estimate").value = (v ? v.name + " " + v.estimateType : "");
			},
			openPicker : function(vSrc, sType, sListId, sFN){
				var oProps = {openerId:this.getObjectId(),sourceId:vSrc,listType:sType,picker:1,pickFunction:sFN};
				Hemi.app.createWindow("ManageList", "${dwac.path}[List]" + sType + "s.xml", "Manager-" + (sListId ? sListId : Hemi.guid()), 0, 0, oProps, 0)
				.then((oW)=>{
	            	if (oW) {
	            		oW.resizeTo(400, 200);
	            		
	            		if(vSrc.ctrlId){
	            			var o = this.getElementByRID(vSrc.ctrlId);
	            			var l = Hemi.css.getAbsoluteLeft(o);
							var t = Hemi.css.getAbsoluteTop(o) + o.offsetHeight;
							Hemi.log("Move " + vSrc.ctrlId + " to " + l + ", " + t);
							oW.moveTo(l + "px",t + "px");
							
	            		}
	            		else{
	            		
	            			Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            		}
	            		// Destroy the window when closed
	            		//
	            		oW.setHideOnClose(0);
	            	}
            	});
			},
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "MainIn.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<span class="uwm-inline-buttons">
	<img valign="middle" rid="communityBtn" src="/AccountManagerService/Media/Icons/user_24x24.png" onclick="${this}.toggleCommunity()" width="24" height="24" title="Community Mode"/>
	<span rid="communityContainer" style="display: none;">
		<select onchange="${this}.selectLifecycle()" rid="lifecycles"><option value="0">Unknown</option></select>
		<select onchange="${this}.selectProject()" rid="projects"><option value="0">Unknown</option></select>
	</span>
	<img valign="middle" src="/AccountManagerService/Media/Icons/Crystal/24x24/48px-Crystal_Clear_filesystem_folder_green.png" onclick="Hemi.app.createWindow('Groups List','${dwac.path}[ListGroups.xml]','ListGroups')" width="24" height="24" title="Groups"/>
	<img valign="middle" src="/AccountManagerService/Media/Icons/Crystal/24x24/Crystal_Clear_app_harddrive.png" onclick="Hemi.app.createWindow('Data List','${dwac.path}[ListDatas.xml]','ListDatas')" width="24" height="24" title="Data"/>
	<img valign="middle" src="/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/gnome-graphics.png" onclick="${this}.DoGallery()" width="24" height="24" title="Media Gallery"/>
	<img valign="middle" src="/AccountManagerService/Media/Icons/Crystal/24x24/48px-Crystal_Clear_app_database.png" onclick="Hemi.app.createWindow('Cache Utility','${dwac.path}[CacheUtility.xml]','CacheUtility')" width="24" height="24" title="Cache Utility"/>

    <img valign="middle" src="/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/advanced-directory.png" onclick="Hemi.app.createWindow('Framework Profiler','Templates/FrameworkProfiler.xml','Profiler');" width="24" height="24" title="Framework Profiler"/>
 <!--
    <img valign = "middle" src = "/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/kivio.png" width = "24" height = "24" onclick = "Hemi.app.createWindow('Framework Designer','Templates/FrameworkDesigner.xml','FrameworkDesigner');" title = "Framework Designer" />
-->
	<img valign="middle" src="/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/kdvi.png" width="24" height="24" onclick="Hemi.app.createWindow('API Browser','Templates/FrameworkAPIBrowser.xml', 'FrameworkAPIBrowser');" title="Framework API Browser"/>
    <img valign="middle" src="/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/kexi.png" width="24" height="24" onclick="Hemi.app.createWindow('Log Viewer','Templates/LogViewer.xml', 'LogViewer');" title="Framework Log Viewer"/>
    <img valign="middle" src="/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/gnome-word.png" width="24" height="24" onclick="Hemi.app.createWindow('FVT Test Suite','Templates/FVTs.xml', 'FVTTestSuite');" title="Framework Test Suite"/>
	<img valign="middle" src="/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/gpa.png" onclick="${this}.DoLogout()" width="24" height="24" title="Logout"/>

	<span style="padding-left:10px;padding-top:10px;color:#76933c;" rid="profileName" onclick="uwm.profile()">${property.userName}</span>
	</span>
	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				uwm.getUser().then((o)=>{
					Hemi.xml.setInnerXHTML(this.getElementByRID("profileName"),(o ? o.organizationPath + "/" + o.name : "Anonymous"));
					Hemi.message.service.subscribe(this, "onchangecommunity", "refreshCommunity");
					Hemi.event.addScopeBuffer(this);
					this.scopeHandler("session_refresh",0,0,1);
					Hemi.message.service.subscribe(this, "onsessionrefresh",this._prehandle_session_refresh);
				});
			},
			template_destroy : function(){
				Hemi.message.service.unsubscribe(this, "onsessionrefresh",this._prehandle_session_refresh);
			},
			refreshCommunity : function(s, v){
				if(v == this || this.getProperties().blockAnnounce) return;

				this.getProperties().blockAnnounce = 1;
				this.refreshLifecycleList();

				this.getProperties().blockAnnounce = 0;
				
				this.getElementByRID("communityBtn").src = "/AccountManagerService/Media/Icons/" + (irocket.getCommunityMode()? "Crystal/24x24/Crystal_Clear_app_Login_Manager.png" : "user_24x24.png");
				this.getElementByRID("communityContainer").style.display = (irocket.getCommunityMode() ? "" : "none");
			},
			DoLogout : function(){
				/// Unsubscribe prior to logging out so the present handler isn't invoked prior to the context template being destroyed
				//Hemi.message.service.unsubscribe(this, "onsessionrefresh",this._prehandle_session_refresh);
				window.uwm.logout();
			},
			DoGallery : function(){
				Hemi.xml.promiseText("/AccountManagerService/Scripts/canvasGallery.js","GET")
				.then((sTxt) => {
					if(sTxt) eval(sTxt);
				});
			},
			toggleCommunity : function(){
				if(!AM6Client.isCommunityConfigured()){
					var ctl = this;
					AM6Client.application().then((oX)=>{
						if(oX.userRoles.filter(r => r.name.match(/^systemadministrators$/gi)).length){
							if(confirm("Organization " + AM6Client.currentOrganization + " is not configured for community mode.  Configure it now?")){
								AM6Client.configureCommunity(function(s,v){
									if(v && v.json) ctl.toggleCommunity();
									else alert("Unable to configure community");
								});
							}
						}
						else{
							alert("Organization " + AM6Client.currentOrganization + " is not configured for community mode.  Contact the system administrator for this organization to configure it.");
						
						}
					});
				}
				else{
					irocket.setCommunityMode(!irocket.getCommunityMode());
					this.refreshCommunity();
				}
			},
			refreshLifecycleList : function(bNoUp){
				var oSel1 = this.getElementByRID("lifecycles");
				oSel1.options.length = 1;
		
				if(irocket.getCommunityMode()){
					var aLi = irocket.listLifecycles();
					for(var i = 0; i < aLi.length;i++){
						oSel1.options[i+1] = new Option(aLi[i].name,"" + aLi[i].id);
					}
					if(irocket.getCommunityLifecycle() && irocket.getCommunityLifecycle() != null){
						oSel1.value = "" + irocket.getCommunityLifecycle().id;
					}
					else if(oSel1.options.length > 1) oSel1.selectedIndex = 1;
					else oSel1.selectedIndex = 0;
				}
				this.selectLifecycle();
			},
			refreshProjectList : function(){
				var oSel = this.getElementByRID("projects");
				oSel.options.length = 1;
				if(irocket.getCommunityMode() && !irocket.getCommunityLifecycle()) return;
				
				var aL = irocket.listProjects();
				for(var i = 0; i < aL.length;i++){
					oSel.options[i+1] = new Option(aL[i].name,"" + aL[i].id);
				}
				
				if(!irocket.getCommunityMode()){
					oSel.options[oSel.options.length] = new Option("New","_new");
					if(irocket.getCurrentProject()){
						oSel.value = "" + irocket.getCurrentProject().id;
					}
				}
				else if(irocket.getCommunityMode() && irocket.getCommunityProject() && irocket.getCommunityProject() != null){
					oSel.value = "" + irocket.getCommunityProject().id;
				}
				else if(oSel.options.length > 1) oSel.selectedIndex = 1;
				else oSel.selectedIndex = 0;
			},
			selectLifecycle : function(){
				var vS = this.getElementByRID("lifecycles").value;
				if(vS.match(/^\d+$/) && vS != "0"){
					var oL = AM6Client.get("LIFECYCLE",vS);
					irocket.setCommunityLifecycle(oL);
					this.refreshProjectList();
					this.selectProject();
				}
			},
			selectProject : function(){
				var vS = this.getElementByRID("projects").value;
				this.getProperties().blockAnnounce = 1;
				if(vS.match(/^\d+$/) && vS != "0"){
					var oP = AM6Client.get("PROJECT",vS);
					if(!irocket.getCommunityMode()) irocket.setCurrentProject(oP);
					else irocket.setCommunityProject(oP);
				}
				else if(vS == "_new"){
					var o = new org.cote.objects.projectType();
					o.name = "";
					o.description = "";
					o.id = 0;
					o.stages = [];
					irocket.setCurrentProject(o);
					this.getElementByRID("projects").selectedIndex = 0;
				}
				this.getProperties().blockAnnounce = 0;
				///if(!this.getProperties().blockAnnounce) Hemi.message.service.publish("onchangecommunity",this);
				
			},
			_handle_session_refresh : function(s,v){
				/// if(!uwm.rule("IsLoggedIn")) this.loadTemplate('${dwac.path}','UnauthIn.xml');
				window.uwm.operation("ContinueWorkflow",{opener:this.getObjectId()});
			}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "Main.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<h1>Example Application</h1>
</Template></fragment><fragment id = "LoginIn.xml">
<Template>
<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
<div rid="cntLogin" style="display:none;">
<img valign="middle" rid="btnLogin" src="/HemiFramework/Hemi/Graphics/Icons/crystal/24x24/user-auth.png" onclick="${this}.doLogin()" width="24" height="24" alt="Crystal SVG Icon - User Auth"/>
<select onchange="${this}.toggleChoose()" rid="organization_path" class="rocket-select rocket-select-shorter">
<option value="_choose_">Specify ...</option>
<option value="/System">System</option>
<option value="/Development">Development</option>
<option value="/FirstContact">FirstContact</option>
<option value="/Public" selected="true">Public</option>
<option value="/Accelerant/Rocket">Rocket</option>
</select>
<span rid="chooseCont" style="display: none;">
<input type="text" class="rocket-text rocket-text-shorter" rid="organization_choose_path" value="/Public"/>
</span>
<input type="text" class="rocket-text rocket-text-shorter" rid="user_name"/>
<input type="password" class="rocket-text rocket-text-shorter" rid="password"/>
</div>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			var oMod = uwm.getRule("IsLoggedIn");
			this.scopeHandler("session_refresh",0,0,1);
			Hemi.message.service.subscribe(this, "onsessionrefresh",this._prehandle_session_refresh);
			
			if(!oMod){
				uwm.altMain = {
					form : "Forms/MainIn.xml"
				};
				uwm.altLogin = {
					form : "Forms/LoginIn.xml"	
				};
				
				uwm.altPane = {
					opener : this.getObjectId()
				};
				
				uwm.rule("IsLoggedIn",{opener:this.getObjectId()}, "ContinueWorkflow","RequireAuthentication");
			}
			else{
				this.getElementByRID("cntLogin").style.display = "";
				this.getElementByRID("user_name").focus();
				this.scopeHandler("input_keypress",0,0,1);
				this.getElementByRID("password").onkeypress = this._prehandle_input_keypress;
				
			}
		},
		toggleChoose : function(){
			var sV = this.getElementByRID("organization_path").value;
			this.getElementByRID("chooseCont").style.display = (sV.match(/^_choose_$/) ? "" : "none");
		},
		template_destroy:function(){
			this._prehandle_input_keypress = null;
			Hemi.message.service.unsubscribe(this, "onsessionrefresh",this._prehandle_session_refresh);	
		},
		_handle_input_keypress : function(e){
			e = Hemi.event.getEvent(e);
			if(e.keyCode == 13) this.doLogin();
		},
		_handle_session_refresh : function(s,v){
			window.uwm.operation("ContinueWorkflow",{opener:this.getObjectId()});
			/// if(uwm.rule("IsLoggedIn")) this.loadTemplate('${dwac.path}','MainIn.xml');
		},
		doLogin : function(){

			if(!this.Validate()) return;
			var sOrg = this.getFormValue("organization_path");
			if(sOrg.match(/^_choose_$/)) sOrg = this.getFormValue("organization_choose_path");
			var sName = this.getFormValue("user_name");
			var sPassword = this.getFormValue("password");
			this.getElementByRID("user_name").disabled = true;
			this.getElementByRID("password").disabled = true;
			this.getElementByRID("btnLogin").disabled = true;
			this.setFormValue("password","");
			this.getProperties().userName = sName; 
			
			Hemi.message.service.unsubscribe(this, "onsessionrefresh",this._prehandle_session_refresh);
			window.uwm.operation("Authenticate", {opener:this.getObjectId(),user_name : sName, password : sPassword, organization: sOrg});		
		},

		Validate : function(){
		
			try{
				this.assert(this.validateForPattern("user_name","not-empty"),"Invalid user_name");
				this.assert(this.validateForPattern("password","not-empty"),"Invalid password");
			}
			catch(e){
				//this.setStatus((typeof e== "string" ? e : e.message ? e.message : e.description));
				return 0;
			}
			return 1;
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "Login.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>

	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'OrganizationPicker.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			User Name:
		</p>
		<p>
			<input type="text" class="rocket-text" rid="user_name"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Password:
		</p>
		<p>
			<input type="password" class="rocket-text" rid="password"/>
		</p>
	</div>

	<div class="rocket-column-2">
			<p>
				<input type="button" onclick="uwm.operation('OfferRegistration')" value="Register"/>
			</p>
			<p>
				<input rid="btnLogin" type="button" value="Login" class="input_button" onclick="${this}.DoLogin()"/>
			</p>
	</div>

<p><span rid="status">[ ... ]</span></p>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.getElementByRID("user_name").focus();
			this.setStatus(" ");
		},

		DoLogin : function(){

			if(!this.Validate()) return;
			var oOrg = AM6Client.find("ORGANIZATION",this.getOrgPath());
			if(!oOrg){
				this.setStatus("Invalid organization");
				return;
			}
			var sName = this.getFormValue("user_name");
			var sPassword = this.getFormValue("password");
			this.setFormValue("password","");
			this.setStatus(" ");
			this.getElementByRID("btnLogin").disabled = true;
			window.uwm.operation("Authenticate", {user_name : sName, password : sPassword, organization: oOrg});		
		},

		Validate : function(){
		
			try{
				this.assert(this.validateForPattern("user_name","not-empty"),"Invalid user_name");
				this.assert(this.validateForPattern("password","not-empty"),"Invalid password");
			}
			catch(e){
				this.setStatus((typeof e== "string" ? e : e.message ? e.message : e.description));
				return 0;
			}
			return 1;
		},
		setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("status"),s);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "LocationPickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Location:
		</p>
		<p>
			<input type="text" disable="true" rid="location" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseLocation()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickLocation('Location')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openLocation()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		var o = this.getBean("rocketType");
		this.pickLocation('Location',o.location);
	},
	chooseLocation : function(){
		this.manageList("Location", this.getObjectId(),"pickLocation");
	},

		openLocation : function(){
			var o = this.getBean("rocketType");
			if(o && o.location && this.openItem) this.openItem(o.location,"Location");
		},
	pickLocation : function(s, v){
		var o = this.getBean("rocketType");
		o.location = v;
		this.getElementByRID("location").value = (v ? AM6Client.getAttributeValue(v,"name",v.name) : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "LocationPicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			<span rid="locationPickerToggle"/> <span rid="locationPickerTitle">Locations</span>:
		</p>
		<p rid="locationPickerContent">
			<div component="wideselect" rid="locationsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addLocation()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeLocation()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openLocation()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("locationPickerToggle","locationPickerContent");
			if(!this.getProperties().locationListProp) this.getProperties().locationListProp = "locations";
		},
		openLocation : function(){
			var oI = this.getLocationsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Location");
		},
		addLocation : function(){
			this.manageList("Location", this.getLocationsList().getObjectId());
		},
		removeLocation : function(){
			var oI = this.getLocationsList().getActiveItem();
			if(oI) this.getLocationsList().clearItem(oI.index);
		},

		configLocationsList : function(s,v){
			var oL = this.getLocationsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshLocations();
		},
		refreshLocations : function(){
			var oL = this.getLocationsList(), aP = this.getProperties().locationListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getLocationsList : function(){
			return this.getComponentByRID("locationsList").GetWideSelect();
		},
		prepareSaveLocationsList : function(o){
			aP = this.getProperties().locationListProp;
			o[aP] = [];
			var aLocations = this.getLocationsList().getItems();
			for(var i = 0; i < aLocations.length;i++) o[aP].push(aLocations[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "LocationFields.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ParentPicker.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Classification:
		</p>
		<p>
			<input type="text" rid="classification" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Geography:
		</p>
		<p>
				<select rid="geographyType" bind="${bean.rocketType}">
	  			<option>UNKNOWN</option>
	    		<option>TECHNICAL</option>
	    		<option>PERSON</option>
	    		<option>PHYSICAL</option>
	    		<option>ENVIRONMENTAL</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'LocationPicker.xml']/span" src="${dwac.path}"/>

	<embedded-script><![CDATA[
		embedded_init : function(o){
			this.getProperties().boundaryListProp = "boundaries";
			this.getProperties().borderListProp = "borders";
			this.getProperties().locationListProp = "childLocations";
			this.getComponentByRID("locationsList").setLoadHandler(this.scopeHandler("configLocationsList",0,1,1));
			Hemi.xml.setInnerXHTML(this.getElementByRID("locationPickerTitle"),"Child Locations");
			// this.getComponentByRID("boundariesList").setLoadHandler(this.scopeHandler("configDependenciesList",0,1,1));

		},
		updateChildLocations : function(o){
			var aI = this.getLocationsList().getItems();
			var a = [];
			var iUp = 0;
			for(var i = 0; o.childLocations && i < o.childLocations.length; i++) a[o.childLocations[i].id] = o.childLocations[i];
			for(var i = 0; i < aI.length;i++){
				var oI = aI[i].data;
				if(!oI) continue;
				/// Skip existing
				if(a[oI.id]){
					a[oI.id] = 0;
					continue;
				}
				/// Set oI parent to location
				oI.parentId = o.id;
				AM6Client.update("LOCATION",oI);
				iUp++;
			}
			for(var i = 0; i < a.length;i++){
				if(typeof a[i]=="object"){
					AM6Client.delete("LOCATION",a[i].objectId);
					iUp++;
				}
			}
			
		},
		
		
		addType : function(o){
			var aBord = aBound = [];
			var oT, b = AM6Client.update("LOCATION",o);
		
			if(b){
				var oP;
				if(o.parentId){
					//oP = rocket.getLocationById(o.parentId);
					//oT = rocket.getLocationByParent(o.name,oP);
					oP = AM6Client.get("LOCATION",o.parentId);
					oT = AM6Client.getByNameInGroupParent("LOCATION",oP.objectId,o.name);
				}
				else{
					oT = AM6Client.getByName("LOCATION",AM6Client.find("GROUP","DATA",this.getPath()).objectId,o.name);
				}
				
				this.updateChildLocations(oT);
			}
			AM6Client.clearCache(oT);
			return b;
		},
		prepareSave : function(o){
			
			/*
			this.getElementByRID("logicalOrder").className = "rocket-text";
			o.dependencies = [];
			var aDependencies = this.getDependenciesList().getItems();
			for(var i = 0; i < aDependencies.length;i++) o.dependencies.push(aDependencies[i].data);
			*/
			if(o.id){
				this.updateChildLocations(o);
				AM6Client.clearCache("LOCATION");
			}	
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Location.xml">
<Template>
	<!--
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<import-xml src = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/BaseType.xml" id = "BaseType" />
	<p>
	</p>
	-->
	<p>Note Base</p>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Location";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ListWorks.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Work",uwm.getPathForType("Work"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListValidationRules.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<p rid="exampleRules">
		<input type="button" value="Add Example Rules" onclick="${this}.addExampleRules()"/>
	</p>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("ValidationRule",uwm.getPathForType("ValidationRule"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		},
		modelRule : function(sName, sDesc, sValType, sExpr, sErr, bComp, bRule, aRule, bRep, sRep, bNull){
			var vr = model.primitive("VALIDATIONRULE");
			vr.name = sName;
			vr.description = sDesc;
			vr.groupPath = this.getPath();
			vr.errorMessage = sErr;
			vr.expression = sExpr;
			vr.isRuleSet = bRule;
			vr.isReplacementRule = bRep;
			vr.replacementValue = sRep;
			vr.validationType = sValType;
			vr.comparison = bComp;
			vr.allowNull = bNull;
			vr.rules = aRule;
			return vr;
		},
		getCreateRule : function(sName, sDesc, sValType, sExpr, sErr, bComp, bRule, aRule, bRep, sRep, bNull){
			var oG = AM6Client.find("GROUP","DATA",this.getPath());
			var vr = AM6Client.getByName("VALIDATIONRULE", oG.objectId, sName);
			if(vr == null){
				vr = this.modelRule(sName, sDesc, sValType, sExpr, sErr, bComp, bRule, aRule, bRep, sRep, bNull);
				if(AM6Client.update("VALIDATIONRULE",vr)){
					vr = AM6Client.getByName("VALIDATIONRULE", oG.objectId, sName);
				}
			}
			return vr;
		},
		addExampleRules : function(){
			
			var vrEnd = this.getCreateRule("Trim End","","REPLACEMENT","\\s*$","",false,false,[],true,"",false);
			var vrBegin = this.getCreateRule("Trim Begin","","REPLACEMENT","^\\s*","",false,false,[],true,"",false);
			var vrTrimEnds = this.getCreateRule("Trim Ends","","NONE","","",false,true,[vrBegin,vrEnd],false,"",false);
			var vrNotEmpty = this.getCreateRule("Not Empty","","BOOLEAN","^(?=\\s*\\S).*$","Value may not be empty",true,true,[vrTrimEnds],false,"",false);
			var vrNumbersOnly = this.getCreateRule("Numbers Only","","BOOLEAN","[\\d\\.]+","Value may only contain numbers and decimal points",true,true,[vrNotEmpty],false,"",false);
			this.refreshList();
		},
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListUsers.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.getProperties().iconView = 1;
			this.initGrid("User",0,0,1);
		},
		decorateListItemName : function(o){
			return this.decorateProfileIcon(o);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListType.xml">
<span>
	<p>
		<input type="text" rid="path" placeholder="~/Path" class="rocket-text"/>
	</p>
	<div style="width:250px;" component="wideselect" rid="typelist">
	</div>
	<p>
		<input type="button" class="rocket-button" value="Refresh" onclick="${this}.refreshList()"/>
	</p>
	<p><span rid="status">[ ... ]</span></p>
	<embedded-script><![CDATA[
		initList : function(sTypeName, sDefPath){
			this.getElementByRID("path").placeholder = (sDefPath ? sDefPath : "~/" + sTypeName + "s");
			this.getProperties().typeName = sTypeName;
			this.getComponentByRID("typelist").setLoadHandler(this.scopeHandler("configList",0,1,1));
			if(this.setTitle) this.setTitle(sTypeName);
		},
		fragment_init : function(){
			
		},
		
		fragment_destroy : function(){
			Hemi.message.service.unsubscribe(this, "onsessionrefresh", "handle_list_session_refresh");
		},
		getPath : function(){
			var o = this.getElementByRID("path"), s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s) s = "~/" + this.getProperties().typeName + "s";
			}
			return s;
		},
		handle_list_session_refresh : function(s, v){
			this.refreshList();
		},
		_handle_typelistclick : function(s, v){
			if(this.handle_list_click) this.handle_list_click(v);
		},
		configList : function(){
			this.getList().setResultHandler( this.scopeHandler("typelistclick",0,0,1));
			this.refreshList();
			Hemi.message.service.subscribe(this, "onsessionrefresh", "handle_list_session_refresh");
		},
		getList : function(){
			return this.getComponentByRID("typelist").GetWideSelect();
		},
		refreshList : function(){
			var sPath = this.getPath();
			
			var oL = this.getList();
			oL.clearItems();
			this.setStatus("");
			if(!uwm.rule("IsLoggedIn")){
				this.setStatus("Not Authenticated with id " + uwm.getSession().sessionId);
			}
			else{
				var aList = rocket["list" + this.getProperties().typeName + "s"](sPath);	
				for(var i = 0; aList != null && i < aList.length;i++){
					oL.addItem(aList[i].name, aList[i]);
				}
			}
		
		},
		setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("status"),s);
		}
	
	]]></embedded-script>
</span></fragment><fragment id = "ListTraits.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Trait",uwm.getPathForType("Trait"));
		},
		template_destroy : function(){
			
		},
		decorateListItemName : function(o){
			return AM6Client.getAttributeValue(o,"code",o.name);
		},
		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListTimes.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			this.initGrid("Time",uwm.getPathForType("Time"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListTickets.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Ticket",uwm.getPathForType("Ticket"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListTasks.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<!--
	<import-xml src = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/ListType.xml" id = "TypeList" />
	-->
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Task",uwm.getPathForType("Task"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListTags.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Tag",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Tag","~/Tags")),0,0,1);
		},
		
		template_destroy : function(){
			
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListStorys.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<!--
	<import-xml src = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/ListType.xml" id = "TypeList" />
	-->
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Task",uwm.getPathForType("Story"),"Story");
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListStages.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			this.initGrid("Stage",uwm.getPathForType("Stage"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListSchedules.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Schedule",uwm.getPathForType("Schedule"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListRules.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Rule",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Rule","~/Rules")));

		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListRoles.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<p rid="systemRoles">
		<input type="button" value="System Roles" onclick="${this}.showSystemRoles()"/>
		<input type="button" value="Community Roles" onclick="${this}.showCommunityRoles()"/>
	</p>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Role",0,0,1,0,uwm.getDefaultParentForType("Role",AM6Client.user("ROLE","USER")));
			//this.showSystemRoles();
		},
		template_destroy : function(){
			
		},
		showSystemRoles : function(){
			var ctl = this;
			var oL = ctl.getList();
			oL.clearItems();
			
			AM6Client.application().then((oX)=>{
				var aS= oX.systemRoles;

				var iI = 0;
				for(var i = 0; aS != null && i < aS.length; i++){
					if(aS[i].roleType == "USER"){
						oL.addItem(aS[i].roleType + " " + aS[i].name, aS[i]);
						iI++;
					}
				}
				ctl.setTotalCount(iI);
			});
		},
		showCommunityRoles : function(){
			var ctl = this;
			var oL = ctl.getList();
			oL.clearItems();
			AM6Client.communityRoles(function(s,v){
				if(!v || !v.json) return;
				
				var aS = v.json;
				var iI = 0;
				for(var i = 0; i < aS.length; i++){
					if(aS[i].roleType == "USER"){
						oL.addItem(aS[i].roleType + " " + aS[i].name, aS[i]);
						iI++;
					}
				}
				ctl.setTotalCount(iI);
			});
		},
		decorateListItemName : function(o){
			if(this.getObjects().parentRef && this.getObjects().parentRef.parentId == o.id) return "..";
			return o.name + " " + o.roleType;
		},
		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListResources.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Resource",uwm.getPathForType("Resource"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListRequirements.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Requirement",uwm.getPathForType("Requirement"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListProjects.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.getObjects().projList = [];
			this.initGrid("Project",uwm.getPathForType("Project"));
		},
		provideRefresh : function(bSkipCount){
			if(irocket.getCommunityMode()){
				this.provideList = this._provideList;
				this.provideCount = this._provideCount;
				if(!bSkipCount) this.refreshCommunityProjects();
			}
			else{
				delete this.provideList;
				delete this.provideCount;
				this.getObjects().projList = [];
			}
		},
		provideDelete : function(o){
			var ctl = this;
			var fH = function(s, v){
					if(ctl.getReadyState() != 4) return;
					if(typeof v.json == "boolean" && v.json){
						Hemi.log("Deleted " + ctl.getProperties().typeName + " object #" + o.id);
						ctl.setStatus("Deleted " + ctl.getProperties().typeName + " object #" + o.id);
						ctl.refreshList();
					}
					else{
						Hemi.logError("Unabe to delete " + ctl.getProperties().typeName + " object #" + o.id);
						ctl.setStatus("Unable to delete " + ctl.getProperties().typeName + " object #" + o.id);
					}
					AM6Client.clearCache();

					Hemi.message.service.publish("onchangecommunity",this);
				};

			if(irocket.getCommunityMode()){
				return AM6Client.deleteCommunityProject(o.objectId, fH);
			}
			else{
				return AM6Client.delete("PROJECT",o.objectId, fH);
			}
		},
		refreshCommunityProjects : function(){
			var _o = this.getObjects();
			_o.projList = irocket.listProjects();
		},
		_provideList : function(sP, sF, iS, iC){
			return this.getObjects().projList.slice(iS,iS + iC); 
		},
		_provideCount : function(){
			return this.getObjects().projList.length;
		},
		template_destroy : function(){
			this.getObjects().projList = [];
			delete this.provideList;
			delete this.provideCount;
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListProcessSteps.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			this.initGrid("ProcessStep",uwm.getPathForType("ProcessStep"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListProcesss.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			this.initGrid("Process",uwm.getPathForType("Process"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListPolicys.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Policy",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Policy","~/Policies")));

		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListPersons.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<p rid="systemPersons">
		<input type="button" value="System Persons" onclick="${this}.showSystemPersons()"/>
	</p>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.getProperties().iconView = 1;
			this.initGrid("Person",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Person","~/Persons")));

		},
		showSystemPersons : function(){
			this.getElementByRID("path").value = "/Persons";
			this.getProperties().start_record = 0;
			this.getProperties().viewType = o;
			this.refreshList();
		},
		decorateListItemName : function(o){
			return this.decorateProfileIcon(o);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListPermissions.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Permission",0,0,1,0,(this.getProperties().defaultParent ? this.getProperties().defaultParent : uwm.getDefaultParentForType("Permission",AM6Client.user("PERMISSION","USER"))),(this.getProperties().picker ? 1 : 0));

		},
		template_destroy : function(){
			
		},
		decorateListItemName : function(o){
			if(this.getObjects().parentRef && this.getObjects().parentRef.parentId == o.id) return "..";
			return o.name + " " + o.permissionType;
		},
		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListPatterns.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Pattern",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Pattern","~/Patterns")));

		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListOperations.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Operation",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Operation","~/Operations")));
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListNotes.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Note",uwm.getPathForType("Note"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListModules.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			this.initGrid("Module",uwm.getPathForType("Module"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListModels.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<!--
	<import-xml src = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/ListType.xml" id = "TypeList" />
	-->
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Model",uwm.getPathForType("Model"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListMethodologys.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			this.initGrid("Methodology",uwm.getPathForType("Methodology"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListLocations.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Location",uwm.getPathForType("Location"));
		},
		template_destroy : function(){
			
		},

		decorateListItemName : function(o){
			return AM6Client.getAttributeValue(o,"name",o.name);
		},
		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListLifecycles.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.getObjects().lifList = [];
			this.initGrid("Lifecycle",uwm.getPathForType("Lifecycle"));
		},
		provideRefresh : function(bSkipCount){
			if(irocket.getCommunityMode()){
				this.provideList = this._provideList;
				this.provideCount = this._provideCount;
				if(!bSkipCount) this.refreshCommunityLifecycles();
			}
			else{
				delete this.provideList;
				delete this.provideCount;
				this.getObjects().lifList = [];
			}
		},
		provideDelete : function(o){
			var ctl = this;
			
			var fH = function(s, v){
				if(ctl.getReadyState() != 4) return;
				if(typeof v.json == "boolean" && v.json){
					Hemi.log("Deleted " + ctl.getProperties().typeName + " object #" + o.id);
					ctl.setStatus("Deleted " + ctl.getProperties().typeName + " object #" + o.id);
					ctl.refreshList();
				}
				else{
					Hemi.logError("Unabe to delete " + ctl.getProperties().typeName + " object #" + o.id);
					ctl.setStatus("Unable to delete " + ctl.getProperties().typeName + " object #" + o.id);
				}
				AM6Client.clearCache();
				
				Hemi.message.service.publish("onchangecommunity",this);
			};
			
			
			if(irocket.getCommunityMode()){
				return AM6Client.deleteCommunity(o.objectId,fH);
			}
			else{
				return AM6Client.delete("LIFECYCLE",o.objectId,fH);
			}
		},
		refreshCommunityLifecycles : function(){
			var _o = this.getObjects();
			_o.lifList = irocket.listLifecycles();
		},
		_provideList : function(sP, sF, iS, iC){
			return this.getObjects().lifList.slice(iS,iS + iC); 
		},
		_provideCount : function(){
			return this.getObjects().lifList.length;
		},
		template_destroy : function(){
			this.getObjects().lifList = [];
			delete this.provideList;
			delete this.provideCount;
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListGroups.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			/// Leave the default type as UNKNOWN so as to pick up all types
			/// This allows intermixing, and then where only specific types are desired it can be restricted
			/// At the moment, the count function doesn't accomodate type, though, so if the group children are not all the same type
			/// the count won't match the list.  This is the same issue with roles and permissions, since those use psuedo group-like structures
			///
			if(!this.getProperties().listGroupType) this.getProperties().listGroupType = "UNKNOWN";
			this.initGrid("Group",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Group","~/")));

			if(this.getProperties().viewType && this.setTitle) this.setTitle(this.getProperties().viewType.name);
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListGoals.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Goal",uwm.getPathForType("Goal"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListFunctions.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Function",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Function","~/Functions")));

		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListForms.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Form",uwm.getPathForType("Form"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListFormElements.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		template_init : function(){
			this.initGrid("FormElement",uwm.getPathForType("FormElement"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListFacts.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Fact",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Fact","~/Facts")));

		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListEvents.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Event",uwm.getPathForType("Event"));
		},
		template_destroy : function(){
			
		},
		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListEstimates.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Estimate",uwm.getPathForType("Estimate"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListDatas.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.getProperties().iconView = 1;
			this.initGrid("Data",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Data","~/Data")));
		},

		preparePathChange : function(oObj, sFilt){
			var _s = this.getProperties(), _o = this.getObjects();
			if(!oObj || oObj.nameType != "GROUP" || oObj.groupType != "BUCKET"){
				delete _o.currentBucket;
				delete _o.currentBucketList;
				return;
			}
			_o.currentBucket = oObj;
			_o.currentBucketList = AM6Client.members("GROUP", oObj.objectId, "DATA");
		},
		provideMemberList : function(sPath, sFilt, startRecord,recordCount){
			var _s = this.getProperties(), _o = this.getObjects();
			if(!_o.currentBucket || !_o.currentBucketList) return 0;
			return _o.currentBucketList.slice(startRecord, startRecord + recordCount);
		},
		provideMemberCount : function(){
			var _s = this.getProperties(), _o = this.getObjects();
			if(!_o.currentBucket || !_o.currentBucketList) return 0;
			return _o.currentBucketList.length;
		},
		decorateListItemName : function(o){
			var _p = this.getProperties();
			if(!_p.iconView) return o.name;
			var w = (_p.iconWidth ? _p.iconWidth : 48);
			var h = (_p.iconHeight ? _p.iconHeight : 48);
			var oL = document.createElement("div");
			var oP = document.createElement("p");
			oP.setAttribute("style","text-indent:0px !important;");
			var oP2 = document.createElement("p");
			var oI = document.createElement("img");
			oI.setAttribute("class","alignright");
			var sIco = "/AccountManagerService/Media/Icons/Crystal/48x48/48px-Crystal_Clear_action_filenew.png";
			if(o.mimeType.match(/^image/)){
				sIco = "/AccountManagerService/thumbnail/" + AM6Client.dotPath(AM6Client.currentOrganization) + "/Data" + o.groupPath + "/" + o.name + "/" + w + "x" + h
			}
			oI.setAttribute("src",sIco);
			oP.appendChild(oI);
			oP.appendChild(document.createTextNode(o.name));
			oP.appendChild(document.createElement("br"));
			if(o.description != null) oP.appendChild(document.createTextNode(o.description));
			oP.appendChild(document.createElement("br"));
			oP.appendChild(document.createTextNode(o.createdDate.toString()));
			oL.appendChild(oP);
			oP2.setAttribute("class","clearalign");
			oL.appendChild(oP2);
			return oL;
						
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListCosts.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			this.initGrid("Cost",uwm.getPathForType("Cost"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListContacts.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Contact",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Contact","~/Contacts")));

		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListCases.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			//this.initList("Note");
			this.initGrid("Case",uwm.getPathForType("Case"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListBudgets.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			//this.initList("Note");
			this.initGrid("Budget",uwm.getPathForType("Budget"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListArtifacts.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Artifact",uwm.getPathForType("Artifact"));
		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			///this.setStatus("Clicked: " + v.name);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListApplications.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			if(!this.getProperties().listGroupType) this.getProperties().listGroupType = "DATA";
			// this.initGrid("Group",uwm.getPathForType("Application"),"Application");
			this.initGrid("Group",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Application","~/")),"Application");

		},
		_provideList : function(sP, sF, iS, iC){
			return this.getObjects().lifList.slice(iS,iS + iC); 
		},
		template_destroy : function(){
			
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListAddresss.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.initGrid("Address",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Address","~/Addresses")));

		},
		template_destroy : function(){
			
		},

		handle_list_click : function(v){
			
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "ListAccounts.xml">
<Template>

	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GridType.xml']/span" src="${dwac.path}"/>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.getProperties().iconView = 1;
			this.initGrid("Account",(this.getProperties().defaultPath ? this.getProperties().defaultPath : uwm.getPathForType("Account","~/Accounts")));

		},
		decorateListItemName : function(o){
			return this.decorateProfileIcon(o);
		}

		]]>
	</embedded-script>
</Template></fragment><fragment id = "LifecycleFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ProjectPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'SchedulePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'GoalPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BudgetPicker.xml']/span" src="${dwac.path}"/>
	
	<div rid="regionCont" style="display:none;clear:both;" class="rocket-column-2">
		<p rid="lblRegion">
			Configure Regions:
		</p>
		<p>
			<input rid="txtCountryCodes" type="text" class="rocket-text" value="CA,US"/>
			<input rid="btnConfigRegion" type="button" class="rocket-button" value="Configure" onclick="${this}.configureRegions()"/>
		</p>
	</div>
	
	<embedded-script><![CDATA[
		embedded_init : function(o){
			var o = this.getBean("rocketType");
			this.getProperties().projectListProp = "projects";
			this.getProperties().scheduleListProp = "schedules";
			this.getProperties().budgetListProp = "budgets";
			this.getProperties().goalsListProp = "goals";
			this.getComponentByRID("goalsList").setLoadHandler(this.scopeHandler("configGoalsList",0,1,1));
			this.getComponentByRID("budgetsList").setLoadHandler(this.scopeHandler("configBudgetsList",0,1,1));
			this.getComponentByRID("schedulesList").setLoadHandler(this.scopeHandler("configSchedulesList",0,1,1));
			this.getComponentByRID("projectsList").setLoadHandler(this.scopeHandler("configProjectsList",0,1,1));
			
			var bD = 0;
			if(o.objectId && irocket.getCommunityMode()){
				var oL =  AM6Client.find("GROUP","DATA",o.groupPath + "/Locations");
				if(oL){
					var iL = AM6Client.list("LOCATION",oL.objectId,0,0);
					if(iL == 0) bD = 1;
				}
			}
			this.getElementByRID("regionCont").style.display = (bD ? "block" : "none" );
		},
		configureRegions : function(){
			
			if(!confirm("Configuring lifecycle regions may take several minutes while administrative codes and traits are populated.")) return;
			this.config1();
		},
		config1 : function(){
			var o = this.getBean("rocketType"), oC = this;
			this.setStatus("Configuring traits");
			
			AM6Client.configureCommunityTraits(o.objectId, function(s, v){
				try{
				if(v && v.json) v = v.json;
				oC.setStatus("Configured traits: " + (v ? "true" : "false"));
				if(v) oC.config2();
				else oC.setStatus("Failed to configure traits");
				} catch(e){ alert(e.message);}
			});
		
		},
		config2 : function(){
			var o = this.getBean("rocketType"), oC = this;
			this.setStatus("Configuring country info");
			AM6Client.configureCommunityCountryInfo(o.objectId,function(s2, v2){
				try{
				if(v2 && v2.json) v2 = v2.json;
				oC.setStatus("Configured country info: " + (v2 ? "true" : "false"));
				if(v2) oC.config3();
				else oC.setStatus("Failed to configure country info");
				}
				catch(e){alert(e);}
			});
		},
		config3 : function(){
			var o = this.getBean("rocketType"), oC = this;
			this.setStatus("Configuring admin 1 codes");
			AM6Client.configureCommunityAdmin1Codes(o.objectId,function(s3, v3){
				if(v3 && v3.json) v3 = v3.json;
				oC.setStatus("Configured country admin 1 codes: " + (v3 ? "true" : "false"));
				if(v3) oC.config4();
				else oC.setStatus("Failed to configure country admin 1 codes");
			});
		},
		config4 : function(){
			var o = this.getBean("rocketType"), oC = this;
			this.setStatus("Configuring admin 2 codes");
			AM6Client.configureCommunityAdmin2Codes(o.objectId,function(s3, v3){
				if(v3 && v3.json) v3 = v3.json;
				oC.setStatus("Configured country admin 2 codes: " + (v3 ? "true" : "false"));
				if(v3) oC.config5();
				else oC.setStatus("Failed to configure country admin 2 codes");
			});
		},
		config5 : function(){
			var o = this.getBean("rocketType"), oC = this;
			this.setStatus("Configuring country data");
			AM6Client.configureCommunityCountryData(o.objectId,this.getElementByRID("txtCountryCodes").value.split(","),true,function(s5, v5){
				if(v5 && v5.json) v5 = v5.json;
				oC.setStatus((v5 ? "COMPLETED" : "FAILED") + ": Configured country data: " + (v5 ? "true" : "false"));
			});
		},

		addType : function(o){
			if(irocket.getCommunityMode()){
				var oP = AM6Client.addCommunity(o.name);
				if(!oP || oP == null){
					this.setStatus("Failed to create community lifecycle");
					return false;
				}
				oP = AM6Client.community(o.name);
				oP.description = o.description;
				oP.goals = o.goals;
				oP.budgets = o.budgets;
				oP.projects = o.projects;
				oP.schedules = o.schedules;
				if(AM6Client.update("LIFECYCLE",oP)){
					AM6Client.clearCache("LIFECYCLE");
					Hemi.message.service.publish("onchangecommunity",this);
					return 1;
				}
				return 0;
			}
			else{
				uwmServiceCache.clearCache();
				return AM6Client.update("LIFECYCLE",o);
			}
		},
		prepareSave : function(o){
			this.getElementByRID("endTime").className = "rocket-text";

			this.prepareSaveGoalsList(o);
			this.prepareSaveBudgetsList(o);
			this.prepareSaveSchedulesList(o);
			this.prepareSaveProjectsList(o);
			
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Lifecycle.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Lifecycle";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "JWTPicker.xml">
<span>
	<div class="rocket-column-2" rid="oauthContainer" style="display: none;">
		<p>
			OAuth Grant:
		</p>
		<p>
			<input type="button" class="rocket-button" value="New Grant" onclick="${this}.newOAuthGrant()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType");
			if(o && o.nameType.match(/^(USER|PERSON|ACCOUNT)$/)){
				this.getElementByRID("oauthContainer").style.display = "block";
			}
		},
		newOAuthGrant : function(){
			var o = this.getBean("rocketType");
			var oProps = {openerId:this.getObjectId(),viewType:o,tokenMode:1,jwtToken:1};
			Hemi.app.createWindow(o.name + " OAuth Grant", "${dwac.path}[CredentialForm.xml]", "JWT-" + o.id, 0, 0, oProps)
			.then((oW)=>{
	           if (oW) {
		           	oW.resizeTo(475, 400);
		           	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
		           	oW.setHideOnClose(0);
	           }
	         });
		}
	]]></embedded-script>
</span></fragment><fragment id = "ImageViewer.xml">
<Template Title="Image">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<div rid="image-field">

	</div>
	<embedded-script>
		<![CDATA[
		template_init : function(){
			var _s = this.getProperties(), _o = this.getObjects();
			if(!_s.media_name){
				return;
			}
			if(_o.title_bar) _o.title_bar.style.display = "none";
			if(_o.status_bar) _o.status_bar.style.display = "none";
			if(_o.body) _o.body.style.overflow = "hidden";
			this.setTitle(_s.media_name + " (" + _s.media_id + ")");
			this.scopeHandler("imageviewer_load",0,0,1);
			this.scopeHandler("video_load",0,0,1);
			
			var oI = document.createElement(_s.video ? "video" : "img");
			var oC = this.getElementByRID("image-field");
			if(_s.video){
				oI.setAttribute("autoplay","true");
				var oS = document.createElement("source");
				oS.setAttribute("src",_s.media_url);
				oS.setAttribute("type", _s.mimeType);
				oI.appendChild(oS);
				oI.onloadedmetadata = this._prehandle_video_load;
				oC.appendChild(oI);

			}
			else{
				oI.onload = this._prehandle_imageviewer_load;
				oC.appendChild(oI);
				oI.src = _s.media_url;
			}
			var t = this;
			oI.onclick = function(){
				t.Close();
			};

		},
		_handle_video_load : function(e){
			var o = this.getElementByRID("image-field").getElementsByTagName("video")[0],_s = this.getProperties();
		    var width = this.videoWidth,
        	height = this.videoHeight;
        	Hemi.log("Start dimen: " + o.videoWidth + "X" + o.videoHeight);
        	if(width > _s.maxWidth || height > _s.maxHeight){
        		var iS1 = (_s.maxWidth / width);
				var iS2 = (_s.maxHeight / height);
				var iW = (iS1 * width);
				var iH = (iS1 * height);
				if(_s.maxHeight < iH){
					iW = (iS2 * width);
					iH = (iS2 * height);
				}
				o.videoWidth = iW;
				o.videoHeight = iH;
        	}
        	Hemi.log("End dimen: " + o.videoWidth + "X" + o.videoHeight);
        	this.resizeTo(o.videoWidth, o.videoHeight + 50);
			Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(this);});

		},
		_handle_imageviewer_load : function(e){
			var o = this.getElementByRID("image-field").getElementsByTagName("img")[0],_s = this.getProperties();
			//alert(o.nodeName);
			// Add 40px to accomodate title and status bar
			//
			Hemi.log("Start dimen: " + o.width + "X" + o.height);
			var iW = o.width;
			var iH = o.height;
			var iRat = 1;
			if(o.width > _s.maxWidth || o.height > _s.maxHeight){

				iRat = Math.min((_s.maxWidth / o.width),(_s.maxHeight / o.height));
				
				o.width = parseInt(iW * iRat);
				o.height = parseInt(iH * iRat);
				Hemi.log("End dimen: " + (iW * iRat) + "X" + (iH * iRat) + " with (" + iRat + ")");			
			}
			
			this.resizeTo(parseInt(iW * iRat), parseInt(iH * iRat));
			if(this.flushBody) this.flushBody();
			Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(this);});
		},
		template_destroy : function(){
			this._prehandle_imageviewer_load = 0;
		}


  ]]>
	</embedded-script>
</Template></fragment><fragment id = "GroupPicker.xml">
<span>

	<div rid="GroupPickerCont" class="rocket-column-2">
		<p rid="GroupPickerLabel">
			Group:
		</p>
		<p>
			<input type="text" disable="true" rid="group" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseGroup()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickGroup()"/>
			<!--
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openGroup()" />
			-->
		</p>
	</div>
	
	<embedded-script><![CDATA[
	embedded_init : function(){
		var o = this.getBean("rocketType");
		if(!this.getProperties().hideGroup){
			var oP;
			if(o.groupId > 0) oP = AM6Client.get(this.getProperties().typeName.toUpperCase(),o.groupId);
			this.pickGroup("Group",oP);
		}
		else{
			this.getElementByRID("GroupPickerCont").style.display = "none";
		}
	},
	chooseGroup : function(){
		this.manageList( "Group", this.getObjectId(),"pickGroup");
	},

		openGroup : function(){
			var o = this.getBean("rocketType"),oP;
			if(o && o.groupId && this.openItem){
				oP = AM6Client.get("GROUP",o.groupId);
				this.openItem(oP,this.getProperties().typeName);
			}
		},
	pickGroup : function(s, v){
		var o = this.getBean("rocketType");
		if(o.id > 0 && v && v.id > 0 && v.id == o.id){
			Hemi.logError(o.id + " cannot be set to its own Group");
			if(this.setStatus) this.setStatus("Object #" + o.id + " cannot be set to its own Group");
			return;
		}
		o.groupId = (v ? v.id : 0);
		this.getElementByRID("group").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "GroupFields.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ParentPicker.xml']/span" src="${dwac.path}"/>

	<div class="rocket-column-2" rid="dataTypeContainer">
		<p>
			Type:
		</p>
		<p>
			<select rid="groupType" disabled="true" bind="${bean.rocketType}">
				<option>ACCOUNT</option>
				<option>BUCKET</option>
				<option selected="true">DATA</option>
				<option>PERSON</option>
				<option>USER</option>
			</select>
		</p>
	</div>

	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'SharingFrag.xml']/span" src="${dwac.path}"/>
	
	<div class="rocket-column-2" rid="memberPicker" style="display:none;">
		<p rid="memberPickerTitle">
			<span rid="memberPickerToggle"/> <span rid="memberPickerLabel">Members</span>:
		</p>
		<p rid="memberPickerContent">

			<div component="wideselect" rid="membersList">
			</div>

			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addChildMember()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeChildMember()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openChildMember()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(o){
			var o = this.getBean("rocketType");
			this.getElementByRID("groupType").disabled = (o.id ? true : false);

			if(o.id && o.groupType.match(/^(person|account|user|bucket)$/gi)){
				this.toggleField("memberPickerToggle","memberPickerContent");
				this.getElementByRID("memberPicker").style.display = "block";
				this.getComponentByRID("membersList").setLoadHandler(this.scopeHandler("configMembersList",0,1,1));
			}

		},
		
		openChildMember : function(){
			var oI = this.getMembersList().getActiveItem();
			var sType = this.getElementByRID("groupType").value;
			sType = sType.substring(0,1) + sType.substring(1,sType.length).toLowerCase();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,sType);
		},
		addChildMember : function(){
			var sType = this.getElementByRID("groupType").value;
			sType = sType.substring(0,1) + sType.substring(1,sType.length).toLowerCase();
			this.manageList((sType=="Bucket" ? "Data" : sType), this.getObjectId(),"pickMember",uwm.getPathForType(sType),1);
		},
		pickMember : function(s, v){
			var ctl = this;
			if(v){
				var o = this.getBean("rocketType");
				AM6Client.member("GROUP",o.objectId,v.nameType,v.objectId,true,function(s1, v1){
					if(v1 && v1.json) ctl.getMembersList().addItem(v.name,v);
				});
			}
		},
		removeChildMember : function(){
			var oI = this.getMembersList().getActiveItem(), ctl = this;
			if(oI){
				if(oI.data){
					var v = oI.data;
					var o = this.getBean("rocketType");
					AM6Client.member("GROUP",o.objectId,v.nameType,v.objectId,false,function(s1, v1){
						if(v1 && v1.json) ctl.getMembersList().clearItem(oI.index);
					});
				}
			}
		},
		configMembersList : function(s,v){
			var o = this.getBean("rocketType");
			var oL = this.getMembersList();
			oL.getContainer().style.height = "100px";
			oL.getContainer().style.width = "250px";
			this.refreshMembers();
		},
		refreshMembers : function(a){
			var sType = this.getElementByRID("groupType").value;
			//sType = sType.substring(0,1) + sType.substring(1,sType.length).toLowerCase();
		
			var oL = this.getMembersList();
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || o == null || o.id <= 0) return;
			var aL = AM6Client.members("GROUP",o.objectId,(sType == "BUCKET" ? "DATA" : sType));
			for(var i = 0; i < aL.length;i++){
				oL.addItem(aL[i].name,aL[i]);
			}
		},
		getMembersList : function(){
			return this.getComponentByRID("membersList").GetWideSelect();
		},

		addType : function(o){
			Hemi.log("Add group type: " + o.name + ":" + o.mimeType);

			return AM6Client.update("GROUP",o);
		}
	]]></embedded-script>
</span></fragment><fragment id = "Group.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Group";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getProperties().defaultPath) this.getProperties().defaultPath = "~";
			this.getProperties().populate = 0;
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
					var p = AM6Client.find("GROUP","UNKNOWN",this.getProperties().defaultPath);
					o.parentId = (p ? p.id : 0);
					o.groupType = (this.getProperties().defaultGroupType && this.getProperties().defaultGroupType != "UNKNOWN" ? this.getProperties().defaultGroupType : "DATA");
				}
				else if(o.path){
					this.getProperties().defaultPath = o.path;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "GridType.xml">
<span>

	<import-style src="Styles/Designer.css" id="designer"/>
	<import-style src="Styles/GridStyle.css" id="grid"/>

	<div class="buttons_bar" rid="buttons-bar">
		<input type="button" rid="button_refresh" class="designer_button refresh_button" button-action="Refresh"/>
		<input type="button" rid="button_new" class="designer_button new_button" button-action="New"/>
		<input type="button" rid="button_open" class="designer_button open_button" button-action="Open"/>
		<input type="button" rid="button_design" class="designer_button design_button" button-action="Design"/>
		<input type="button" style="display:none;" rid="button_save" class="designer_button save_button" button-action="Save"/>
		<input type="button" rid="button_delete" class="designer_button delete_button" button-action="Delete"/>
		<div rid="button_spacer_1" class="designer_button_spacer"/>
		<input type="text" rid="path" style="margin-top: 5px; width: 120px !important; float: left;" placeholder="~/Path" class="rocket-text"/>
		<input type="button" rid="parentPickerBtn" value="..." style="margin-top:5px;float: left;" class="designer-button" onclick="${this}.chooseParent()"/>
		<input class="rocket-text rocket-text-pick" style="display:none;margin-top: 5px; width: 75px !important; float: left;" type="text" rid="filter" value=""/>
		<input class="rocket-button" type="button" rid="button_search" style="display:none;margin-top: 5px; float: left;" value="?" onclick="${this}._search()"/>
		<div rid="button_spacer_2" class="designer_button_spacer"/>
		<input type="button" rid="button_move_first" disabled="true" class="designer_button" button-action="MoveFirst" value="&lt;&lt;"/>
		<input type="button" rid="button_move_prev" disabled="true" class="designer_button" button-action="MovePrev" value="&lt;"/>
		<input type="button" rid="button_move_next" disabled="true" class="designer_button" button-action="MoveNext" value="&gt;"/>
		<input type="button" rid="button_move_last" disabled="true" class="designer_button" button-action="MoveLast" value="&gt;&gt;"/>
		<div class="designer_button_label" rid="record_label"/>
	</div>
	<div class="uwm-box-border" component="wideselect" rid="typelist">
	</div>
	<div rid="control_bar" style="display:none;">
		<input class="rocket-button" type="button" value="Pick and Continue" rid="button_pickmulti" onclick="${this}.pickItem(1)"/>
		<input class="rocket-button" type="button" value="Pick" rid="button_pickone" onclick="${this}.pickItem()"/>
		<input class="rocket-button" type="button" value="Cancel" rid="button_cancelpick" onclick="${this}.cancelPickItem()"/>
	</div>
	<div rid="debugCont" style="display:none;clear:both;" class="rocket-column-2">
		<p rid="lblDebug">
			Debug:
		</p>
		<p>
			<input rid="btnDebug" type="button" class="rocket-button" value="Debug" onclick="${this}.sendToDebug()"/>
		</p>
	</div>
	<p><span rid="status">[ ... ]</span></p>
	<!--
	Members:
		InitializeIOGrid
		LoadIOGrid
		SetTotalItemCount
		ToggleIOGridSelectItem
		
	Virtuals:
		CreateNewItem
		SaveSelectedItem
		provideOpenItem
		provideSelectItem
		DeleteSelectedItem
		refreshList
		DrawIOGridItem
		DrawIOGridHeader
		DrawIOGridFooter
		preparePathChange
		provideRefresh
		provideList
		provideCount
		search
	-->
	<embedded-script>
		<![CDATA[
		initGrid : function(sTypeName, sDefPath, sViewTypeName, bNotAGroup, bNoPopulate,vParent,bManualPick,bShowSearch){

			var _s = this.getProperties(),_o = this.getObjects(),o;
			
			this.scopeHandler("profiler_loaded", 0, 0, 1);
			this.getElementByRID("debugCont").style.display = (uwm.debugMode ? "block" : "none");
			
			_s.populate = (bNoPopulate ? 0 : 1);
			
			if(!_s.manualPick) _s.manualPick = (bManualPick ? 1 : 0);
			if(_s.manualPick){
				this.getElementByRID("control_bar").style.display = "block";
			}
			if(vParent){
				_o.parentRef = vParent;
			}
			
			if(bShowSearch){
				this.getElementByRID("filter").style.display = "";
				this.getElementByRID("button_search").style.display = "";
			}
	
			if(!sViewTypeName) sViewTypeName = sTypeName;
			_s.typeName = sTypeName;
			_s.viewTypeName = sViewTypeName;
			_s.start_record = 0;
			_s.record_count = 10;

			if(bNotAGroup) _s.noGroup = 1;
			if(!_s.noGroup || vParent){
				var s = this.getParentPath();
				this.getElementByRID("path").placeholder = (sDefPath ? sDefPath : (s ? s : "~/" + sTypeName + "s"));
				this.scopeHandler("input_keypress",0,0,1);
				this.getElementByRID("path").onkeypress = this._prehandle_input_keypress;	
			}
			else{
				this.getElementByRID("path").style.display = "none";
				this.getElementByRID("parentPickerBtn").style.display = "none";
			}
			if(this.setTitle) this.setTitle(sViewTypeName);
			
			if(_s.openerId && (o = Hemi.registry.service.getObject(_s.openerId)) && o.parentResolver){
				o.parentResolver(this); 
			}
			else{
				///Hemi.log("DON'T CALL PARENT because " + _s.openerId + " : " + (o ? (typeof o.parentResolver) : ""));
			}
			
			this.getComponentByRID("typelist").setLoadHandler(this.scopeHandler("configList",0,1,1));
			
		},
		sendToDebug : function(o){
        	this.getObjects().debugObject = o; 
        	Hemi.app.createWindow('Framework Profiler','Templates/FrameworkProfiler.xml','Profiler',0,0,0,this._prehandle_profiler_loaded);
        },
        _handle_profiler_loaded : function(oW){
        	if(typeof oW.ShowTab == "function" && typeof ActiveSource == "object"){
				oW.ShowTab("Active Source");
				var oSource = oW.getElementByRID("oSource");
				var oEval = oW.getElementByRID("oEval");
				var sCont = "";
				ActiveObjects.valContainer = 0;
				ActiveObjects.valReference = 0;
				ActiveObjects.valBridge = 0;
				ActiveObjects.valComponent = 0;
				var oBean = (this.getObjects().debugObject ? this.getObjects().debugObject : this.getBean("rocketType"));
				delete this.getObjects().debugObject;
				oEval.value = "ActiveObjects.val";
				ActiveObjects.val = (oBean ? oBean : this);

				if(oBean){
					oW.Reflect();
				}
				else{
					oSource.value = 
						"Active Template"
					;
				}
			}
			      	
        },
		chooseParent : function(){
			var sType = this.getProperties().viewTypeName;
			if(!sType.match(/^(group|permission|role)$/gi)) sType = "Group";
			this.manageList(sType, 0,"pickParent",uwm.getPathForType(sType),1);
		},
		pickParent : function(s, v){
			if(!v || v == null) return;
			this.getElementByRID("path").value = (v.path ? v.path : v.groupPath) + "/" + v.name;
			this.refreshList();
		},
		
		/// TODO: Refactor some of this common code into an external fragment
		///
		manageList : function(sType, sListId, sFN, sDefPath,bManPick){
			var oProps = {openerId:this.getObjectId(),listType:sType,picker:1,manualPick:bManPick,pickFunction:sFN,listId:sListId,defaultPath:sDefPath,noMask:1};
			Hemi.app.createWindow("ManageList", uwm.getApiTypeView(sType) + "/Forms/List" + sType + "s.xml", "Manager-" + Hemi.guid(), 0, 0, oProps, 0)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(520, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	oW.setHideOnClose(0);
	            }
	           });
		},
		parentResolver : function(v){
			var _s = this.getProperties();
			if(this.resolve) this.resolve(v);
			if(_s.openerId && (o = Hemi.registry.service.getObject(_s.openerId)) && o.parentResolver) o.parentResolver(v);
		},
		resizeList : function(){
			if(this.getBody) this.resizeFrame(this.getList().getContainer());
			else{
				var iH = this.getContainer().parentNode.parentNode.offsetHeight - this.getElementByRID("typelist").offsetTop;
				this.getList().getContainer().style.height = iH + "px";
			}
			var iW = this.getContainer().parentNode.parentNode.offsetWidth - 200;
		},
		embedded_init : function(){
		
		},
		embedded_destroy : function(){
			Hemi.message.service.unsubscribe(this, "onsessionrefresh", "handle_list_session_refresh");
			Hemi.message.service.unsubscribe(this, "onchangecommunity", "refreshCommunity");
			this._prehandle_profiler_loaded = 0;
			this._prehandle_input_keypress = null;
		},
		_handle_input_keypress : function(e){
			e = Hemi.event.getEvent(e);
			
			if(e.keyCode == 13){
				var sP = this.getElementByRID("path").value;
				if(!sP.length) sP = this.getElementByRID("path").placeholder;
				if(sP.length && sP.match(/^[~\.\/]/) == null){
					if(this.search) this.search(sP);
					else this.defaultSearch(sP);
				}
				else{
					if(this.getProperties().noGroup) this.getObjects().parentRef = AM6Client.find(this.getProperties().typeName.toUpperCase(),"UNKNOWN",sP);
					this.refreshList();
				}
			}
		},
		closeToFocus : function(){
			var o;
			if(this.Close) this.Close();
			if(this.getProperties().openerId && (o = Hemi.registry.service.getObject(this.getProperties().openerId)) && o.getFocus){
				o.getFocus();
			}
		},
		cancelPickItem : function(){
			if(this.Close) this.closeToFocus();
		},
		
		_search : function(){
			var filter = this.getElementByRID("filter").value;
			if(this.search) this.search(filter);
			else this.defaultSearch(filter);
		},
		defaultSearch : function(sFilter){
			var oM = AM6Client.newFieldMatch("TEXT","NAME","LIKE","*" + sFilter + "*");
			var oS = AM6Client.newSortQuery("NAME","ASCENDING");
			var oReq = AM6Client.newSearchRequest(this.getProperties().typeName.toUpperCase(),0,0,0,10,false,oS,[oM]);
			var ctl = this;
			AM6Client.search(oReq,function(s,v){
				if(v && v.json){
					///alert(v.json);
					var oL = ctl.getList();
					oL.clearItems();
					ctl.setTotalCount(v.json.length);
					for(var i = 0; i < v.json.length; i++){
						var sn = (ctl.decorateListItemName ? ctl.decorateListItemName(v.json[i]) : v.json[i].name);
						oL.addItem(sn, v.json[i]);
					}
				}
			});
		},
		configList : function(){
			if(!this.local_handle_resize) this.local_handle_resize = this.resizeList;
			this.resizeList();
			this.getList().setResultHandler( this.scopeHandler("typelistclick",0,0,1));
			this.refreshList();
			Hemi.message.service.subscribe(this, "onsessionrefresh", "handle_list_session_refresh");
			Hemi.message.service.subscribe(this, "onchangecommunity", "refreshCommunity");
		},
				
		getList : function(){
			return this.getComponentByRID("typelist").GetWideSelect();
		},
		getParentPath : function(){
			var s,vParent = this.getObjects().parentRef;
			if(vParent && (vParent.nameType.match(/^ROLE$/) || vParent.nameType.match(/^PERMISSION$/))){
				s = vParent.parentPath + "/" + vParent.name;
			}
			return s; 
		},
		getPath : function(){
			if(this.getProperties().noGroup && !this.getObjects().parentRef) return 0;
			var o = this.getElementByRID("path"), s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s){
					s = this.getParentPath();
					if(!s) s = "~/" + this.getProperties().typeName + "s";
				}
			}
			return s;
		},
		refreshCommunity : function(s, v){
			var sPath = uwm.getPathForType(this.getProperties().typeName,"~/" + this.getProperties().typeName + "s");
			this.getElementByRID("path").placeholder = sPath;
			this.getElementByRID("path").value = sPath;
			this.refreshList();
		},
		handle_list_session_refresh : function(s, v){
			this.refreshList();
		},
		pickItem : function(b){
			var o = this.getList().getActiveItem();
			this.setStatus("");
			if(!o){
				this.setStatus("Nothing is selected");
				return;
			}
			this._handle_typelistclick("manualpick",o);
			if(!b && this.Close) this.closeToFocus();
		},

		_handle_typelistclick : function(s, v){
			this.enableButton("button_delete");
			this.enableButton("button_open");
			/// TODO: deprecate handle_list_click for provideSelectItem
			if(this.handle_list_click) this.handle_list_click(v);
			if(this.provideSelectItem) this.provideSelectItem(v);
			if(this.getProperties().picker && (!this.getProperties().manualPick || s == "manualpick")){
				var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
				if(this.getProperties().pickFunction && oOpener[this.getProperties().pickFunction]){
					oOpener[this.getProperties().pickFunction](this.getProperties().formType,v.data, this.getProperties().sourceId,this);
				}
				else{
					var oL = 0;
					if(this.getProperties().listId) oL = Hemi.registry.service.getObject(this.getProperties().listId);
					else if(oOpener.getList) oL = oOpener.getList();
					else if(oOpener["get" + this.getProperties().typeName + "sList"]) oL = oOpener["get" + this.getProperties().typeName + "sList"]();
					if(oL && v && v.data) oL.addItem(v.data.name, v.data);
					else if(this.getProperties().pickFunction && oOpener[this.getProperties().pickFunction]) oOpener[this.getProperties().pickFunction](this.getProperties().formType,v.data, this.getProperties().sourceId,this);
				}
				if(this.Close && s != "manualpick") this.closeToFocus();
			}
		},
		
		showButton : function(n){
				var o = this.getElementByRID("button_" + n);
				if(o) o.style.display = "";
		},
		hideButton : function(n){
				var o = this.getElementByRID("button_" + n);
				if(o) o.style.display = "none";
		},
		_handle_exec_button : function(e){
			var o = Hemi.event.getEventSource(e);
			var d = this.get_frame("designer");
			var s = o.getAttribute("button-action"); 
			var bRM = this.getProperties().response_mode;
			var oItem = this.getList().getActiveItem();
			switch(s){
				case "New":
					this.createItem();
					break;
				case "Save":
					if(typeof this.SaveSelectedItem == "function") this.SaveSelectedItem();
					break;
				case "MoveLast":
					this.getProperties().start_record = this.getProperties().total_count - this.getProperties().record_count;
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "MoveFirst":
					this.getProperties().start_record = 0;
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "MovePrev":
					this.getProperties().start_record -= this.getProperties().record_count;
					if(this.getProperties().start_record < 0) this.getProperties().start_record = 0;
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "MoveNext":
					this.getProperties().start_record += this.getProperties().record_count;
					if(this.getProperties().total_count > 0 && this.getProperties().start_record >= this.getProperties().total_count){
						this.getProperties().start_record = this.getProperties().total_count - this.getProperties().record_count;
					}
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "Refresh":
					AM6Client.clearCache(this.getProperties().typeName.toUpperCase(),1);
					this.refreshList();
					break;
				case "Open":
					if(!oItem) return;
					this.openItem(oItem.data);
					break;
				case "Design":
					if(!oItem){
						if(this.getProperties().typeName == "Data") this.openWindow(this.getProperties().viewTypeName,0,"Design");
					}
					else{
						this.designItem(oItem.data);
					}
					break;
				case "Delete":
					if(!oItem) return;
					if(this.deleteItem(oItem.data)){
						this.disableButton("button_delete");
						this.disableButton("button_open");
						//this.refreshList();
					}
					break;
			}
		},
		openDataData : function(a){
			if(a.detailsOnly) a = AM6Client.get("DATA", a.objectId);
			var vData = {media_name:a.name,media_id:a.id,maxWidth:500,maxHeight:500,media_url:"data:" + a.mimeType + ";base64," + a.dataBytesStore};
			Hemi.app.createWindow("View " + a.name, "${dwac.path}[ImageViewer.xml]", "View-" + a.id, 0, 0, vData)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 300);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            } 
            });
	
		},
		designItem : function(o){
			/// Data

			if(o.nameType == "DATA" && o.mimeType && o.mimeType.match(/^text/)){
				this.openItem(o,"DataDesign",1);
			}
			else if(o.nameType == "DATA" && o.mimeType && o.mimeType.match(/^image/)){
				this.openDataData(o);
			}
			else if(o.nameType == "FORM" && !o.isTemplate){
				this.openItem(o,"FormView");
			}
			else if(o.nameType == "PROJECT"){
				this.openItem(o,"ProjectDesign",1);
			}
			else if(o.nameType == "GROUP"){
				if(!o.populated) o = AM6Client.get("GROUP",o.objectId);
				this.getProperties().listGroupType = o.groupType;
				this.getElementByRID("path").value = o.path;
				this.getProperties().start_record = 0;
				this.getProperties().viewType = o;
				this.refreshList();
			}
			else if(o.nameType == "ROLE" || o.nameType == "PERMISSION"){
				this.getObjects().parentRef = o;
				this.getElementByRID("path").value = this.getParentPath();
				this.getProperties().start_record = 0;
				//this.getProperties().viewType = o;
				this.refreshList();
				//this.openItem(o,"ListGroups",1);
			}
			else if(o.nameType.match(/^(account|person|user)$/gi)){
				this.openItem(o, "Profile");
			}

		},
		openItem : function(o,v,b){
			var _s = this.getProperties();

			if(_s.populate && !o.populated){
				if(!v && o.nameType && o.nameType.match(/^data$/gi) && o.detailsOnly && o.blob){
					Hemi.log("Not pulling own blob data for " + o.name + " unless specifically requested.");
				}
				else if(!o.nameType.match(/^data$/gi) || o.detailsOnly){
					Hemi.log("Not populated.  Fetching a populated version.");
					if(o.nameType.match(/^group$/gi)) o = AM6Client.get("GROUP",o.objectId);
					else if(o.nameType.match(/^(role|permission)$/gi)) o = AM6Client.get(this.getProperties().typeName.toUpperCase(), o.id);
					else if(this.provideItem) o = this.provideItem(this.getProperties().typeName,o);
					else if(o.id)  o = AM6Client.get(this.getProperties().typeName.toUpperCase(), o.id);
					else o = AM6Client.getByName(this.getProperties().typeName.toUpperCase(), AM6Client.find("GROUP","DATA",o.groupPath).objectId,o.name);
					if(!o || o == null){
						Hemi.logError("Failed to retrieve object");
						alert("Unable to open item");
						return;
					}
					if(!o.populated) alert("still not populated");
				}
			}
			if(this.provideOpenItem) this.provideOpenItem(o);
			else this.openWindow(this.getProperties().viewTypeName, o, v, (b ? o.path : 0));
		},
		createItem : function(){
			if(this.provideCreateItem) this.provideCreateItem(this.getProperties().viewTypeName);
			else this.openWindow(this.getProperties().viewTypeName);
		},
		openWindow : function(sType,oType,v, p){
			var oProps = {parentRef:this.getObjects().parentRef,defaultPath:(p ? p : this.getPath()),openerId:this.getObjectId(),listType:sType,picker:0,viewType:oType,listId:this.getList().getObjectId()};
			if(sType.match(/^group$/gi)) oProps.defaultGroupType = this.getProperties().listGroupType;
			Hemi.app.createWindow((oType && oType.id ? oType.name : "New" + sType), uwm.getApiTypeView(sType) + "/Forms/" + (v ? v : sType) + ".xml", "View-" + (oType && oType.id ? sType + "-" + oType.id : Hemi.guid()), 0, 0, oProps)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo((v ? 700 : 475), (v ? 500 : 400));
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		},
		deleteItem : function(o){
			var b = 0;
			if(!uwm.rule("IsLoggedIn")){
				this.setStatus("Not Authenticated");
				return b;
			}
			else if(this.provideDelete){
				b = this.provideDelete(o);
			}
			else{

				var ctl = this;
				var vCfg = {
					hemiSvcCfg:1,
					async:1,
					handler:function(s, v){
						if(ctl.getReadyState() != 4) return;
						if(typeof v.json == "boolean" && v.json){
							Hemi.log("Deleted " + ctl.getProperties().typeName + " object #" + o.id);
							ctl.setStatus("Deleted " + ctl.getProperties().typeName + " object #" + o.id);
							ctl.refreshList();
						}
						else{
							Hemi.logError("Unabe to delete " + ctl.getProperties().typeName + " object #" + o.id);
							ctl.setStatus("Unable to delete " + ctl.getProperties().typeName + " object #" + o.id);
						}
					}
				};
				return AM6Client.delete(this.getProperties().typeName.toUpperCase(),o.objectId,vCfg.handler);
			}
			
		
		},
		disableButtons : function(){
			this.disableButton("button_delete");
			this.disableButton("button_open");
			this.disableButton("button_move_first");
			this.disableButton("button_move_last");
			this.disableButton("button_move_next");
			this.disableButton("button_move_prev");		
		},

		setTotalCount : function(i){
			this.getProperties().total_count = i;
			this.disableButton("button_move_first");
			this.disableButton("button_move_last");
			this.disableButton("button_move_next");
			this.disableButton("button_move_prev");	
			if(this.getProperties().start_record > 0){
				this.getElementByRID("button_move_prev").disabled = false;
				this.getElementByRID("button_move_first").disabled = false;
			}
			
			if((this.getProperties().start_record + this.getProperties().record_count) < this.getProperties().total_count){
				this.getElementByRID("button_move_next").disabled = false;
				this.getElementByRID("button_move_last").disabled = false;
			}

			if(this.getProperties().total_count > 0) Hemi.xml.setInnerXHTML(this.getElementByRID("record_label"),(this.getProperties().start_record + 1) + "-" + (this.getProperties().start_record + this.getProperties().record_count) + " of " + this.getProperties().total_count);
			else Hemi.xml.setInnerXHTML(this.getElementByRID("record_label"),"0 of 0");

		},

		refreshList : function(bSkipCountReset){
			var sPath, _s = this.getProperties(), _o = this.getObjects();
			var sFilt = this.getElementByRID("filter").value;
			
			if(this.provideRefresh) this.provideRefresh(bSkipCountReset);

			if(!_s.noGroup){
				sPath = this.getPath();
			}
			var oL = this.getList();
			oL.clearItems();
			this.setStatus("");
			if(!bSkipCountReset) this.setTotalCount(0);
			else if(_s.typeName){
				uwmServiceCache.clearServiceCache(_s.typeName);
			}
			var vComp = {};
			if(_s.picker && !_s.noMask){
				var oOpener = Hemi.registry.service.getObject(_s.openerId);
				var oL2 = 0;
				if(_s.listId){
					oL2 = Hemi.registry.service.getObject(_s.listId);
					if(!oL2.getObjectType().match(/wideselect/gi)) oL2 = 0;
				}

				if(oOpener.getList) oL2 = oOpener.getList();
				else if(oOpener["get" + _s.typeName + "sList"]) oL2 = oOpener["get" + _s.typeName + "sList"]();
				if(oL2){
					for(var i = 0; i < oL2.getItems().length;i++) vComp[oL2.getItems()[i].name]=1;
				}
			}
			if(!_s.typeName){
				this.setStatus("Pending ...");
				return;
			}
			
			if(!uwm.rule("IsLoggedIn")){
				this.setStatus("Not Authenticated");
			}
			else{
				/// TODO - change the count method API to use the path like the other calls
				///
				if(!bSkipCountReset){
					var count = 0;

					if(this.provideCount) count = this.provideCount(sPath, sFilt);
					else if(sPath && !_s.noGroup){
						var sT = "GROUP";
						var sTO = "UNKNOWN";
						if(_s.typeName.match(/^(permission|role)$/gi)){
							sT = _s.typeName.toUpperCase();
							sTO = "UNKNOWN";
						}
						var oP = AM6Client.find(sT,sTO,sPath);
						if(oP && oP != null){
							if(this.preparePathChange) this.preparePathChange(oP, sFilt);
							if(oP.groupType && oP.groupType.match(/^bucket$/gi)){
								
								if(this.provideMemberCount) count = this.provideMemberCount();
							}
							else{
								count = AM6Client.count(_s.typeName.toUpperCase(),oP.objectId);
							}
						}
					}
					else count = AM6Client.count(_s.typeName.toUpperCase(),(_o.parentRef ? _o.parentRef.objectId : "null")); 
					if(count != null) this.setTotalCount(count);
				}
				else{
					this.setTotalCount(_s.total_count);
				}
				var aList = [];
				var sFilt = this.getElementByRID("filter").value;
				var tname = _s.typeName;
				if(this.provideList) aList = this.provideList(sPath, sFilt, _s.start_record,_s.record_count);
				else if(sPath){
					
					if(!tname.match(/^(group)$/gi)){
						var sT = "GROUP";
						/// var sTO = "DATA";
						var sTO = "UNKNOWN";
						if(tname.match(/^(permission|role)$/gi)){
							sT = tname.toUpperCase();
							sTO = "UNKNOWN";
						}
						var oObj = AM6Client.find(sT, sTO, sPath);
						if(oObj && oObj != null){
							if(oObj.groupType && oObj.groupType.match(/^bucket$/gi)){
								if(this.provideMemberList) aList = this.provideMemberList(oObj, sFilt, _s.start_record,_s.record_count);
							}
							else{
								aList = AM6Client.list(tname.toUpperCase(), oObj.objectId,_s.start_record,_s.record_count);
							}
						}
					}
					else{
						var oObj = AM6Client.find(tname.toUpperCase(),_s.listGroupType,sPath);
						if(oObj && oObj != null) aList = AM6Client.list(tname.toUpperCase(), oObj.objectId,_s.start_record,_s.record_count);
					}
				}
				else{
				
					if(!tname.match(/^(permission|role)$/gi)) aList = AM6Client.list(tname.toUpperCase(),(_o.parentRef ? _o.parentRef.objectId : "null"),_s.start_record,_s.record_count);
					else  aList = AM6Client.list(tname.toUpperCase(),(_o.parentRef ? _o.parentRef.objectId : "null"),_s.start_record,_s.record_count);
				}
				
				if(_s.start_record == 0 && (_s.typeName.match(/^(group|permission|role)$/gi)) && (_s.viewType || _o.parentRef)){
					var oP = AM6Client.get(tname.toUpperCase(),(_s.viewType ? _s.viewType.parentId : _o.parentRef.parentId));
					if(oP != null){
						var sn = (this.decorateListItemName ? this.decorateListItemName(oP) : "..");
						oL.addItem(sn, oP);
					}
				}
				for(var i = 0; aList != null && i < aList.length;i++){
					if(vComp[aList[i].name]){
						continue;
					}
					var sn = (this.decorateListItemName ? this.decorateListItemName(aList[i]) : aList[i].name);
					oL.addItem(sn, aList[i]);
				}
			}
		
		},
		setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("status"),s);
		},
		decorateProfileIcon : function(o){
				var _p = this.getProperties();
				if(!_p.iconView) return o.name;
				var w = (_p.iconWidth ? _p.iconWidth : 48);
				var h = (_p.iconHeight ? _p.iconHeight : 48);
				var oL = document.createElement("div");
				var oP = document.createElement("p");
				oP.setAttribute("style","text-indent:0px !important;");
				var oP2 = document.createElement("p");
				var oI = document.createElement("img");
				oI.setAttribute("class","alignright");
				var sIco = "/AccountManagerService/Media/Icons/user_48x48.png";
				var sPid = AM6Client.getAttributeValue(o,"v1-profile",0);
				
				oP.appendChild(oI);
				oP.appendChild(document.createTextNode(o.name));
				oP.appendChild(document.createElement("br"));
				oP.appendChild(document.createTextNode((o.description ? o.description : "")));
				oP.appendChild(document.createElement("br"));
				oP.appendChild(document.createTextNode((o.alias ? o.alias : "")));
				oL.appendChild(oP);
				oP2.setAttribute("class","clearalign");
				oL.appendChild(oP2);
				if(sPid){
					AM6Client.get("DATA", sPid, function(s, v){
						if(v && v.json) v = v.json;
						if(v && v != null){;
							var sOrg = AM6Client.dotPath(v.organizationPath);
							oI.setAttribute("src","/AccountManagerService/thumbnail/" + sOrg + "/Data" + v.groupPath + "/" + v.name + "/" + w + "x" + h);
						}
						else{
							oI.setAttribute("src",sIco);
						}
					});
				}
				else{
					oI.setAttribute("src",sIco);
				}
				return oL;
			}	

	]]></embedded-script>
</span></fragment><fragment id = "GoalPicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="goalPickerTitle">
			<span rid="goalPickerToggle"/> Goals:
		</p>
		<p rid="goalPickerContent">
			<div component="wideselect" rid="goalsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addGoal()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeGoal()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openGoal()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("goalPickerToggle","goalPickerContent");
			if(!this.getProperties().goalListProp) this.getProperties().goalListProp = "goals";
		},
		openGoal : function(){
			var oI = this.getGoalsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Goal");
		},
		addGoal : function(){
			this.manageList("Goal", this.getGoalsList().getObjectId());
		},
		removeGoal : function(){
			var oI = this.getGoalsList().getActiveItem();
			if(oI) this.getGoalsList().clearItem(oI.index);
		},

		configGoalsList : function(s,v){
			var oL = this.getGoalsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshGoals();
		},
		refreshGoals : function(){
			var oL = this.getGoalsList(), aP = this.getProperties().goalListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getGoalsList : function(){
			return this.getComponentByRID("goalsList").GetWideSelect();
		},
		prepareSaveGoalsList : function(o){
			aP = this.getProperties().goalListProp;
			o[aP] = [];
			var aGoals = this.getGoalsList().getItems();
			for(var i = 0; i < aGoals.length;i++) o[aP].push(aGoals[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "GoalFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid="goalType" bind="${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>GOAL</option>
				<option>STAKE</option>
			</select>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Priority:
		</p>
		<p>
			<select rid="priority" bind="${bean.rocketType}">
	    		<option>UNKNOWN</option>
	    		<option>LOW</option>
	    		<option>NORMAL</option>
	    		<option>HIGH</option>
	    		<option>VITAL</option>
			</select>
		</p>
	</div>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BudgetPickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'SchedulePickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ResourcePickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'RequirementPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'CasePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DependencyPicker.xml']/span" src="${dwac.path}"/>

	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType"), _s = this.getProperties();
			_s.caseListProp = "cases";
			_s.dependencyListProp = "dependencies";
			_s.requirementListProp = "requirements";
			_s.scheduleProp = "schedule";
			_s.budgetProp = "budget";
			_s.resourceProp = "assigned";
			Hemi.xml.setInnerXHTML(this.getElementByRID("resourcePickerTitle"),"Assigned To:");
			this.getComponentByRID("requirementsList").setLoadHandler(this.scopeHandler("configRequirementsList",0,1,1));
			this.getComponentByRID("dependenciesList").setLoadHandler(this.scopeHandler("configDependenciesList",0,1,1));
			this.getComponentByRID("casesList").setLoadHandler(this.scopeHandler("configCasesList",0,1,1));
			this.pickBudget('Budget',o.budget);
			this.pickSchedule('Schedule',o.schedule);
			this.pickResource('Resource',o.assigned);
		},
		addType : function(o){
			Hemi.log("Add goal type: " + o.name + ":" + o.text);

			return AM6Client.update("GOAL",o);
		},
		prepareSave : function(o){
			this.getElementByRID("text").className = "rocket-text";
			this.prepareSaveRequirementsList(o);
			this.prepareSaveDependenciesList(o);
			this.prepareSaveCasesList(o);
			/*
			if(!this.validateForPattern("text","not-empty")){
				this.getElementByRID("text").className = "rocket-text rocket-text-error";
				this.setStatus("Text cannot be empty");
				return 0;
			}
			*/
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Goal.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			var _s = this.getProperties();
			_s.resourceProp = "assigned";
			_s.typeName = "Goal";
			_s.defaultPath = uwm.getPathForType(_s.typeName);
			_s.viewBase = uwm.getApiTypeView(_s.typeName);
			if(!this.getBean("rocketType")){
				var o = _s.viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete _s.viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "GalleryShare.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<embedded-script><![CDATA[
		template_init : function(){
		},
		template_destroy : function(){
			this._prehandle_manager_loaded;
		},
		openItem : function(o,typeName,viewTypeName){
			if(!typeName) return;
			if(!viewTypeName) viewTypeName = typeName;
			if(!o.populated){
				if(o.nameType && o.nameType.match(/^data$/gi) && o.detailsOnly && o.blob){
					Hemi.log("Not pulling own blob data for " + o.name + " unless specifically requested.");
				}
				else{
					Hemi.log("Not populated.  Fetching a populated version.");
					o = rocket["get" + typeName](o.name,AM6Client.find("GROUP","DATA",o.groupPath));
					if(!o.populated) alert("still not populated");
				}
			}
			this.openWindow(viewTypeName, o);
		},
		openWindow : function(sType,oType){
			var oProps = {openerId:this.getObjectId(),listType:sType,picker:0,viewType:oType,listId:0};
			Hemi.app.createWindow((oType && oType.id ? oType.name : "New" + sType), "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/" + sType + ".xml", "View-" + (oType && oType.id ? sType + "-" + oType.id : Hemi.guid()), 0, 0, oProps)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(400, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		}
	]]></embedded-script>
</Template></fragment><fragment id = "FunctionFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Logical Order:
		</p>
		<p>
			<input type="text" rid="logicalOrder" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Score:
		</p>
		<p>
			<input type="text" rid="score" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Function Type:
		</p>
		<p>
			<select rid="functionType" bind="${bean.rocketType}">
			<option>UNKNOWN</option>
			<option>JAVA</option>
			<option>JAVASCRIPT</option>
			<option>REST</option>
			</select>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Source Url:
		</p>
		<p>
			<input type="text" rid="sourceUrl" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Source Urn:
		</p>
		<p>
			<input type="text" rid="sourceUrn" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
			<input type="button" class="rocket-button" value="..." onclick="${this}.findType(1)"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getProperties().referByUrn = 1;
		},
		addType : function(o){
			Hemi.log("Add function type: " + o.name + ":" + o.functionType);
			return AM6Client.update(o.nameType,o);
		},
		findType : function(){

			this.manageList("Data",0,"pickType");
		},
		pickType : function(t, o){
			this.importType(o,1);
			
		},

		importType : function(oBean,bSkipName){
			o = this.getBean("rocketType");
			var _s = this.getProperties();
			if(!oBean.id || !oBean.nameType.match(/^(data)$/gi)){
				Hemi.logError("Unsupported function import type " + oBean.nameType + " #" + oBean.id);
				return;
			}
			this.getElementByRID("sourceUrl").value = "";
			this.getElementByRID("sourceUrn").value = oBean.urn;

			
		},
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Function.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Function";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName,"~/Functions");
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "FormView.xml">
<Template>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'FormViewTools.xml']/span" src="${dwac.path}"/>
<embedded-script><![CDATA[
	embedded_init : function(){
		var oForm = this.getProperties().viewType; 
		/// bug note: embedded_init not being derefennced when cleaning and loading directly from a nodeset in the same function call
		if(!oForm) return;

		this.getObjects().dynPattern = [];
		this.getObjects().entities = {};
		this.getObjects().entityMap = {};
		var oFormTemplate = (oForm.template ? AM6Client.get("FORM",oForm.template.id) : 0);
		delete this.getProperties().viewType;
		
		if(oFormTemplate.isGrid) this.viewGridForm(oForm, oFormTemplate);
		else this.viewForm(oForm, oFormTemplate);
		if(this.setTitle) this.setTitle("View " + oForm.name + " Data");
	}
]]></embedded-script>
</Template></fragment><fragment id = "FormPickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Form:
		</p>
		<p>
			<input type="text" disable="true" rid="form" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseForm()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickForm('Form')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openForm()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		var o = this.getBean("rocketType");
		this.pickForm('Form',o.form);
	},
	chooseForm : function(){
		this.manageList("Form", this.getObjectId(),"pickForm");
	},
		openForm : function(){
			var o = this.getBean("rocketType");
			if(o && o.form && this.openItem) this.openItem(o.form,"Form");
		},

	pickForm : function(s, v){
		var o = this.getBean("rocketType");
		o.form = v;
		this.getElementByRID("form").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "FormPicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			<span rid="formPickerToggle"/> Forms:
		</p>
		<p rid="formPickerContent">
			<div component="wideselect" rid="formsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addForm()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeForm()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openForm()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		this.toggleField("formPickerToggle","formPickerContent");
		if(!this.getProperties().formListProp) this.getProperties().formListProp = "forms";
		
	},
	openForm : function(){
		var oI = this.getFormsList().getActiveItem();
		if(oI && oI.data && this.openItem){
			if(!oI.data.populated) oI.data = AM6Client.get("FORM",oI.data.id);
			var oProps = {viewType:oI.data};
			Hemi.app.createWindow(oI.data.name, "${dwac.path}[FormView.xml]", "View-" + oI.data.id, 0, 0, oProps)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(600, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		}
	},
	addForm : function(){
			this.manageList("Form", this.getFormsList().getObjectId());
		},
		removeForm : function(){
			var oI = this.getFormsList().getActiveItem();
			if(oI) this.getFormsList().clearItem(oI.index);
		},

		configFormsList : function(s,v){
			var oL = this.getFormsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshForms();
		},
		refreshForms : function(){
			var oL = this.getFormsList(),aP = this.getProperties().formListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getFormsList : function(){
			return this.getComponentByRID("formsList").GetWideSelect();
		},
		
		prepareSaveFormsList : function(o){
			aP = this.getProperties().formListProp;
			o[aP] = [];
			var aForms = this.getFormsList().getItems();
			for(var i = 0; i < aForms.length;i++) o[aP].push(aForms[i].data);
		}
	
	]]></embedded-script>
</span></fragment><fragment id = "FormFields.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'FormViewTools.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Is Template:
		</p>
		<p>
			<input onclick="${this}.displayTemplate()" type="checkbox" bind="${bean.rocketType}" rid="isTemplate"/>
		</p>
	</div>
	<div rid="gridCont" style="display: none;" class="rocket-column-2">
		<p>
			Is Grid:
		</p>
		<p>
			<input type="checkbox" bind="${bean.rocketType}" rid="isGrid"/>
		</p>
	</div>	
	<div rid="templateCont" style="display: none;" class="rocket-column-2">
		<p>
			Template:
		</p>
		<p>
			<input type="text" disable="true" rid="formTemplate" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseTemplate()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickTemplate('Form')"/>
			<input type="button" value="&gt;" class="rocket-button" onclick="${this}.openTemplate()"/>
		</p>
	</div>
	<div rid="viewTemplateCont" style="display: none;" class="rocket-column-2">
		<p>
			View:
		</p>
		<p>
			<input type="text" disable="true" rid="formViewTemplate" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseViewTemplate()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickViewTemplate('Note')"/>
			<input type="button" value="&gt;" class="rocket-button" onclick="${this}.openViewTemplate()"/>
			<input type="button" value="^" class="rocket-button" onclick="${this}.createViewTemplate()"/>
		</p>
	</div>

	<div rid="viewCont" style="display: none;" class="rocket-column-2">
		<p>
			View:
		</p>
		<p>
			<input type="button" class="rocket-button" value="View" onclick="${this}.openFormView()"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			<span rid="formPickerToggle"/> Child Forms:
		</p>
		<p rid="formPickerContent">
			<div component="wideselect" rid="formsList">
			</div>
			<span rid="formsCtrl" style="display: none">
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addForm()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeForm()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openForm()"/>
			</span>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			<span rid="elementPickerToggle"/> Elements:
		</p>
		<p rid="elementPickerContent">
			<div component="wideselect" rid="elementsList">
			</div>
			<span rid="elementsCtrl" style="display: none">
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addElement()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeElement()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openElement()"/>
			<input type="button" value="^" class="rocket-button" onclick="${this}.createElementViewTemplate()"/>
			</span>
		</p>
	</div>
	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getComponentByRID("elementsList").setLoadHandler(this.scopeHandler("configElementsList",0,1,1));
			this.getComponentByRID("formsList").setLoadHandler(this.scopeHandler("configFormsList",0,1,1));
			var o = this.getBean("rocketType");
			this.toggleField("formPickerToggle","formPickerContent");
			this.toggleField("elementPickerToggle","elementPickerContent");
			this.pickTemplate('Form',o.template);
			this.pickViewTemplate('Note',o.viewTemplate);
			this.displayTemplate();
		},
		openFormView : function(){
			var oForm = this.getBean("rocketType");
			var oProps = {viewType:oForm};
			Hemi.app.createWindow(oForm.name, "${dwac.path}[FormView.xml]", "View-" + oForm.id, 0, 0, oProps)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(600, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		},
		displayTemplate : function(){
			var o = this.getBean("rocketType");
			var c = this.getElementByRID("isTemplate");
			var bIsTemplate = c.checked;

			this.getElementByRID("templateCont").style.display = (!bIsTemplate ? "block" : "none");
			this.getElementByRID("gridCont").style.display = (bIsTemplate ? "block" : "none");
			this.getElementByRID("elementsCtrl").style.display = (bIsTemplate ? "block" : "none");
			this.getElementByRID("formsCtrl").style.display = (bIsTemplate ? "block" : "none");
			this.getElementByRID("viewTemplateCont").style.display = (bIsTemplate ? "block" : "none");
			this.refreshElements((!bIsTemplate && o.template && o.template.elements ? o.template.elements : o.elements));
			this.getElementByRID("viewCont").style.display = (o.id > 0 && !bIsTemplate ? "block" : "none");
		},
		openTemplate : function(){
			var o = this.getBean("rocketType");
			if(o && o.template && this.openItem) this.openItem(o.template,"Form");
		},
		chooseTemplate : function(){
			this.manageList("Form", this.getObjectId(),"pickTemplate");
		},
		pickTemplate : function(s, v){
			var o = this.getBean("rocketType");
			o.template = v;
			this.getElementByRID("formTemplate").value = (v ? v.name : "");
		},
		openViewTemplate : function(){
			var o = this.getBean("rocketType");
			if(o && o.viewTemplate && this.openItem) this.openItem(o.viewTemplate,"Note");
		},
		createViewTemplate : function(){
			//function (t, l, n, v, b, a, f)
			var o = this.getBean("rocketType");
			var sBuff = this.getFormTemplate(o);
			var oN =new org.cote.objects.noteType();
			oN.name = "Grid Form Template";
			oN.text = sBuff;
			oN.id = 0;
			oN.createdDate = new Date();
			oN.modifiedDate = new Date();
			var p = {viewType:oN};
			Hemi.app.createWindow("Create View","${dwac.path}[Note.xml]","Create View Template - " + Hemi.guid(), 0, 0, p, function(oW){
				oW.setHideOnClose(0);
			}); 
		},
		createElementViewTemplate : function(){
			//function (t, l, n, v, b, a, f)
			var o = this.getElementsList().getActiveItem();
			if(!o || !o.data) return;
			o = o.data;
			var sBuff = this.getElementTemplate(this.getBean("rocketType"), o);
			var oN =new org.cote.objects.noteType();
			oN.name = "Element Template";
			oN.text = sBuff;
			oN.id = 0;
			oN.createdDate = new Date();
			oN.modifiedDate = new Date();
			var p = {viewType:oN};
			Hemi.app.createWindow("Create View","${dwac.path}[Note.xml]","Create View Template - " + Hemi.guid(), 0, 0, p, function(oW){
				oW.setHideOnClose(0);
			}); 
		},
		chooseViewTemplate : function(){
			this.manageList("Note", this.getObjectId(),"pickViewTemplate");
		},
		pickViewTemplate : function(s, v){
			var o = this.getBean("rocketType");
			o.viewTemplate = v;
			this.getElementByRID("formViewTemplate").value = (v ? v.name : "");
		},
		openElement : function(){
			var oI = this.getElementsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"FormElement");
		},
		addElement : function(){
			this.manageList("FormElement", this.getElementsList().getObjectId());
		},
		removeElement : function(){
			var oI = this.getElementsList().getActiveItem();
			if(oI) this.getElementsList().clearItem(oI.index);
		},

		configElementsList : function(s,v){
			var o = this.getBean("rocketType");
			var oL = this.getElementsList();
			oL.getContainer().className = "rocket-wideselect-container";
			var c = this.getElementByRID("isTemplate");
			var bIsTemplate = c.checked;
			this.refreshElements((!bIsTemplate && o.template && o.template.elements ? o.template.elements : o.elements));
		},
		refreshElements : function(a){
			var oL = this.getElementsList();
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o.elements) return;
			for(var i = 0; i < (a ? a : o.elements).length;i++){
				oL.addItem((a ? a : o.elements)[i].name,(a ? a : o.elements)[i]);
			}
		},
		getElementsList : function(){
			return this.getComponentByRID("elementsList").GetWideSelect();
		},
		
		
		openForm : function(){
			var oI = this.getFormsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Form");
		},
		addForm : function(){
			this.manageList("Form", this.getFormsList().getObjectId());
		},
		removeForm : function(){
			var oI = this.getFormsList().getActiveItem();
			if(oI) this.getFormsList().clearItem(oI.index);
		},

		configFormsList : function(s,v){
			var o = this.getBean("rocketType");
			var oL = this.getFormsList();
			oL.getContainer().className = "rocket-wideselect-container";
			var c = this.getElementByRID("isTemplate");
			var bIsTemplate = c.checked;
			this.refreshForms((!bIsTemplate && o.template && o.template.childForms ? o.template.childForms : o.childForms));
		},
		refreshForms : function(a){
			var oL = this.getFormsList();
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o.childForms) return;
			for(var i = 0; i < (a ? a : o.childForms).length;i++){
				oL.addItem((a ? a : o.childForms)[i].name,(a ? a : o.childForms)[i]);
			}
		},
		getFormsList : function(){
			return this.getComponentByRID("formsList").GetWideSelect();
		},		
		
		addType : function(o){
			return AM6Client.update("FORM",o);
		},
		prepareSave : function(o){
			o.elements = [];
			o.childForms = [];
			o.populated = false;
			if(!o.isTemplate){
				delete o.viewTemplate;
			}
			else{
				delete o.template;
				var aElements = this.getElementsList().getItems();
				for(var i = 0; i < aElements.length;i++) o.elements.push(aElements[i].data);
				var aForms = this.getFormsList().getItems();
				for(var i = 0; i < aForms.length;i++) o.childForms.push(aForms[i].data);
			}
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "FormElementFields.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'FormViewTools.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			Element Name:
		</p>
		<p>
			<input type="text" rid="elementName" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Element Label:
		</p>
		<p>
			<input type="text" rid="elementLabel" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select onchange="${this}.chooseElementType()" rid="elementType" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>DATE</option>
    		<option>STRING</option>
    		<option>STRING_MULTILINE</option>
    		<option>BOOLEAN</option>
    		<option>INT</option>
    		<option>DOUBLE</option>
    		<option>SELECT</option>
    		<option>MULTIPLE_SELECT</option>
			<option>RESOURCE</option>
			<option>SCHEDULE</option>
			<option>ESTIMATE</option>
			<option>TIME</option>
			<option>NOTE</option>
			<option>DATA</option>
			<option>FORM</option>
			<option>TASK</option>
			<option>TICKET</option>
			<option>MODEL</option>
			<option>ARTIFACT</option>
			<option>STAGE</option>
			<option>CASE</option>
			<option>WORK</option>
			<option>GOAL</option>
			<option>BUDGET</option>
			<option>COST</option>

			</select>
		</p>
	</div>
	<div rid="optCont" style="display: none;" class="rocket-column-2">
	
		<p>
			Options:
		</p>
		<p>
			<textarea rid="optionValues" class="rocket-text"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Rule:
		</p>
		<p>
			<input type="text" disable="true" rid="formRule" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseRule()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickRule('Form')"/>
			<input type="button" value="&gt;" class="rocket-button" onclick="${this}.openRule()"/>
		</p>
	</div>
	<div rid="viewTemplateCont" class="rocket-column-2">
		<p>
			View:
		</p>
		<p>
			<input type="text" disable="true" rid="elementViewTemplate" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseViewTemplate()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickViewTemplate('Note')"/>
			<input type="button" value="&gt;" class="rocket-button" onclick="${this}.openViewTemplate()"/>
			<input type="button" value="^" class="rocket-button" onclick="${this}.createViewTemplate()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType");
			this.pickRule('ValidationRule',o.validationRule);
			this.chooseElementType();
			this.refreshValues();
			this.pickViewTemplate('Note',o.elementTemplate);
		},
		openViewTemplate : function(){
			var o = this.getBean("rocketType");
			if(o && o.elementTemplate && this.openItem) this.openItem(o.elementTemplate,"Note");
		},
		createViewTemplate : function(){
			//function (t, l, n, v, b, a, f)
			var o = this.getBean("rocketType");
			var sBuff = this.getElementTemplate(0, o);
			var oN =new org.cote.objects.noteType();
			oN.name = "Element Template";
			oN.text = sBuff;
			oN.id = 0;
			oN.createdDate = new Date();
			oN.modifiedDate = new Date();
			var p = {viewType:oN};
			Hemi.app.createWindow("Create View",uwm.getApiTypeView("Note") + "/Forms/Note.xml","Create View Template - " + Hemi.guid(), 0, 0, p, function(oW){
				oW.setHideOnClose(0);
			}); 
		},
		chooseViewTemplate : function(){
			this.manageList("Note", this.getObjectId(),"pickViewTemplate");
		},
		pickViewTemplate : function(s, v){
			var o = this.getBean("rocketType");
			o.elementTemplate = v;
			this.getElementByRID("elementViewTemplate").value = (v ? v.name : "");
		},
		refreshValues : function(){
			var o = this.getBean("rocketType");
			var oSel = this.getElementByRID("elementType");
			if(oSel.value.match(/select/gi)){
				var aBuff = [];
				for(var i = 0; i < o.elementValues.length;i++) aBuff.push(o.elementValues[i].textValue);
				this.getElementByRID("optionValues").value = aBuff.join("\n");
			}
		},
		chooseElementType : function(){
			var oSel = this.getElementByRID("elementType");
			this.getElementByRID("optCont").style.display = (oSel.value.match(/select/gi) ? "block" : "none");
		},
		openRule : function(){
			var o = this.getBean("rocketType");
			if(o && o.validationRule && this.openItem) this.openItem(o.validationRule,"ValidationRule");
		},
		chooseRule : function(){
			this.manageList("ValidationRule", this.getObjectId(),"pickRule");
		},
		pickRule : function(s, v){
			var o = this.getBean("rocketType");
			o.validationRule = v;
			this.getElementByRID("formRule").value = (v ? v.name : "");
		},
		addType : function(o){
			return AM6Client.update("FORMELEMENT",o);
		},
		prepareSave : function(o){
			var o = this.getBean("rocketType");
			o.elementValues = [];
			var oSel = this.getElementByRID("elementType");
			if(oSel.value.match(/select/gi)){
				var aVals = this.getElementByRID("optionValues").value.split("\n");
				for(var i = 0; i < aVals.length;i++){
					var sVal = Hemi.text.trim(aVals[i]);
					if(sVal.length == 0) continue;
					var oV = new org.cote.objects.formElementValueType();
					oV.name = sVal;
					oV.isBinary = false;
					oV.textValue = sVal;
					o.elementValues.push(oV);
				}
			}
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "FormElement.xml">
<Template>
	<!--
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<import-xml src = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/BaseType.xml" id = "BaseType" />
	<p>
	</p>
	-->
	<p>Note Base</p>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "FormElement";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "Form.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Form";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "FeedBack.xml">
<Template Title="Send Feedback">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>

	<div class="rocket-column-2">
		<p>
			Email:
		</p>
		<p>
			<input placeholder="optional" type="text" class="rocket-text" rid="email"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Subject:
		</p>
		<p>
			<input type="text" class="rocket-text" rid="subject"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>Content:</p>
		<p><textarea class="rocket-text" rid="content"/></p>
 	</div>
	<div class="rocket-column-2">
		<p>
			Send:
		</p>
		<p>
			<input rid="btnSend" type="button" value="Send" onclick="${this}.send()"/>
		</p>
	</div>
	<p rid="statusContainer" style="display:none;"><span rid="status">[ ... ]</span></p>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){
			this.getElementByRID("subject").focus();
			if(!this.setStatus){
				this.setStatus = this._setStatus;
				this.getElementByRID("statusContainer").style.display = "block";
				this.setStatus(" ");
			}
		},

		send : function(){
			if(!this.validate()) return;
			var sSubject = this.getFormValue("subject");
			var sContent = this.getFormValue("content");
			this.setStatus(" ");
			this.getElementByRID("btnSend").disabled = true;
			if(accountManager.sendFeedback(sSubject, sContent)){
				this.setStatus("Feedback submitted");
			}
			else{
				this.setStatus("Unabled to submit feedback at this time.");
			}
		},

		validate : function(){
		
			try{
				this.assert(this.validateForPattern("subject","not-empty"),"Subject is empty");
				this.assert(this.validateForPattern("content","not-empty"),"Content is empty");
			}
			catch(e){
				this.setStatus((typeof e== "string" ? e : e.message ? e.message : e.description));
				return 0;
			}
			return 1;
		},
		_setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("status"),s);
		}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "FactFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Score:
		</p>
		<p>
			<input type="text" rid="score" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<!-- 
	<div class = "rocket-column-2">
		<p>
			Is Parameter:
		</p>
		<p>
			<input type = "checkbox" bind = "${bean.rocketType}" rid = "parameter" />
		</p>
	</div>	
	-->
	<div class="rocket-column-2">
		<p>
			Fact Type:
		</p>
		<p>
			<select rid="factType" bind="${bean.rocketType}">
			<option>UNKNOWN</option>
			<option>GROUP</option>
			<option>ROLE</option>
			<option>PERMISSION</option>
			<option>PROPERTY</option>
			<option>ATTRIBUTE</option>
			<option>STATIC</option>
			<option>FACTORY</option>
			<option>REST</option>
			<option>FUNCTION</option>
			<option>SUBJECT</option>
			<option>CONTEXT</option>
			<option>PARAMETER</option>
			<option>OPERATION</option>

			</select>
		</p>
	</div>
	<div class="rocket-column-2" rid="factoryTypeContainer">
		<p>
			Factory:
		</p>
		<p>
			<select rid="factoryType" bind="${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>ACCOUNT</option>
	    		<option>DATA</option>
	    		<option>GROUP</option>
	    		<option>PERMISSION</option>
	    		<option>ROLE</option>
	    		<option>USER</option>
	    		<option>PERSON</option>
	    		<option>RESOURCE</option>
	    		<option>FACT</option>
	    		<option>FUNCTION</option>
	    		<option>FUNCTIONFACT</option>
	    		<option>OPERATION</option>
	    		<option>PATTERN</option>
	    		<option>POLICY</option>
	    		<option>RULE</option>
				<option>VALIDATIONRULE</option>
			</select>
		</p>
	</div>
	
<div class="rocket-column-2">
		<p>
			Source Type:
		</p>
		<p>
			<select rid="sourceDataType" bind="${bean.rocketType}">
			<option>UNKNOWN</option>
    		<option>ARRAY</option>
    		<option>BIGINT</option>
    		<option>BINARY</option>
    		<option>BIT</option>
    		<option>BLOB</option>
    		<option>BOOLEAN</option>
    		<option>CHAR</option>
    		<option>CLOB</option>
    		<option>DATALINK</option>
    		<option>DATE</option>
    		<option>DECIMAL</option>
    		<option>DISTINCT</option>
    		<option>DOUBLE</option>
    		<option>FLOAT</option>
    		<option>INTEGER</option>
    		<option>JAVA_OBJECT</option>
    		<option>LONGVARBINARY</option>
    		<option>LONGVARCHAR</option>
    		<option>NULL</option>
    		<option>NUMERIC</option>
    		<option>OTHER</option>
    		<option>REAL</option>
    		<option>REF</option>
    		<option>SMALLINT</option>
    		<option>STRUCT</option>
    		<option>TIME</option>
    		<option>TIMESTAMP</option>
    		<option>TINYINT</option>
    		<option>VARBINARY</option>
    		<option>VARCHAR</option>
    		<option>TEXT</option>
			</select>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Source Url:
		</p>
		<p>
			<input type="text" rid="sourceUrl" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Source Urn:
		</p>
		<p>
			<input type="text" rid="sourceUrn" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
			<input type="button" class="rocket-button" value="..." onclick="${this}.findType()"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Data Type:
		</p>
		<p>
			<input type="text" rid="sourceType" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
		<div class="rocket-column-2">
		<p>
			Data:
		</p>
		<p>
			<input type="text" rid="factData" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
			<input type="button" class="rocket-button" value="..." onclick="${this}.findType(1)"/>

		</p>
	</div>
	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getProperties().referByUrn = 1;
		},
		addType : function(o){
			Hemi.log("Add fact type: " + o.name + ":" + o.factType);
			return AM6Client.update(o.nameType, o);
		},
		findType : function(bData){
			var sFType = this.getElementByRID((bData ? "factType" : "factoryType")).value;
			this.manageList(sFType.substring(0,1) + sFType.substring(1,sFType.length).toLowerCase(),0,(bData ? "pickData" : "pickType"));
		},
		pickData : function(t, o){
			this.importType(o,1,1);
		},
		pickType : function(t, o){
			this.importType(o,1);
			
		},

		importType : function(oBean,bSkipName,bDataOnly){
			o = this.getBean("rocketType");
			var _s = this.getProperties();
			if(!oBean || !oBean.id || !oBean.nameType.match(/^(group|role|permission|person|account|user|data|function|operation)$/gi)){
				Hemi.logError("Unsupported fact import type " + (oBean ? oBean.nameType + " #" + oBean.id : "null"));
				return;
			}
			if(bDataOnly){
				this.getElementByRID("factData").value = oBean.id;
				return;
			}
			var sPath = "";
			var sFactType = "FACTORY";
			var sSrcType = "";
			if(oBean.nameType.match(/^role$/gi)){
				sFactType = "ROLE";
				sSrcType = oBean.roleType;
				sPath = oBean.parentPath;
			}
			else if(oBean.nameType.match(/^permission$/gi)){
				sFactType = "STATIC";
				sSrcType = oBean.permissionType;
				sPath = oBean.parentPath
			}
			else if(oBean.nameType.match(/^(person|account|data|function|operation)$/gi)){
				sPath = oBean.groupPath;
			}
			else if(oBean.nameType.match(/^group$/gi)){
				var oG = oBean;
				sFactType = "PERMISSION";
				sSrcType = oBean.groupType;
				if(!oG.populated || !oG.path) oG = AM6Client.get("GROUP",oG.objectId);
				if(oG){
					sPath = oG.path;
					/// The reason for not reading the parentId is that the user may not be authorized to directly read that group
					/// so the name can be picked up from the whole path
					if(sPath) sPath = sPath.substring(0,sPath.lastIndexOf("/"));
				}
			}
			if(_s.referByUrn){
				this.getElementByRID("sourceUrl").value = "";
				this.getElementByRID("sourceUrn").value = oBean.urn;
			}
			else{
				this.getElementByRID("sourceUrn").value = oBean.name;
				this.getElementByRID("sourceUrl").value = sPath;
			}
			this.getElementByRID("sourceType").value = sSrcType;
			this.getElementByRID("factoryType").value = oBean.nameType;
			this.getElementByRID("factType").value = sFactType;
			if(!bSkipName){
				this.getElementByRID("name").value = oBean.name + " Fact";
				this.getElementByRID("description").value = "Fact representing a relative link to " + oBean.nameType + " " + oBean.name + " with current id #" + oBean.id + " in organization " + oBean.organizationPath;
			}

			
		},
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Fact.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Fact";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName,"~/Facts");
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "EventPicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			<span rid="eventPickerToggle"/> <span rid="eventPickerTitle">Events</span>:
		</p>
		<p rid="eventPickerContent">
			<div component="wideselect" rid="eventsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addEvent()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeEvent()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openEvent()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("eventPickerToggle","eventPickerContent");
			if(!this.getProperties().eventListProp) this.getProperties().eventListProp = "events";
		},
		openEvent : function(){
			var oI = this.getEventsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Event");
		},
		addEvent : function(){
			this.manageList("Event", this.getEventsList().getObjectId());
		},
		removeEvent : function(){
			var oI = this.getEventsList().getActiveItem();
			if(oI) this.getEventsList().clearItem(oI.index);
		},

		configEventsList : function(s,v){
			var oL = this.getEventsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshEvents();
		},
		refreshEvents : function(){
			var oL = this.getEventsList(), aP = this.getProperties().eventListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getEventsList : function(){
			return this.getComponentByRID("eventsList").GetWideSelect();
		},
		prepareSaveEventsList : function(o){
			aP = this.getProperties().eventListProp;
			o[aP] = [];
			var aEvents = this.getEventsList().getItems();
			for(var i = 0; i < aEvents.length;i++) o[aP].push(aEvents[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "EventFields.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ParentPicker.xml']/span" src="${dwac.path}"/>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Start Time:
		</p>
		<p>
			<input type="date" component="calendar" rid="startDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			End Time:
		</p>
		<p>
			<input type="date" component="calendar" rid="endDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
				<select rid="eventType" bind="${bean.rocketType}">
					<option>UNKNOWN</option>
					<option>INCEPT</option>
					<option>GRADUATE</option>
					<option>CONCLUDE</option>
					<option>INGRESS</option>
					<option>MOVE</option>
					<option>CONSTRUCT</option>
					<option>DESTRUCT</option>
					<option>OPERATE</option>
					<option>STABLIZE</option>
					<option>DESTABILIZE</option>
					<option>TRANSFER</option>
					<option>EGRESS</option>
					<option>IMMIGRATE</option>
					<option>EMIGRATE</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'LocationPickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'EventPicker.xml']/span" src="${dwac.path}"/>

	<div class="rocket-column-2" rid="entryTraitPicker" style="display:none;">
		<p rid="entryTraitPickerTitle">
			<span rid="entryTraitPickerToggle"/> Entry Traits:
		</p>
		<p rid="entryTraitPickerContent">
			<div component="wideselect" rid="entryTraitsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addEntryTrait()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeEntryTrait()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openEntryTrait()"/>
		</p>
	</div>
	
	<div class="rocket-column-2" rid="exitTraitPicker" style="display:none;">
		<p rid="exitTraitPickerTitle">
			<span rid="exitTraitPickerToggle"/> Exit Traits:
		</p>
		<p rid="exitTraitPickerContent">
			<div component="wideselect" rid="exitTraitsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addExitTrait()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeExitTrait()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openExitTrait()"/>
		</p>
	</div>
	
		
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DataPicker.xml']/span" src="${dwac.path}"/>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'PersonPicker.xml']/span" src="${dwac.path}"/>
	
	<div class="rocket-column-2" rid="orchestratorPicker" style="display:none;">
		<p rid="orchestratorPickerTitle">
			<span rid="orchestratorPickerToggle"/> Orchestrators:
		</p>
		<p rid="orchestratorPickerContent">
			<div component="wideselect" rid="orchestratorsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addOrchestrator()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeOrchestrator()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openOrchestrator()"/>
		</p>
	</div>
	
		<div class="rocket-column-2" rid="influencerPicker" style="display:none;">
		<p rid="influencerPickerTitle">
			<span rid="influencerPickerToggle"/> Influencers:
		</p>
		<p rid="influencerPickerContent">
			<div component="wideselect" rid="influencersList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addInfluencer()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeInfluencer()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openInfluencer()"/>
		</p>
	</div>

	<div class="rocket-column-2" rid="observerPicker" style="display:none;">
		<p rid="observerPickerTitle">
			<span rid="observerPickerToggle"/> Observers:
		</p>
		<p rid="observerPickerContent">
			<div component="wideselect" rid="observersList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addObserver()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeObserver()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openObserver()"/>
		</p>
	</div>
	
		<div class="rocket-column-2" rid="groupPicker" style="display:none;">
		<p rid="groupPickerTitle">
			<span rid="groupPickerToggle"/> Groups:
		</p>
		<p rid="groupPickerContent">
			<div component="wideselect" rid="groupsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addGroup()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeGroup()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openGroup()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(o){
			var o = this.getBean("rocketType");
			this.pickLocation("Location", o.location);
			
			this.getProperties().eventListProp = "childEvents";
			this.getComponentByRID("eventsList").setLoadHandler(this.scopeHandler("configEventsList",0,1,1));
			Hemi.xml.setInnerXHTML(this.getElementByRID("eventPickerTitle"),"Child Events");
			

			this.getElementByRID("entryTraitPicker").style.display = "block";
			this.toggleField("entryTraitPickerToggle","entryTraitPickerContent");
			if(!this.getProperties().entryTraitListProp) this.getProperties().entryTraitListProp = "entryTraits";
			this.getComponentByRID("entryTraitsList").setLoadHandler(this.scopeHandler("configEntryTraitsList",0,1,1));
			
			this.getElementByRID("exitTraitPicker").style.display = "block";
			this.toggleField("exitTraitPickerToggle","exitTraitPickerContent");
			if(!this.getProperties().exitTraitListProp) this.getProperties().exitTraitListProp = "exitTraits";
			this.getComponentByRID("exitTraitsList").setLoadHandler(this.scopeHandler("configExitTraitsList",0,1,1));
						
			this.getElementByRID("orchestratorPicker").style.display = "block";
			this.toggleField("orchestratorPickerToggle","orchestratorPickerContent");
			if(!this.getProperties().orchestratorListProp) this.getProperties().orchestratorListProp = "orchestrators";
			this.getComponentByRID("exitTraitsList").setLoadHandler(this.scopeHandler("configOrchestratorsList",0,1,1));
			

			this.getElementByRID("influencerPicker").style.display = "block";
			this.toggleField("influencerPickerToggle","influencerPickerContent");
			if(!this.getProperties().influencerListProp) this.getProperties().influencerListProp = "influencers";
			this.getComponentByRID("exitTraitsList").setLoadHandler(this.scopeHandler("configInfluencersList",0,1,1));


			this.getElementByRID("observerPicker").style.display = "block";
			this.toggleField("observerPickerToggle","observerPickerContent");
			if(!this.getProperties().observerListProp) this.getProperties().observerListProp = "observers";
			this.getComponentByRID("exitTraitsList").setLoadHandler(this.scopeHandler("configObserversList",0,1,1));

			this.getElementByRID("groupPicker").style.display = "block";
			this.toggleField("groupPickerToggle","groupPickerContent");
			if(!this.getProperties().groupListProp) this.getProperties().groupListProp = "groups";
			this.getComponentByRID("exitTraitsList").setLoadHandler(this.scopeHandler("configGroupsList",0,1,1));
			
						
			this.getProperties().dataListProp = "things";
			Hemi.xml.setInnerXHTML(this.getElementByRID("dataPickerTitle"),"Things");
			this.getComponentByRID("dataList").setLoadHandler(this.scopeHandler("configDataList",0,1,1));
			
			this.getProperties().personListProp = "actors";
			this.setPersonPickerLabel("Actors");
			this.initPersonPicker();
			
			

		},	
		updateChildEvents : function(o){
			var aI = this.getEventsList().getItems();
			var a = [];
			var iUp = 0;
			for(var i = 0; o.childEvents && i < o.childEvents.length; i++) a[o.childEvents[i].id] = o.childEvents[i];
			for(var i = 0; i < aI.length;i++){
				var oI = aI[i].data;
				if(!oI) continue;
				/// Skip existing
				if(a[oI.id]){
					a[oI.id] = 0;
					continue;
				}
				/// Set oI parent to event
				oI.parentId = o.id;
				AM6Client.update("EVENT",oI);
				iUp++;
			}
			for(var i = 0; i < a.length;i++){
				if(typeof a[i]=="object"){
					AM6Client.delete("EVENT",a[i]);
					iUp++;
				}
			}
			
		},
		
		
		
		openEntryTrait : function(){
			var oI = this.getEntryTraitsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Trait");
		},
		addEntryTrait : function(){
			this.manageList("Trait", this.getEntryTraitsList().getObjectId(), "pickEntryTrait");
		},
		pickEntryTrait : function(s, v){
			if(v){
				this.getEntryTraitsList().addItem(AM6Client.getAttributeValue(v,"code",v.name),v);
			}
		},
		removeEntryTrait : function(){
			var oI = this.getEntryTraitsList().getActiveItem();
			if(oI) this.getEntryTraitsList().clearItem(oI.index);
		},

		configEntryTraitsList : function(s,v){
			var oL = this.getEntryTraitsList(),_s = this.getProperties();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshEntryTraits();
		},
		refreshEntryTraits : function(){
			var oL = this.getEntryTraitsList(), aP = this.getProperties().entryTraitListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(AM6Client.getAttributeValue(o[aP][i],"code",o[aP][i].name),o[aP][i]);
			}
		},
		getEntryTraitsList : function(){
			return this.getComponentByRID("entryTraitsList").GetWideSelect();
		},
		openExitTrait : function(){
			var oI = this.getExitTraitsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Trait");
		},
		addExitTrait : function(){
			this.manageList("Trait", this.getExitTraitsList().getObjectId(),"pickExitTrait");
		},
		pickExitTrait : function(s, v){
			if(v){
				this.getExitTraitsList().addItem(AM6Client.getAttributeValue(v,"code",v.name),v);
			}
		},
		
		removeExitTrait : function(){
			var oI = this.getExitTraitsList().getActiveItem();
			if(oI) this.getExitTraitsList().clearItem(oI.index);
		},

		configExitTraitsList : function(s,v){
			var oL = this.getExitTraitsList(),_s = this.getProperties();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshExitTraits();
		},
		refreshExitTraits : function(){
			var oL = this.getExitTraitsList(), aP = this.getProperties().exitTraitListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(AM6Client.getAttributeValue(o[aP][i],"code",o[aP][i].name),o[aP][i]);
			}
		},
		getExitTraitsList : function(){
			return this.getComponentByRID("exitTraitsList").GetWideSelect();
		},
		
		openOrchestrator : function(){
			var oI = this.getOrchestratorsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Person");
		},
		addOrchestrator : function(){
			this.manageList("Person", this.getOrchestratorsList().getObjectId());
		},
		removeOrchestrator : function(){
			var oI = this.getOrchestratorsList().getActiveItem();
			if(oI) this.getOrchestratorsList().clearItem(oI.index);
		},

		configOrchestratorsList : function(s,v){
			var oL = this.getOrchestratorsList(),_s = this.getProperties();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshOrchestrators();
		},
		refreshOrchestrators : function(){
			var oL = this.getOrchestratorsList(), aP = this.getProperties().orchestratorListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getOrchestratorsList : function(){
			return this.getComponentByRID("orchestratorsList").GetWideSelect();
		},
		
		openObserver : function(){
			var oI = this.getObserversList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Person");
		},
		addObserver : function(){
			this.manageList("Person", this.getObserversList().getObjectId());
		},
		removeObserver : function(){
			var oI = this.getObserversList().getActiveItem();
			if(oI) this.getObserversList().clearItem(oI.index);
		},

		configObserversList : function(s,v){
			var oL = this.getObserversList(),_s = this.getProperties();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshObservers();
		},
		refreshObservers : function(){
			var oL = this.getObserversList(), aP = this.getProperties().observerListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getObserversList : function(){
			return this.getComponentByRID("observersList").GetWideSelect();
		},
		
		openInfluencer : function(){
			var oI = this.getInfluencersList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Person");
		},
		addInfluencer : function(){
			this.manageList("Person", this.getInfluencersList().getObjectId());
		},
		removeInfluencer : function(){
			var oI = this.getInfluencersList().getActiveItem();
			if(oI) this.getInfluencersList().clearItem(oI.index);
		},

		configInfluencersList : function(s,v){
			var oL = this.getInfluencersList(),_s = this.getProperties();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshInfluencers();
		},
		refreshInfluencers : function(){
			var oL = this.getInfluencersList(), aP = this.getProperties().influencerListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getInfluencersList : function(){
			return this.getComponentByRID("influencersList").GetWideSelect();
		},
		
			
		openGroup : function(){
			var oI = this.getGroupsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Group");
		},
		addGroup : function(){
			//this.manageList("Group", this.getGroupsList().getObjectId());
			this.manageList("Group", this.getObjectId(),"pickGroup",uwm.getPathForType("Group"),1);
			
		},
		pickGroup : function(s, v){
			if(v){
				this.getGroupsList().addItem(v.name,v);
			}
		},
		removeGroup : function(){
			var oI = this.getGroupsList().getActiveItem();
			if(oI) this.getGroupsList().clearItem(oI.index);
		},

		configGroupsList : function(s,v){
			var oL = this.getGroupsList(),_s = this.getProperties();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshGroups();
		},
		refreshGroups : function(){
			var oL = this.getGroupsList(), aP = this.getProperties().groupListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getGroupsList : function(){
			return this.getComponentByRID("groupsList").GetWideSelect();
		},
		
		addType : function(o){
			var oT,b = AM6Client.update("EVENT",o);
			if(b){
				var oP;
				if(o.parentId){
					oP = AM6Client.get("EVENT",o.parentId);
					oT = AM6Client.getByNameInGroupParent("EVENT",oP.objectId,o.name);
				}
				else{
					oT = AM6Client.getByName("EVENT",AM6Client.find("GROUP","DATA",this.getPath()).objectId,o.name);
				}
				
				this.updateChildEvents(oT);
			}
			AM6Client.clearCache(oT);
			return b;
		},
		prepareSave : function(o){
			var _s = this.getProperties(), aEP,aXP;
			aEP = this.getProperties().entryTraitListProp;
			aXP = this.getProperties().exitTraitListProp;
			aOP = this.getProperties().observerListProp;
			aKP = this.getProperties().orchestratorListProp;
			aIP = this.getProperties().influencerListProp;
			aGP = this.getProperties().groupListProp;
			
			o[aEP] = [];
			var aEntryTraits = this.getEntryTraitsList().getItems();
			for(var i = 0; i < aEntryTraits.length;i++) o[aEP].push(aEntryTraits[i].data);
			o[aXP] = [];
			var aExitTraits = this.getExitTraitsList().getItems();
			for(var i = 0; i < aExitTraits.length;i++) o[aXP].push(aExitTraits[i].data);
			
			o[aOP] = [];
			var aObservers = this.getObserversList().getItems();
			for(var i = 0; i < aObservers.length;i++) o[aOP].push(aObservers[i].data);
			
			o[aKP] = [];
			var aOrchestrators = this.getOrchestratorsList().getItems();
			for(var i = 0; i < aOrchestrators.length;i++) o[aKP].push(aOrchestrators[i].data);
			
			o[aIP] = [];
			var aInfluencers = this.getInfluencersList().getItems();
			for(var i = 0; i < aInfluencers.length;i++) o[aIP].push(aInfluencers[i].data);

			o[aGP] = [];
			var aGroups = this.getGroupsList().getItems();
			for(var i = 0; i < aGroups.length;i++) o[aGP].push(aGroups[i].data);
		
			
			this.prepareSaveDatasList(o);
			this.prepareSavePersonsList(o);
			
			if(o.id){
				this.updateChildEvents(o);
				AM6Client.clearCache(o);
			}
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Event.xml">
<Template>

	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Event";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "EvaluatePolicy.xml">
<Template Title="Evaluate Policy">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<div class="rocket-column-2">
		<p>
			Policy:
		</p>
		<p>
			<input placeholder="policy name" type="text" disabled="true" class="rocket-text" rid="policyUrn"/>
		</p>
	</div>
	<div rid="parameters">
	</div>
		<div class="rocket-column-2">
		<p>
			Evaluate:
		</p>
		<p>
			<select rid="policyRequestType"><option>UNKNOWN</option><option>AUTHENTICATE</option><option selected="true">DECIDE</option><option>DEFINE</option><option>SCORE</option></select>
			<input type="button" class="rocket-text" value="Evaluate" onclick="${this}.evaluatePolicyRequest()"/>
		</p>
	</div>
	<p rid="statusContainer" style="clear:both;"><span rid="status">[ ... ]</span></p>
<embedded-script><![CDATA[
	template_init : function(){
		var oP = this.getProperties().policy;
		this.getElementByRID("policyUrn").value = oP.name;
		AM6Client.define(oP.objectId,this.scopeHandler("loadPolicyDefinition",0,1,1));
		this._setStatus("Specify any parameter values and then evaluate the policy");
	},
	_setStatus : function(s){
		Hemi.xml.setInnerXHTML(this.getElementByRID("status"),s);
	},
	evaluatePolicyRequest : function(){
		var sPR = this.getElementByRID("policyRequestType").value;
		var oP = azn.createPolicyRequest(this.getProperties().policyDef, sPR);
		
		for(var i = 0; oP.facts && i < oP.facts.length; i++){
			var sU = oP.facts[i].urn;
			oP.facts[i].factData = this.getElementByRID(sU).value;
		}
	
		var ctl = this;
		AM6Client.evaluate(oP,function(s,v){
			if(v && v.json) v = v.json;
			window.policyResponse = v;
			Hemi.xml.setInnerXHTML(ctl.getElementByRID("status"),"Response: " + (v && v != null ? v.response : "Null response"));
		});
	},
	loadPolicyDefinition : function(s, v){
		if(v && v.json) v = v.json;
		this.getProperties().policyDef = v;
		var oP = this.getElementByRID("parameters");
		Hemi.xml.removeChildren(oP);
		for(var i = 0; v.parameters && i < v.parameters.length; i++){
			var oD = document.createElement("div");
			oD.setAttribute("class","rocket-column-2");
			var oL = document.createElement("p");
			var oI = document.createElement("p");
			Hemi.xml.setInnerXHTML(oL, v.parameters[i].name);
			var oIn = document.createElement("input");
			oIn.setAttribute("type","text");
			oIn.setAttribute("class","rocket-text");
			oIn.setAttribute("rid",v.parameters[i].urn);
			oI.appendChild(oIn);
			oD.appendChild(oL);
			oD.appendChild(oI);
			Hemi.xml.setInnerXHTML(oP,oD,1);
		}
   		this.extendSpaceConfiguration(oP);
   	
	}

]]></embedded-script>
</Template></fragment><fragment id = "EstimatePicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Estimate:
		</p>
		<p>
			<input type="text" disable="true" rid="estimate" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseEstimate()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickEstimate('Estimate')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openEstimate()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
			embedded_init : function(){
			var o = this.getBean("rocketType");
			this.pickEstimate('Estimate',o.estimate);
		},
		chooseEstimate : function(){
			this.manageList("Estimate", this.getObjectId(),"pickEstimate");
		},
		pickEstimate : function(s, v){
			var o = this.getBean("rocketType");
			o.estimate = v;
			this.getElementByRID("estimate").value = (v ? v.name + " " + v.estimateType : "");
		},
		openEstimate : function(){
			var o = this.getBean("rocketType");
			if(o && o.estimate && this.openItem) this.openItem(o.estimate,"Estimate");
		},
	
	]]></embedded-script>
</span></fragment><fragment id = "EstimateFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid="estimateType" bind="${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>SWAG</option>
				<option>COARSE</option>
				<option>FINE</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'TimePickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'CostPickerSingle.xml']/span" src="${dwac.path}"/>
	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType");
			this.getProperties().timeProp = "time";
			this.getProperties().costProp = "cost";
			this.pickTime('Time',o.time);
			this.pickCost('Cost',o.cost);
		},
		addType : function(o){
			Hemi.log("Add budget type: " + o.name + ":" + o.text);
			return AM6Client.update("ESTIMATE",o);
		},
		
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Estimate.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Estimate";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "DndFormFragment.xml">
<span>
	<div>
		<span rid="dndPathCont">
		<input disabled="true" type="text" placeholder="${property.defaultPath}" rid="dndPath" style="width:250px !important;" class="rocket-text"/>
		<br/>
		</span>
		<div rid="droptarget" style="padding:0px;height:250px;width:250px;border: .2em dotted #505050;"/>
		<p>
		<progress rid="uploadprogress" min="0" max="100" value="0"/>
		</p>
	</div>

<embedded-script><![CDATA[
		embedded_init : function(){
			//this.setStatus("");
			this.getObjects().files = [];
			if(this.setCanResize){
				this.setCanResize(0);
				this.setCanMinimize(0);
				this.setCanMaximize(0);
			}
			;
			Hemi.message.service.subscribe(this,"onchangedirectory", this.scopeHandler("change_directory",0,0,1),Hemi.registry.service.getObject(this.getProperties().openerId));
			var o = this.getElementByRID("droptarget"),_s = this.getProperties(), op;
			var ctl = this;
			o.ondragover = function () { this.style.borderColor = "#00FF00";return false; };
			o.ondragend = function () { this.style.borderColer = "#505050"; return false; };
			o.ondragleave = o.ondragend;
			o.ondrop = function (e) {
				this.style.borderColer = "#505050";
			   	e.preventDefault();
			   	ctl.readFiles(e.dataTransfer.files);
			};
			if(_s.openerId){
				op = Hemi.registry.service.getObject(_s.openerId);
				if(op && op.getProperties().dndShowForm) op[op.getProperties().dndShowForm](this);
			}
		},
		resizeDndTarget : function(w, h){
			this.getElementByRID("droptarget").style.width = w + "px";
			this.getElementByRID("droptarget").style.height = h + "px";
			this.getElementByRID("uploadprogress").style.marginTop = ((h-20)/2) + "px";
			this.getElementByRID("uploadprogress").style.width = (w*.75) + "px";
			//this.getElementByRID("uploadprogress").value = 10;
		},
		_handle_change_directory : function(s,v){
			if(v && v.getCurrentGroup){
				this.getElementByRID("dndPath").value = v.getCurrentGroup().path;
			}
		},
		updateWaitingCount : function(){
			var _p = this.getProperties(),op;
			
			_p.currentCount++;
        	this.setStatus("Read " + _p.currentCount + " of " + _p.waitingCount);
        	this.getElementByRID("uploadprogress").value = parseInt((_p.currentCount/_p.waitingCount)*100);
			if(_p.waitingCount == _p.currentCount){
				op = Hemi.registry.service.getObject(_p.openerId);
				var o = this.getElementByRID("droptarget");
				o.style.borderColor = "#505050";
				this.setStatus("Finished");
				AM6Client.clearCache("GROUP");
				AM6Client.clearCache("DATA");
				if(op && op.getProperties().dndHandler) op[op.getProperties().dndHandler](this,this.getObjects().files);	
			}
		    

		},
		readFiles : function(aF){
			this.setStatus("Reading " + aF.length + " files into " + this.getPath());
			var oGroup = AM6Client.find("GROUP","DATA",this.getPath());
			if(!oGroup || oGroup == null){-
				this.setStatus(this.getPath() + " is not a valid group");
				return;
			}
			var ctl = this;
			this.getObjects().files = [];
			var _p = this.getProperties();
			_p.waitingCount = aF.length;
			_p.currentCount = 0;
			this.getElementByRID("uploadprogress").max = _p.waitingCount;
			var sOrg = AM6Client.currentOrganization;
			this.getElementByRID("uploadprogress").value = 0;
		    for (var i = 0; i < aF.length; i++) {
		    	var formData = new FormData();
		    	formData.append("organizationPath",sOrg);
		    	formData.append("groupPath",oGroup.path);
		    	formData.append("groupId",oGroup.id);
		    	formData.append("name",aF[i].name);
		    	this.getObjects().files.push(aF[i].name);
		    	formData.append("dataFile",aF[i]);
		    	
		        var xhr = new XMLHttpRequest();
		        xhr.open('POST', '/AccountManagerService/mediaForm');
		        xhr.onload = function(){
		        	ctl.updateWaitingCount();
		        };
		        xhr.upload.onprogress = function(event){
		        	 ///ctl.updateWaitingCount();
		        };
		        xhr.send(formData);
		   }
		},
		getPath : function(){
			var o = this.getElementByRID("dndPath"), s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s) s = uwm.getPathForType("Data","~/Data");
			}
			return s;
		}

	]]></embedded-script>
</span></fragment><fragment id = "DependencyPicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			<span rid="dependencyPickerToggle"/> Dependencies:
		</p>
		<p rid="dependencyPickerContent">
			<div component="wideselect" rid="dependenciesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addDependency()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeDependency()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openDependency()"/>
			<input type="button" class="rocket-button" value="&gt;&gt;" onclick="${this}.openDependencyData()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		this.toggleField("dependencyPickerToggle","dependencyPickerContent");
		if(!this.getProperties().dependencyListProp) this.getProperties().dependencyListProp = "dependencies";
	},
	openDependency : function(){
		var oI = this.getDependenciesList().getActiveItem();
		if(oI && oI.data && this.openItem) this.openItem(oI.data,"Artifact");
	},
	openDependencyData : function(){
		var oI = this.getDependenciesList().getActiveItem();
		if(!oI || !oI.data || !oI.data.artifactDataId || !this.openItem) return;
		var a = oI.data;
		if(!a.artifactType.match(/^(ticket|data|task|work|note|module|story)$/i)) return oObj;
			
		var sType = a.artifactType.substring(0,1) + a.artifactType.substring(1,a.artifactType.length).toLowerCase();
		var oObj;
		oObj = AM6Client.get(a.artifactType,a.artifactId);
		if(oObj) this.openItem(oObj, sType);

	},
		addDependency : function(){
			this.manageList("Artifact", this.getDependenciesList().getObjectId(), "pickDependency");
		},
		pickDependency : function(s, v){
			if(v) this.getDependenciesList().addItem(v.name,v);
		},
		removeDependency : function(){
			var oI = this.getDependenciesList().getActiveItem();
			if(oI) this.getDependenciesList().clearItem(oI.index);
		},

		configDependenciesList : function(s,v){
			var oL = this.getDependenciesList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshDependencies();
		},
		refreshDependencies : function(){
			var oL = this.getDependenciesList(),aP=this.getProperties().dependencyListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getDependenciesList : function(){
			return this.getComponentByRID("dependenciesList").GetWideSelect();
		},
		
		prepareSaveDependenciesList : function(o){
			aP = this.getProperties().dependencyListProp;
			o[aP] = [];
			var aDependencies = this.getDependenciesList().getItems();
			for(var i = 0; i < aDependencies.length;i++) o[aP].push(aDependencies[i].data);
		}
	
	]]></embedded-script>
</span></fragment><fragment id = "DataPicker.xml">
<span>

	<div class="rocket-column-2">
		<p>
			<span rid="dataPickerToggle"/> <span rid="dataPickerTitle">Data</span>:
		</p>
		<p rid="dataPickerContent">
			<div component="wideselect" rid="dataList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addData()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeData()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openData()"/>
			<input type="button" class="rocket-button" value="&gt;&gt;" onclick="${this}.openDataData()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("dataPickerToggle","dataPickerContent");
			if(!this.getProperties().dataListProp) this.getProperties().dataListProp = "data";
			//this.getComponentByRID("dataList").setLoadHandler(this.scopeHandler("configDataList",0,1,1));
		},
		openData : function(){
			var oI = this.getDataList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Data");
		},
		openDataData : function(){
			var oI = this.getDataList().getActiveItem();
			if(!oI || !oI.data || !this.openItem || !oI.data.mimeType.match(/^image/gi)) return;
			
			var a = oI.data;
			if(a.detailsOnly) a = AM6Client.get("DATA",a.objectId);
			var vData = {media_name:a.name,media_id:a.id,maxWidth:500,maxHeight:500,media_url:"data:" + a.mimeType + ";base64," + a.dataBytesStore};
			Hemi.app.createWindow("View " + a.name, "${dwac.path}[ImageViewer.xml]", "View-" + a.id, 0, 0, vData)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 300);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            } 
			});
		},
		addData : function(){
			this.manageList("Data", this.getDataList().getObjectId());
		},
		removeData : function(){
			var oI = this.getDataList().getActiveItem();
			if(oI) this.getDataList().clearItem(oI.index);
		},

		configDataList : function(s,v){
			var oL = this.getDataList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshData();
		},
		refreshData : function(){
			var oL = this.getDataList(), aP = this.getProperties().dataListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getDataList : function(){
			return this.getComponentByRID("dataList").GetWideSelect();
		},
		
		prepareSaveDatasList : function(o){
			aP = this.getProperties().dataListProp;
			o[aP] = [];
			var aDatas = this.getDataList().getItems();
			for(var i = 0; i < aDatas.length;i++) o[aP].push(aDatas[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "DataFields.xml">
<span>
	<div class="rocket-column-2" rid="urlContainer" style="display:none;">
		<p>
			URL:
		</p>
		<p>
			<input type="text" rid="urlText" class="rocket-text" style="width:150px !important;"/>
			<input type="button" class="rocket-button" value="..." onclick="window.open(${this}.getElementByRID('urlText').value)"/>
		</p>
	</div>

	<div rid="descriptionCont" class="rocket-column-2" style="display:none;">
		<p>
			Description:
		</p>
		<p>
			<input rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2" rid="dataTypeContainer">
		<p>
			Type:
		</p>
		<p>
			<select onchange="${this}.changeDataType()" rid="mimeType" bind="${bean.rocketType}">
				<option>application/xml</option>
				<option>text/plain</option>
				<option>text/css</option>
				<option>binary</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'SharingFrag.xml']/span" src="${dwac.path}"/>
	<div rid="detailsOnlyContainer" class="rocket-column-2">
		<p>Details:</p>
		<p>
			<input type="button" value="Load" rid="loadBtn" onclick="${this}.loadDetailData()"/>
			<input type="button" value="Clear" rid="clearBtn" onclick="${this}.clearDetailData()"/>
			<input type="button" value="View" rid="viewBtn" onclick="${this}.viewData()"/>
			<input type="button" value="Design" rid="designBtn" onclick="${this}.designData()"/>
		</p>
	</div>
	<div rid="textContainer" class="rocket-column-2">
		<p>
			Data:
		</p>
		<p>
			<textarea rid="textData" onfocus="${this}.showTextFloat()" class="rocket-text rocket-text-long"/>
		</p>
	</div>
	<div rid="binaryContainer" class="rocket-column-2">
		<p>
			Binary:
		</p>
		<p rid="newBinary">
			<iframe rid="mediaUploadFrame" frameborder="0" style="display:none;height: 50px;width:100%;border: 0px none #000000;"/>
		</p>
		<p rid="viewBinary" style="display: none;">
			...
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Created:
		</p>
		<p>
			<input type="datetime-local" component="calendar" disabled="true" rid="createdDate" bind="${bean.rocketType}" class="rocket-text rocket-text-readonly"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Modified:
		</p>
		<p>
			<input type="datetime-local" component="calendar" disabled="true" rid="modifiedDate" bind="${bean.rocketType}" class="rocket-text rocket-text-readonly"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Expiry:
		</p>
		<p>
			<input type="datetime-local" component="calendar" rid="expiryDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<textarea rid="textDataFloat" style="z-index:250;display:none;position:absolute;top:0px;left:0px;width:250px;height:250px;" onblur="${this}.hideTextFloat()"/>
	<embedded-script><![CDATA[
		embedded_init : function(o){
			window.dbg = this;
			var oSel = this.rid.mimeType;
			if(oSel.selectedIndex == -1) oSel.value = "binary";
			this.displayData();
			this.changeDataType();

			if(this.getProperties().autoDisplay){
				this.loadDetailData();
				this.showTextFloat();
			}
			this.updateURL();
			
		},
		embedded_destroy : function(){
			if(this.getProperties().requestFrame){
				Hemi.message.service.unsubscribe("frame_announcement",this._prehandle_frame_announcement);
				Hemi.message.service.unsubscribe("frame_response",this._prehandle_frame_response);
			}
		},
		resizers : function(){
			this.rid.textDataFloat.style.height = (this.getContainer().clientHeight - (this.getObjects().title_bar.offsetHeight + this.getObjects().status_bar.offsetHeight)) + "px";
			this.rid.textDataFloat.style.width = "100%";
		},
		showTextFloat : function(){
			this.rid.textDataFloat.style.top = (this.getObjects().title_bar ? this.getObjects().title_bar.offsetHeight + "px" : "0px");
			this.rid.textDataFloat.style.display = "block";
			this.rid.textDataFloat.value = this.rid.textData.value;
			this.rid.textDataFloat.focus();
			this.resizers();
			
		},
		hideTextFloat : function(){
			this.rid.textDataFloat.style.display = "none";
			this.rid.textData.value = this.rid.textDataFloat.value;
		},

		updateURL : function(){
			var o = this.getBean("rocketType");
			var b = "none";
			if(o.id){
				var g = o.groupPath;
				var sUrl =
					location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "")
					+ g_application_path + "media/" + AM6Client.dotPath(AM6Client.currentOrganization) + "/Data" + g + "/" + o.name
				;
				this.rid.urlText.value = sUrl;
				b = "block";
			}
			this.rid.urlContainer.style.display = b;
		},
		displayData : function(){
			var o = this.getBean("rocketType");
			if(o.id && o.detailsOnly) return;
			
			this.rid.textData.value = "";
			if(o.mimeType){
				if(!o.mimeType.match(/^text\/$/gi) && !o.mimeType.match(/^application\/xml$/gi)){
					var oSel = this.rid.mimeType;
					oSel.options[oSel.options.length] = new Option(o.mimeType,o.mimeType);
					oSel.value = o.mimeType;
				}
				if(o.mimeType.match(/^text/) && o.dataBytesStore){
					this.rid.textData.value = uwm.base64Decode(o.dataBytesStore);
				}
			}
		},
		isBinary : function(){ var v = this.rid.mimeType.value; return (v.match(/^binary$/) || v.match(/^image\//gi) || v.match(/^video\//gi)); },
		addType : function(o){
			Hemi.log("Add data type: " + o.name + ":" + o.mimeType);

			var v = "";
			if(o.mimeType && o.mimeType.match(/^text/)){
				v = this.rid.textData.value;
				return AM6Client.update("DATA",o);
			}
			else if(this.isBinary()){
				var oF = this.get_frame("mediaUploadFrame");
				
				oF.document.forms["mediaForm"].elements["id"].value = "0";
				oF.document.forms["mediaForm"].elements["name"].value = o.name;
				oF.document.forms["mediaForm"].elements["description"].value = o.description;
				oF.document.forms["mediaForm"].elements["groupId"].value = "0";
				oF.document.forms["mediaForm"].elements["groupPath"].value = o.groupPath;
				oF.document.forms["mediaForm"].elements["organizationPath"].value = AM6Client.currentOrganization;
				oF.document.forms["mediaForm"].submit();
				return -1;
			}
		},
		clearDetailData : function(){
			var o = this.getBean("rocketType");
			o.dataBytesStore = "";
			o.detailsOnly = false;
			this.synchronizeForm(1);
			this.changeDataType();
			this.displayData();
		},
		loadDetailData : function(){
			var o = this.getBean("rocketType");
			if(!o.detailsOnly) return;
			o = AM6Client.get("DATA",o.objectId);
			if(o != null){
				this.clearBean("rocketType");
				this.setBean(o,"rocketType");
			}
			this.synchronizeForm(1);
			this.changeDataType();
			this.displayData();
		},
		designData : function(){
			var o = this.getBean("rocketType");
			if(o.detailsOnly){
				this.loadDetailData();
				o = this.getBean("rocketType");
			}

			var oProps = {openerId:this.getObjectId(),picker:0,viewType:o};
			Hemi.app.createWindow("Design " + o.name, "${dwac.path}[DataDesign.xml]", "DesView-" + o.id, 0, 0, oProps)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(600, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	oW.setHideOnClose(0);
	            	this.Close();
	            }
            });
		},
		viewData : function(){
			var o = this.getBean("rocketType");
			if(!o.id) return;
			var bVid = o.mimeType.match(/^video\//gi);
			if(o.detailsOnly && !bVid){
				this.loadDetailData();
				o = this.getBean("rocketType");
			}
			var sUrl = "data:" + o.mimeType + ";base64," + o.dataBytesStore;
			if(bVid){
				sUrl = location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "") + g_application_path + "media/" + AM6Client.dotPath(AM6Client.currentOrganization) + "/Data" +  o.groupPath + "/" + o.name
			}

			var vData = {media_name:o.name,media_id:o.id,maxWidth:500,maxHeight:500,video:bVid,mimeType:o.mimeType,media_url:sUrl};
			Hemi.app.createWindow("View " + o.name, "${dwac.path}[ImageViewer.xml]", "BinaryView-" + o.id, 0, 0, vData)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 300);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	oW.setHideOnClose(0);
	            }
            });
		},
		changeDataType : function(){
			var o = this.getBean("rocketType");
			var oSel = this.rid.mimeType;
			
			var bBin = this.isBinary();
			var bDet = (o.id && o.detailsOnly);

			/// Intentionally NOT allowing video to be loaded here
			///
			this.rid.loadBtn.disabled = (bDet && (!bBin || !o.mimeType.match(/^image/)) ? false : true);
			this.rid.clearBtn.disabled = (!bDet ? true : false);
			this.rid.binaryContainer.style.display = (!bDet && bBin ? "block" : "none");
			this.rid.textContainer.style.display = (!bDet && !bBin ? "block" : "none");
			this.rid.viewBtn.disabled = (bBin && (o.mimeType.match(/^image/) || o.mimeType.match(/^video/)) ? false : true);
			this.rid.designBtn.disabled = (o.mimeType.match(/^text/) ? false : true);
			if(bBin) this.initFrame();
		},
		initFrame : function(){
			if(this.getProperties().requestFrame) return;
			this.getProperties().requestFrame = 1;
			this.setupFrame();
			this.scopeHandler("frame_announcement",0,0,1);
			this.scopeHandler("frame_response",0,0,1);
			Hemi.message.service.subscribe("frame_announcement",this._prehandle_frame_announcement);
			Hemi.message.service.subscribe("frame_response",this._prehandle_frame_response);
		},
		setupFrame : function(){
			var oF = this.get_frame("mediaUploadFrame");
			if(!oF || !oF.document){
				Hemi.logDebug("Waiting to setup frame");
				this.getProperties().timeout = setTimeout("Hemi.registry.service.getObject('" + this.getObjectId() + "').setupFrame()",50);
			}
			else{
				this.rid.mediaUploadFrame.style.display = "block";
				oF.document.location.href = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/MediaUpload.html";
				this.probeFrame();
			}
		},
		_handle_frame_announcement : function(s, v){
			if(v && v.id == this.getObjectId()){
				if(v.messages[0] == "submit"){
					alert('upload');
					this.setStatus("Uploading ...");
				}
				else if(v.messages[0] == "fileChange"){
					var sN = this.rid.name.value;
					var sF = v.messages[1];
					if(!sF || sF.length == 0) return;
					sF = sF.replace(/\\/gi,"/");
					sF = sF.substring(sF.lastIndexOf("/")+1,sF.length);
					this.rid.name.value = sF;
				}
			}
		},
		_handle_frame_response : function(s, v){
			if(v && v.id == this.getObjectId()){
				this.setupFrame();			
				if(v && v.status){
					if(this.getProperties().timeout){
						window.clearTimeout(this.getProperties().timeout);
						this.getProperties().timeout = 0;
					}
					this.postProcess();
				}
				
				else{
					this.setStatus("Failed to upload media.");
				}
			}
		},
		probeFrame : function(){
			var oF = this.get_frame("mediaUploadFrame");
			if(!oF || !oF.document || !oF.mediaFrameMark){
				this.getProperties().timeout = setTimeout("Hemi.registry.service.getObject('" + this.getObjectId() + "').probeFrame()",50);
			}
			else{
				oF.setResponseId(this.getObjectId());
			}
		},
		prepareSave : function(o){

			/// For updating, if a detailed binary object is being saved, don't allow to save here - only allow through the uploader
			/// therefore, save as detailsOnly
			///
			var bBin = this.isBinary();
			if(o.mimeType){
				if(o.id && bBin){
					o.dataBytesStore = "";
					o.detailsOnly = true;
				}
				if(o.mimeType.match(/^text/)){
					o.dataBytesStore = uwm.base64Encode(this.rid.textData.value);
				}
			}
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "DataDndPicker.xml">
<span>
	<div rid="dndPickerCont" style="display:none;" class="rocket-column-2">
		<p rid="dndPickerTitle">
			<span rid="dndPickerToggle"/> Import:
		</p>
		<p rid="dndPickerContent">
			<input type="button" value="Import" class="rocket-button" onclick="${this}.showDndUploadForm()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType"),b;
			b = (o.id && o.id > 0 ? 1 : 0);
			
			if(b){
				this.initDndPicker();
			}
			else{
				this.getElementByRID("dndPickerCont").style.display = "none";
			}
			
		},
		initDndPicker : function(){
			if(!this.getProperties().dndTitle) this.getProperties().dndTitle = "Drag-n-Drop";
			this.getElementByRID("dndPickerCont").style.display = "block";
			this.toggleField("dndPickerToggle","dndPickerContent");
			this.scopeHandler("dnd_form_loaded", 0, 0, 1);
		},
		embedded_destroy : function(){
			delete this._prehandle_dnd_form_loaded;
		},
		showDndUploadForm : function(){
			var vProps = {openerId:this.getObjectId()};
			Hemi.app.createWindow("DataDnD", "${dwac.path}[DataDnd.xml]", "DataDnD", 0, 0, vProps, this._prehandle_dnd_form_loaded);
		},
		_handle_dnd_form_loaded : function(oW){
			var sPath = (this.getProperties().dndDataPath ? this.getProperties().dndDataPath : uwm.getPathForType("Data","~/Data")); 
			oW.setHideOnClose(0);
			oW.setTitle(this.getProperties().dndTitle);
			oW.resizeTo(290,350);
			oW.getElementByRID("path").value = sPath;
		},
		
		
	]]></embedded-script>
</span></fragment><fragment id = "DataDnd.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DndFormFragment.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'StatusFrag.xml']/span" src="${dwac.path}"/>
</Template></fragment><fragment id = "DataDesign.xml">
<Template>
	<p>Design Base</p>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().designMode = 1;
			this.loadTemplate('${dwac.path}','Data.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "Data.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Data";
			if(!this.getProperties().defaultPath) this.getProperties().defaultPath = "~/Data";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			if(this.getProperties().designMode) this.loadTemplate('${dwac.path}','Designer.xml');
			else this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		},
		template_post_init : function(){
			// if(this.getProperties().designMode) this.loadTemplate('${dwac.path}','Designer.xml');
			// else this.loadTemplate('${dwac.path}','BaseTemplate.xml');

		}
	]]></embedded-script>
</Template></fragment><fragment id = "CredentialForm.xml">
<Template>
<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<div rid="objCont" class="rocket-column-2">
		<p>
			Object:
		</p>
		<p rid="lblObject"/>
	</div>
	<div class="rocket-column-2">
		<p>
			Credential Type:
		</p>
		<p><select rid="credentialType" disabled="true">
		<option value="UNKNOWN">Unknown</option>
		<option selected="true" value="HASHED_PASSWORD">Password</option>
		<option value="TOKEN">Token</option>
		<option value="JWT">JWT</option>
		<option value="CERTIFICATE">Certificate</option>
		</select></p>
	</div>
	<div class="rocket-column-2" rid="currentPasswordContainer">
		<p>
			Current Password:
		</p>
		<p><input type="password" rid="currentPassword" class="rocket-text"/></p>
	</div>
	<div rid="passwordCont" class="rocket-column-2">
		<p>
			New Password:
		</p>
		<p><input type="password" rid="newPassword" class="rocket-text"/></p>
	</div>
	<div rid="confirmPasswordCont" class="rocket-column-2">
		<p>
			Confirm New Password:
		</p>
		<p><input type="password" rid="confirmNewPassword" class="rocket-text"/></p>
	</div>
	<div rid="tokenCont" class="rocket-column-2">
		<p>
			Token:
		</p>
		<p><input disabled="true" type="text" rid="token" style="width: 200px !important;" class="rocket-text"/><input type="button" class="rocket-button" value="Refresh" onclick="${this}.newToken()"/></p>
		<p style="float:none;margin-left: 145px !important;">Remember to write down this code if you are creating a new one.  Click the refresh button to create another random code.</p>
	</div>
	<div rid="jwtCont" class="rocket-column-2">
		<p>
			JWT (Oauth):
		</p>
		<p><input disabled="true" type="text" rid="jwt" style="width: 200px !important;" class="rocket-text"/><input rid="expiryMinutes" type="text" class="rocket-text rocket-text-short" value="60"/><input type="button" class="rocket-button" value="Refresh" onclick="${this}.newJWTToken()"/></p>
		<p style="float:none;margin-left: 145px !important;">Create an access token for this persona to use for authorization statements and certain API use.  Click the <i>new</i> button to obtain a new token with the specified expiration time (minutes from now).</p>
	</div>

	<div class="rocket-column-2" rid="createContainer">
		<p>
			
		</p>
		<p><input type="button" value="Create" onclick="${this}.createCredential()" rid="btnButton" class="rocket-button"/></p>
	</div>
	<p rid="lblStatus" style="clear:both;">
	</p>
<embedded-script><![CDATA[
	template_init : function(){
		var o = this.getProperties().viewType;
		uwm.getUser().then((oU)=>{
			if(!oU) return;
			this.getObjects().user = oU;
			if(!this.setStatus) this.setStatus = this._setStatus;
			if(this.getProperties().apiToken){
				this.getProperties().viewType = o = AM6Client.make("GROUP","DATA","~/.api");
				if(!o){
					this.setStatus("Invalid API Object");
					return;
				}
			}
			if(!o){
				//this.setStatus("Invalid object reference");
				this.getElementByRID("objCont").style.display = "none";
			}
			else{
				Hemi.xml.setInnerXHTML(this.getElementByRID("lblObject"),o.nameType + " " + o.name + " (#" + o.id + ")");
			}
			this.refreshMode();
		});
	},
	newJWTToken : function(){
		var o = this.getProperties().viewType, sExpiry = this.getElementByRID("expiryMinutes").value,ctl = this;
		AM6Client.newJWTForType(o.nameType, o.objectId,sExpiry,function(s, v){
			if(v && v.text != null){
				ctl.setStatus("Issued new OAuth Grant");
				ctl.getElementByRID("jwt").value = v.text;
			}
			else{
				ctl.setStatus("Unable to issue new OAuth Grant: " + v);
			}
			
		});
	},
	refreshCurrentPasswordView : function(){
		var o = this.getProperties().viewType;
		/// This is a courtesy
		/// If this is skipped and/or faked by supplying another role with this name
		/// It will still be checked and caught on the server
		///
		if(this.getProperties().tokenMode) return;
		
		var bAa = 0;
		var bDa = 0;
		var bAo = 0;
		var aR = AM6Client.entitlements("USER");
			
		for(var i = 0; i < aR.length;i++){
			if(aR[i].name.match(/^accountadministrators$/gi)){
				bAa = 1;
			}
			else if(aR[i].name.match(/^dataadministrators$/gi)){
				bDa = 1;
			}
		}
		if(!o.nameType.match(/^(user|unknown)$/gi) && oU.id == o.ownerId) bAo = 1;
		this.getElementByRID("currentPasswordContainer").style.display = ((bAa || bDa || bAo) ? "none" : "block");

	},
	refreshMode : function(){
		var bToken = this.getProperties().tokenMode;
		var aToken = this.getProperties().apiToken;
		var jToken = this.getProperties().jwtToken;
		if(aToken) this.getElementByRID("credentialType").value = "TOKEN";
		else if(jToken) this.getElementByRID("credentialType").value = "JWT";
		this.getElementByRID("currentPasswordContainer").style.display = (aToken || bToken || jToken ? "none" : "block");
		this.getElementByRID("passwordCont").style.display = (aToken || bToken || jToken ? "none" : "block");
		this.getElementByRID("confirmPasswordCont").style.display = (aToken || bToken || jToken ? "none" : "block");
		this.getElementByRID("tokenCont").style.display = (aToken || bToken ? "block" : "none");
		this.getElementByRID("jwtCont").style.display = (jToken ? "block" : "none");
		/// this.getElementByRID("createContainer").style.display = (aToken || jToken ? "none" : "block");
		if(!aToken && !bToken && !jToken) this.refreshCurrentPasswordView();
		else if(aToken || bToken) this.newToken();
		else if(jToken) {
			/// nothing at the moment
			///
		}
	},

	newToken : function(){
		var o = this.getProperties().viewType, sToken = "";

		if(this.getProperties().materialToken){
			var iBin = (o && o.id ? 6 : 20);
			sToken = Hemi.text.pad(this.getObjects().user.organizationId,3) + "-" + this.getObjects().user.id + "-" + (o ? o.id : 0) + "-" + Math.random().toString().substring(2,iBin)  + "-" + Math.random().toString().substring(2,iBin);
		}
		else{
			sToken = SHA1.hash_asB64(Hemi.guid());
		}
		this.getElementByRID("token").value = sToken; 
	},
	_setStatus : function(s){
		Hemi.xml.setInnerXHTML(this.getElementByRID("lblStatus"),s);
	},
	createCredential : function(){
		var o = this.getProperties().viewType;
		var sP,sCP,aToken = this.getProperties().apiToken,mToken = this.getProperties().materialToken;
		if(this.getProperties().tokenMode){
			sP = uwm.base64Encode(this.getElementByRID("token").value);
			sCP = sP;
		}
		else{
			sP = uwm.base64Encode(this.getElementByRID("newPassword").value);
			sCP = uwm.base64Encode(this.getElementByRID("confirmNewPassword").value);
		}
		if(sP.length < 5 || sP != sCP){
			this.setStatus("Passwords don't match");
			return;
		}
		var authReq = new org.cote.objects.authenticationRequestType();
		authReq.credentialType = this.getElementByRID("credentialType").value;
		authReq.checkCredentialType = authReq.credentialType;
		authReq.credential = sP;
		authReq.checkCredential = uwm.base64Encode(this.getElementByRID("currentPassword").value);
		if(!o){
			authReq.subject = this.getObjects().user.name;
		}
		else{
			if(o.nameType.match(/^user$/gi)){
				authReq.subject = o.name;
			}
			else{
				authReq.subject = o.urn;
			}
		}
		authReq.subjectType = this.getProperties().viewType.nameType;
		authReq.organizationPath = o.organizationPath;
		var vParms = (v ? v : {});
		var ctl = this;

		AM6Client.newPrimaryCredential(o.nameType, o.objectId,authReq,function(s, v){
			if(v && v.json == true){
				ctl.setStatus("Changed primary credential");
				ctl.getElementByRID("newPassword").value = "";
				ctl.getElementByRID("confirmNewPassword").value = "";
				ctl.getElementByRID("currentPassword").value = "";
			}
			else{
				ctl.setStatus("Unable to change primary credential");
			}
			
		});
	
	}
]]></embedded-script>
</Template></fragment><fragment id = "CostPickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Cost:
		</p>
		<p>
			<input type="text" disable="true" rid="cost" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseCost()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickCost('Cost')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openCost()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().costProp){
			this.getProperties().costProp = "cost";
		}
		var o = this.getBean("rocketType");
		this.pickCost('Cost',o[this.getProperties().costProp]);

	},
	chooseCost : function(){
		this.manageList("Cost", this.getObjectId(),"pickCost");
	},

		openCost : function(){
			var o = this.getBean("rocketType");
			if(o && o[this.getProperties().costProp] && this.openItem) this.openItem(o[this.getProperties().costProp],"Cost");
		},
	pickCost : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().costProp] = v;
		this.getElementByRID("cost").value = (v ? v.name + " " + v.currencyType : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "CostPicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="costPickerTitle">
			<span rid="costPickerToggle"/> Costs:
		</p>
		<p rid="costPickerContent">
			<div component="wideselect" rid="costsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addCost()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeCost()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openCost()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("costPickerToggle","costPickerContent");
			if(!this.getProperties().costListProp) this.getProperties().costListProp = "costs";
			
		},
		openCost : function(){
			var oI = this.getCostsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Cost");
		},
		addCost : function(){
			this.manageList("Cost", this.getCostsList().getObjectId());
		},
		removeCost : function(){
			var oI = this.getCostsList().getActiveItem();
			if(oI) this.getCostsList().clearItem(oI.index);
		},

		configCostsList : function(s,v){
			var oL = this.getCostsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshCosts();
		},
		refreshCosts : function(){
			var oL = this.getCostsList(), aP = this.getProperties().costListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getCostsList : function(){
			return this.getComponentByRID("costsList").GetWideSelect();
		},
		prepareSaveCostsList : function(o){
			aP = this.getProperties().costListProp;
			o[aP] = [];
			var aCosts = this.getCostsList().getItems();
			for(var i = 0; i < aCosts.length;i++) o[aP].push(aCosts[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "CostFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Value:
		</p>
		<p>
			<input rid="value" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
			<select rid="currencyType" bind="${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>USD</option>
			</select>
		</p>
	</div>

	<embedded-script><![CDATA[
		addType : function(o){
			Hemi.log("Add cost type: " + o.name + ":" + o.text);
			return  AM6Client.update("COST",o);
		},

		prepareSave : function(o){
			this.getElementByRID("value").className = "rocket-text";

			if(!this.validateForPattern("value","numbers-only")){
				this.getElementByRID("value").className = "rocket-text rocket-text-error";
				this.setStatus("Value must only contain numeric characters");
				return 0;
			}

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Cost.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Cost";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ContactInformation.xml">
<span>
	<div class="rocket-column-2" rid="contactPicker" style="display:none;">
		<p rid="contactPickerTitle">
			<span rid="contactPickerToggle"/> Contacts:
		</p>
		<p rid="contactPickerContent">
			<div component="wideselect" rid="contactsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addContact()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeContact()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openContact()"/>
		</p>
	</div>
	<div class="rocket-column-2" rid="addressPicker" style="display:none;">
		<p rid="addressPickerTitle">
			<span rid="addressPickerToggle"/> Addresses:
		</p>
		<p rid="addressPickerContent">
			<div component="wideselect" rid="addressesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addAddress()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeAddress()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openAddress()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType"),_s = this.getProperties();
			if(o  && o.contactInformation){
				_s.enableContactInformation = 1;
				this.getElementByRID("addressPicker").style.display = "block";
				this.toggleField("addressPickerToggle","addressPickerContent");
				if(!this.getProperties().addressListProp) this.getProperties().addressListProp = "addresses";
				
				this.getElementByRID("contactPicker").style.display = "block";
				this.toggleField("contactPickerToggle","contactPickerContent");
				if(!this.getProperties().contactListProp) this.getProperties().contactListProp = "contacts";
			}
		},
		prepareSaveContactInformation : function(o){
			this.prepareSaveAddressesList(o);
			this.prepareSaveContactsList(o);
		},
		initContactInformation : function(){
			/// Have to put a little extra logic here because contact information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableContactInformation = (o.contactInformation != null ? 1 : 0);
			
			if(_s.enableContactInformation){
				this.getProperties().addressListProp = "addresses";
				this.getProperties().contactListProp = "contacts";
				this.getComponentByRID("addressesList").setLoadHandler(this.scopeHandler("configAddressesList",0,1,1));
				this.getComponentByRID("contactsList").setLoadHandler(this.scopeHandler("configContactsList",0,1,1));
			}
		},
		openAddress : function(){
			var oI = this.getAddressesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Address");
		},
		addAddress : function(){
			var o = this.getBean("rocketType"),sPath;
			if(o.nameType && o.nameType.match(/^user$/gi)) sPath = "/Home/" + o.name + "/Addresses";
			this.manageList("Address", this.getAddressesList().getObjectId(),0,sPath);
		},
		removeAddress : function(){
			var oI = this.getAddressesList().getActiveItem();
			if(oI) this.getAddressesList().clearItem(oI.index);
		},

		configAddressesList : function(s,v){
			var oL = this.getAddressesList(),_s = this.getProperties();
			if(!_s.enableContactInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshAddresses();
		},
		refreshAddresses : function(){
			var oL = this.getAddressesList(), aP = this.getProperties().addressListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o.contactInformation || !o.contactInformation[aP]) return;
			for(var i = 0; i < o.contactInformation[aP].length;i++){
				oL.addItem(o.contactInformation[aP][i].name,o.contactInformation[aP][i]);
			}
		},
		getAddressesList : function(){
			return this.getComponentByRID("addressesList").GetWideSelect();
		},
		prepareSaveAddressesList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableContactInformation) return;
			aP = this.getProperties().addressListProp;
			o.contactInformation[aP] = [];
			var aAddresses = this.getAddressesList().getItems();
			for(var i = 0; i < aAddresses.length;i++) o.contactInformation[aP].push(aAddresses[i].data);
		},
		
		openContact : function(){
			var oI = this.getContactsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Contact");
		},
		addContact : function(){
			var o = this.getBean("rocketType"),sPath;
			if(o.nameType && o.nameType.match(/^user$/gi)) sPath = "/Home/" + o.name + "/Contacts";
			this.manageList("Contact", this.getContactsList().getObjectId(),0,sPath);
		},
		removeContact : function(){
			var oI = this.getContactsList().getActiveItem();
			if(oI) this.getContactsList().clearItem(oI.index);
		},

		configContactsList : function(s,v){
			var oL = this.getContactsList(),_s = this.getProperties();
			if(!_s.enableContactInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshContacts();
		},
		refreshContacts : function(){
			var oL = this.getContactsList(), aP = this.getProperties().contactListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o.contactInformation || !o.contactInformation[aP]) return;
			for(var i = 0; i < o.contactInformation[aP].length;i++){
				/// var sLabel = o.contactInformation[aP][i].name;
				var oC = o.contactInformation[aP][i];
				var sLabel = 
					oC.locationType.substring(0,1) + oC.locationType.substring(1,oC.locationType.length).toLowerCase()
					+ " "
					+ oC.contactType.substring(0,1) + oC.contactType.substring(1,oC.contactType.length).toLowerCase()
					+ " "
					+ oC.contactValue
				; 
				oL.addItem(sLabel,o.contactInformation[aP][i]);
			}
		},
		getContactsList : function(){
			return this.getComponentByRID("contactsList").GetWideSelect();
		},
		prepareSaveContactsList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableContactInformation) return;
			aP = this.getProperties().contactListProp;
			o.contactInformation[aP] = [];
			var aContacts = this.getContactsList().getItems();
			for(var i = 0; i < aContacts.length;i++) o.contactInformation[aP].push(aContacts[i].data);
		}
		
		
		
	]]></embedded-script>
</span></fragment><fragment id = "ContactFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Location:
		</p>
		<p>
			<select rid="locationType" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>HOME</option>
    		<option>WORK</option>
    		<option>MOBILE</option>
    		<option>OTHER</option>
    		<option>NETWORK</option>

			</select>
		</p>
	</div>
		<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
			<select rid="contactType" bind="${bean.rocketType}">
	    		<option>UNKNOWN</option>
	    		<option>PHONE</option>
	    		<option>EMAIL</option>
	    		<option>WEB</option>
	    		<option>OTHER</option>
	    		<option>PROFILE</option>
			</select>
		</p>
	</div>
	
	<div class="rocket-column-2">
		<p>
			Contact:
		</p>
		<p>
			<input type="text" rid="contactValue" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<embedded-script><![CDATA[
		embedded_init : function(){

		},
		addType : function(o){
			Hemi.log("Add contact type: " + o.name );
			
			return AM6Client.update("CONTACT",o);
		},
		prepareSave : function(o){
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Contact.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Contact";
			if(!this.getProperties().defaultPath) this.getProperties().defaultPath = "~/Contacts";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "CompleteRegistration.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<h2>Complete Registration</h2>
	<p>Please follow the link emailed to the address used to register for an account. <span rid="suppl">[ ... ]</span></p>
	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				Hemi.log("Load complete registration form");
				var oSuppl = this.getElementByRID("suppl");
				Hemi.xml.setInnerXHTML(oSuppl,"");
				if(window.uwm.registration){
					var sRegId = window.uwm.getSessionData("registration-id",window.uwm.registration);
					if(!sRegId){
						Hemi.xml.setInnerXHTML(oSuppl,"Invalid registration");
						return;
					}
					var sSessId = window.uwm.registration.sessionId;
					var oA = document.createElement("a");
					oA.href = "/AccountManagerService/rest/user/confirm/" + sSessId + "/" + sRegId;
					oA.appendChild(document.createTextNode("Complete Registration"));
					oSuppl.appendChild(oA);
					window.uwm.registration = null;
					//uwm.operation("ContinueWorkflow", 0, 0, "Complete Registration Form");
				}
				else{
					///Hemi.xml.setInnerXHTML(oSuppl,"");
				}
			}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "CasePicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="casePickerTitle">
			<span rid="casePickerToggle"/> Cases:
		</p>
		<p rid="casePickerContent">
			<div component="wideselect" rid="casesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addCase()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeCase()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openCase()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("casePickerToggle","casePickerContent");
			if(!this.getProperties().caseListProp) this.getProperties().caseListProp = "cases";
			
		},
		openCase : function(){
			var oI = this.getCasesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Case");
		},
		addCase : function(){
			this.manageList("Case", this.getCasesList().getObjectId());
		},
		removeCase : function(){
			var oI = this.getCasesList().getActiveItem();
			if(oI) this.getCasesList().clearItem(oI.index);
		},

		configCasesList : function(s,v){
			var oL = this.getCasesList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshCases();
		},
		refreshCases : function(){
			var oL = this.getCasesList(), aP = this.getProperties().caseListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getCasesList : function(){
			return this.getComponentByRID("casesList").GetWideSelect();
		},
		prepareSaveCasesList : function(o){
			aP = this.getProperties().caseListProp;
			o[aP] = [];
			var aCases = this.getCasesList().getItems();
			for(var i = 0; i < aCases.length;i++) o[aP].push(aCases[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "CaseFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid="caseType" bind="${bean.rocketType}">
	  			<option>UNKNOWN</option>
	    		<option>USE</option>
	    		<option>TECHNICAL</option>
	    		<option>CUSTOMER</option>
	    		<option>BUSINESS</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ResourcePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ArtifactPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'TaskPicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DataPicker.xml']/span" src="${dwac.path}"/>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getProperties().taskListProp = "sequence";
			this.getProperties().resourceListProp = "actors";
			this.getProperties().artifactListProp = "prerequisites";
			this.getProperties().dataListProp = "diagrams";
			Hemi.xml.setInnerXHTML(this.rid.dataPickerTitle,"Diagrams");
			Hemi.xml.setInnerXHTML(this.rid.taskPickerTitle,"Sequence");
			Hemi.xml.setInnerXHTML(this.rid.resourcePickerTitle,"Actors");
			Hemi.xml.setInnerXHTML(this.rid.artifactPickerTitle,"Prerequisites");
			this.getComponentByRID("dataList").setLoadHandler(this.scopeHandler("configDataList",0,1,1));
			this.getComponentByRID("tasksList").setLoadHandler(this.scopeHandler("configTasksList",0,1,1));
			this.getComponentByRID("resourcesList").setLoadHandler(this.scopeHandler("configResourcesList",0,1,1));
			this.getComponentByRID("artifactsList").setLoadHandler(this.scopeHandler("configArtifactsList",0,1,1));
		},
		
		addType : function(o){
			Hemi.log("Add case type: " + o.name + ":" + o.description);
			return AM6Client.update("CASE",o);
		},
		prepareSave : function(o){
			this.prepareSaveDatasList(o);

			o.actors = [];
			var aActors = this.getResourcesList().getItems();
			for(var i = 0; i < aActors.length;i++) o.actors.push(aActors[i].data);
			
			o.prerequisites = [];
			var aPrerequisites = this.getArtifactsList().getItems();
			for(var i = 0; i < aPrerequisites.length;i++) o.prerequisites.push(aPrerequisites[i].data);

			o.sequence = [];
			var aPrerequisites = this.getTasksList().getItems();
			for(var i = 0; i < aPrerequisites.length;i++) o.sequence.push(aPrerequisites[i].data);
		
			o.diagrams = [];
			var aPrerequisites = this.getDataList().getItems();
			for(var i = 0; i < aPrerequisites.length;i++) o.diagrams.push(aPrerequisites[i].data);
			
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Case.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Case";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "CanvasGallery.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<div rid="canvas-gallery"/>
	<!--
	<p><input type = "button" onclick = "${this}.DoLogout()" value = "Logout" /></p>
	-->
	<embedded-script>
		<![CDATA[
			template_init: function(){
				var oCG = this.getElementByRID("canvas-gallery");
				oCG.style.cssText = "position:absolute;top:0px;left:0px;";
				this.scopeHandler("window_resize",0,0,1);
				this.scopeHandler("component_loaded",0,0,1);
				
				Hemi.event.addEventListener(window,"resize",this._prehandle_window_resize);
				
				var oCIDec = Hemi.app.comp.newInstance(0, 0, this.getTemplateSpace().getSpaceObjectByName("canvas-gallery").object.getObjectId(), 0, 0, 1);
				
				Hemi.message.service.subscribe(this,"oncomponentload", this._prehandle_component_loaded,oCIDec);
				///Hemi.app.comp.newInstance(0,oCG);
				oCIDec.setAsync(0);
				this.getObjects().canvasComponent = oCIDec;
				oCIDec.loadComponent("cvsimg",g_application_path + "Components/component.cvsimg.xml");

				//this.resizeFrame();
			},
			template_destroy : function(){
				Hemi.message.service.unsubscribe(this,"oncomponentload", this._prehandle_component_loaded,this.getObjects().canvasComponent);
				Hemi.event.removeEventListener(window,"resize",this._prehandle_window_resize);
			},
			_handle_component_loaded : function(){
				this.resizeFrame();
			},
			_handle_window_resize : function(){
				this.resizeFrame();
			},
			resizeFrame : function(){
				var oAG = this.getObjects().canvasComponent;
				var iW = (typeof window.innerWidth == "number" ? window.innerWidth : document.documentElement.clientWidth);
				var iH = (typeof window.innerHeight == "number" ? window.innerHeight : document.documentElement.clientHeight);
				oAG.setScale(iW, iH);
				if(oAG.getProperties().showImage){
					oAG.viewImage(0,oAG.getProperties().showImageId, oAG.getProperties().showImageIndex);
				}
				else{
					oAG.clearView();
				}
			},
			
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			}
		]]>
	</embedded-script>
</Template></fragment><fragment id = "CacheUtility.xml">
<Template Title="Cache Controls">

	<div class="rocket-column-2" style="border-top:.2em solid #000000;">
		<p>
			Data Cache:
		</p>
		<p>
			<input type="button" value="Clear" onclick="${this}.setStatus('Flushed Data Cache: ' + AM6Client.clearCache('DATA'))"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Group Cache:
		</p>
		<p>
			<input type="button" value="Clear" onclick="${this}.setStatus('Flushed Group Cache: ' + AM6Client.clearCache('GROUP'))"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Role Cache:
		</p>
		<p>
			<input type="button" value="Clear" onclick="${this}.setStatus('Flushed Role Cache: ' + AM6Client.clearCache('ROLE'))"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			User Cache:
		</p>
		<p>
			<input type="button" value="Clear" onclick="${this}.setStatus('Flushed User Cache: ' + AM6Client.clearCache('USER'))"/>
		</p>
	</div>
	<div class="rocket-column-2" style="border-top:.2em solid #000000;">
		<p>
			Flush Authorization
		</p>
		<p>
			<input type="button" value="Clear" onclick="${this}.setStatus('Flushed Authorization Cache: ' + AM6Client.clearAuthorizationCache())"/>
		</p>
	</div>

	<div class="rocket-column-2" style="border-top:.2em solid #000000;">
		<p>
			Flush All
		</p>
		<p>
			<input type="button" value="Clear" onclick="${this}.setStatus('Flushed All Caches: ' + AM6Client.clearCache())"/>
		</p>
	</div>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'StatusFrag.xml']/span" src="${dwac.path}"/>

</Template></fragment><fragment id = "BudgetPickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Budget:
		</p>
		<p>
			<input type="text" disable="true" rid="budget" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseBudget()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickBudget('Budget')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openBudget()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().budgetProp){
			this.getProperties().budgetProp = "budget";
		}
		//var o = this.getBean("rocketType");
		//this.pickBudget('Budget',o[this.getProperties().budgetProp]);

	},
	chooseBudget : function(){
		this.manageList("Budget", this.getObjectId(),"pickBudget");
	},

		openBudget : function(){
			var o = this.getBean("rocketType");
			if(o && o[this.getProperties().budgetProp] && this.openItem) this.openItem(o[this.getProperties().budgetProp],"Budget");
		},
	pickBudget : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().budgetProp] = v;
		this.getElementByRID("budget").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "BudgetPicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="budgetPickerTitle">
			<span rid="budgetPickerToggle"/> Budgets:
		</p>
		<p rid="budgetPickerContent">
			<div component="wideselect" rid="budgetsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addBudget()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeBudget()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openBudget()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			if(!this.getProperties().budgetListProp) this.getProperties().budgetListProp = "budgets";
			this.toggleField("budgetPickerToggle","budgetPickerContent")
			//this.getComponentByRID("budgetsList").setLoadHandler(this.scopeHandler("configBudgetsList",0,1,1));
		},
		openBudget : function(){
			var oI = this.getBudgetsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Budget");
		},
		addBudget : function(){
			this.manageList("Budget", this.getBudgetsList().getObjectId());
		},
		removeBudget : function(){
			var oI = this.getBudgetsList().getActiveItem();
			if(oI) this.getBudgetsList().clearItem(oI.index);
		},

		configBudgetsList : function(s,v){
			var oL = this.getBudgetsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshBudgets();
		},
		refreshBudgets : function(){
			var oL = this.getBudgetsList(), aP = this.getProperties().budgetListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getBudgetsList : function(){
			return this.getComponentByRID("budgetsList").GetWideSelect();
		},
		prepareSaveBudgetsList : function(o){
			aP = this.getProperties().budgetListProp;
			o[aP] = [];
			var aBudgets = this.getBudgetsList().getItems();
			for(var i = 0; i < aBudgets.length;i++) o[aP].push(aBudgets[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "BudgetFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text rocket-text-short"/>
		</p>
	</div>
	<div class="rocket-column-2">
	
		<p>
			Type:
		</p>
		<p>
			<select rid="budgetType" bind="${bean.rocketType}">
				<option>UNKNOWN</option>
				<option>COST</option>
				<option>MULTIFACTOR</option>
				<option>TIME</option>
			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'TimePickerSingle.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'CostPickerSingle.xml']/span" src="${dwac.path}"/>
	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType");
			this.getProperties().timeProp = "time";
			this.getProperties().costProp = "cost";
			this.pickTime('Time',o.time);
			this.pickCost('Cost',o.cost);
		},
		addType : function(o){
			Hemi.log("Add budget type: " + o.name + ":" + o.text);
			return AM6Client.update("BUDGET",o);
		},
		
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Budget.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Budget";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "BlueprintPicker.xml">
<span>
	<div class="rocket-column-2">
		<p rid="blueprintPickerTitle">
			<span rid="blueprintPickerToggle"/> Blueprints:
		</p>
		<p rid="blueprintPickerContent">
			<div component="wideselect" rid="blueprintsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addBlueprint()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeBlueprint()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openBlueprint()"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			this.toggleField("blueprintPickerToggle","blueprintPickerContent");
			if(!this.getProperties().blueprintListProp) this.getProperties().blueprintListProp = "blueprints";

		},
		openBlueprint : function(){
			var oI = this.getBlueprintsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Model");
		},
		addBlueprint : function(){
			this.manageList("Model", this.getBlueprintsList().getObjectId());
		},
		removeBlueprint : function(){
			var oI = this.getBlueprintsList().getActiveItem();
			if(oI) this.getBlueprintsList().clearItem(oI.index);
		},

		configBlueprintsList : function(s,v){
			var oL = this.getBlueprintsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshBlueprints();
		},
		refreshBlueprints : function(){
			var oL = this.getBlueprintsList(), aP = this.getProperties().blueprintListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getBlueprintsList : function(){
			return this.getComponentByRID("blueprintsList").GetWideSelect();
		},
		prepareSaveBlueprintsList : function(o){
			aP = this.getProperties().blueprintListProp;
			o[aP] = [];
			var aBlueprints = this.getBlueprintsList().getItems();
			for(var i = 0; i < aBlueprints.length;i++) o[aP].push(aBlueprints[i].data);
		}
		
	]]></embedded-script>
</span></fragment><fragment id = "BaseType.xml">
<span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BaseFields.xml']/span" src="${dwac.path}"/>
	
<embedded-script><![CDATA[
]]></embedded-script>

</span></fragment><fragment id = "BaseTemplate.xml">
<Template>
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'BaseType.xml']/span" src="${dwac.path}"/>
	<embedded-script><![CDATA[
		embedded_init : function(){
		
			this.scopeHandler("manager_loaded", 0, 0, 1);
			this.scopeHandler("profiler_loaded", 0, 0, 1);
			this.scopeHandler("fact_loaded", 0, 0, 1);
			this.scopeHandler("picker_loaded", 0, 0, 1);
			Hemi.message.service.subscribe(this, "onsessionrefresh", "handle_session_refresh");
		},
		embedded_destroy : function(){
			this._prehandle_manager_loaded = 0;
			this._prehandle_picker_loaded = 0;
			this._prehandle_fact_loaded = 0;
			this._prehandle_profiler_loaded = 0;
			Hemi.message.service.unsubscribe(this, "onsessionrefresh", "handle_session_refresh");
		},

		handle_session_refresh : function(s,v){
			if(this.refreshSession) this.refreshSession(s,v,uwm.rule("IsLoggedIn"));
		},

		_handle_manager_loaded: function (v) {
			///
        },
        sendToFact : function(){
        	this.openWindow("Fact",0,this._prehandle_fact_loaded);
        	//this.openItem(this.getBean("rocketType"), this.getProperties().typeName, this.getProperties().viewTypeName,this._prehandle_fact_loaded);
        },
        _handle_fact_loaded : function(oW){
        	var oBean = this.getBean("rocketType");
        	if(oW.importType) oW.importType(oBean);
        	//else Hemi.logError("Object does not define importType function");
        },
        sendToDebug : function(o){
        	this.getObjects().debugObject = o; 
        	Hemi.app.createWindow('Framework Profiler','Templates/FrameworkProfiler.xml','Profiler',0,0,0,this._prehandle_profiler_loaded);
        },
        _handle_profiler_loaded : function(oW){
        	if(typeof oW.ShowTab == "function" && typeof ActiveSource == "object"){
				oW.ShowTab("Active Source");
				var oSource = oW.getElementByRID("oSource");
				var oEval = oW.getElementByRID("oEval");
				var sCont = "";
				ActiveObjects.valContainer = 0;
				ActiveObjects.valReference = 0;
				ActiveObjects.valBridge = 0;
				ActiveObjects.valComponent = 0;
				var oBean = (this.getObjects().debugObject ? this.getObjects().debugObject : this.getBean("rocketType"));
				delete this.getObjects().debugObject;
				oEval.value = "ActiveObjects.val";
				ActiveObjects.val = (oBean ? oBean : this);

				if(oBean){
					oW.Reflect();
				}
				else{
					oSource.value = 
						"Active Template"
					;
				}
			}
			      	
        },
		manageList : function(sType, sListId, sFN, sDefPath,bManPick){
			var oProps = {openerId:this.getObjectId(),listType:sType,picker:1,manualPick:bManPick,pickFunction:sFN,listId:sListId,defaultPath:sDefPath};
			Hemi.app.createWindow("ManageList", uwm.getApiTypeView(sType) + "/Forms/List" + sType + "s.xml", "Manager-" + (sListId ? sListId : Hemi.guid()), 0, 0, oProps, this._prehandle_manager_loaded)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 300);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
	           });
		},
		local_handle_close : function(v){
			if(this.handle_close) return this.handle_close(v);
		},
		resizeForm : function(){
			if(this.resizeTo && this.getBody){
				if(this.getBody().scrollHeight > this.getBody().offsetHeight){
					var iH = this.getBody().scrollHeight + 50;
					if(iH > document.documentElement.clientHeight) iH = document.documentElement.clientHeight;
					Hemi.log("Resize To: " + this.getContainer().offsetWidth + "x" + iH);
					this.resizeTo(this.getContainer().offsetWidth,iH);
				}
			}
		},
		toggleField : function(l, n){
			var lbl =  this.getElementByRID(l);
			var cnt =  this.getElementByRID(n);
			var b = cnt.mark;
			var s = (b ? "[ - ]" : "[ + ]");
			var d = (b ? "block" : "none");
			cnt.mark = (b ? 0 : 1);
			Hemi.xml.setInnerXHTML(lbl,s);
			cnt.style.display = d;
			if(!lbl.mark){
				var ctl = this;
				lbl.mark = 1;
				var sL = l;
				var sN = n;
				lbl.onclick = function(){
					ctl.toggleField(sL,sN);
					ctl.resizeForm();
				};
			}
			//this.resizeForm();
		},
		openItem : function(o,typeName,viewTypeName, fHandler){
			var _s = this.getProperties();
			if(!typeName) typeName = _s.typeName;
			if(!viewTypeName) viewTypeName = typeName;
			if(_s.populate && !o.populated){
				if(o.nameType && o.nameType.match(/^data$/gi) && o.detailsOnly && o.blob){
					Hemi.log("Not pulling own blob data for " + o.name + " unless specifically requested.");
				}
				else if(this.provideItem){
					o = this.provideItem(typeName, o);
				}
				else{
					Hemi.log("Not populated.  Fetching a populated version.");
					if(o.id) o = AM6Client.get(typeName.toUpperCase(),o.id);
					else o = AM6Client.get(typeName.toUpperCase(),AM6Client.find("GROUP","DATA",o.groupPath).objectId,o.name);
					if(!o.populated) alert("still not populated");
				}
			}
			this.openWindow(viewTypeName, o, fHandler);
		},
		openWindow : function(sType,oType, fHandler){
			var oProps = {openerId:this.getObjectId(),listType:sType,picker:0,viewType:oType,listId:0};
			Hemi.app.createWindow((oType && oType.id ? oType.name : "New" + sType), uwm.getApiTypeView(sType) + "/Forms/" + sType + ".xml", "View-" + (oType && oType.id ? sType + "-" + oType.id : Hemi.guid()), 0, 0, oProps, fHandler)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		},
		pickText : function(o,sL,sH, sDV){
			Hemi.app.createWindow("Picker","${dwac.path}[TextPicker.xml]","TextPicker-" + Hemi.guid(),0,0,{pickerValue:sDV,pickerLabel:sL,picker_handler:sH,openerId:o.getObjectId()},this._prehandle_picker_loaded)
			.then((oW)=>{
				if(!oW) return;
				oW.setHideOnClose(0);
				oW.resizeTo(400,100);
				oW.center();
				oW.setIsModal(true);
				oW.hideButtons();
			});
		},
		_handle_picker_loaded : function(oW){
	
		}
	]]></embedded-script>
</Template></fragment><fragment id = "BaseFields.xml">
<span>

	<div style="display:none;" rid="objectIdCont" class="rocket-column-2">
		<p>
			Object Id:
		</p>
		<p>
			<input type="text" class="rocket-text" rid="objectId" bind="${bean.rocketType}" disabled="true"/>
		</p>
	</div>

	<div rid="pathCont" class="rocket-column-2">
		<p>
			Path:
		</p>
		<p>
			<input type="text" placeholder="${property.defaultPath}" rid="path" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Name:
		</p>
		<p>
			<input type="text" rid="name" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	
	<import-xml src="${property.viewBase}/Forms/${property.typeName}Fields.xml" id="${property.typeName}Fields"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'AttributePicker.xml']/span" src="${dwac.path}"/>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'TagPicker.xml']/span" src="${dwac.path}"/>
	<div rid="debugCont" style="display:none;clear:both;" class="rocket-column-2">
		<p rid="lblDebug">
			Debug:
		</p>
		<p>
			<input rid="btnDebug" type="button" class="rocket-button" value="Debug" onclick="${this}.sendToDebug()"/>
		</p>
	</div>

	<div style="clear:both;" class="rocket-column-2">
		<p rid="lblSave">
			Save:
		</p>
		<p>
			<input rid="btnSave" type="button" class="rocket-button" value="Save" onclick="${this}.saveType()"/>
			<input rid="btnFact" type="button" class="rocket-button" value="Fact" onclick="${this}.sendToFact()"/>
			<input rid="btnClose" type="button" class="rocket-button" value="Close" onclick="${this}.closeObject()"/>
		</p>
	</div>
	<p style="clear:both;"><span rid="status"/></p>
	<embedded-script><![CDATA[
		template_init : function(){
			var o = this.getBean("rocketType"), _s = this.getProperties(), o;
			if(!this.setStatus) this.setStatus = this._setStatus;
			Hemi.message.service.subscribe(this, "onchangecommunity", "refreshCommunity");
			this.rid.debugCont.style.display = (uwm.debugMode ? "block" : "none");
			this.rid.objectIdCont.style.display = (uwm.developerMode && o.objectId ? "block" : "none");
			this.rid.pathCont.style.display = (uwm.developerMode && o.objectId ? "block" : "none");
			if(this.rid.descriptionCont) this.rid.descriptionCont.style.display = (uwm.showDescription ? "block" : "none");

			this.setStatus("");
			if(typeof _s.populate == "undefined") _s.populate = 1;
			this.rid.name.focus();
			if(!_s.viewTypeName) _s.viewTypeName = _s.typeName;
			if(this.setTitle) this.setTitle(_s.viewTypeName + " - " + (o.id ? o.name : "New"));
			if(!o.id || !o.nameType.match(/^(group|role|permission|person|account|user|data|function|operation)$/gi)) this.rid.btnFact.style.display = "none";
			if(this.resizeTo && this.getBody){
				if(this.getBody().scrollHeight > this.getBody().offsetHeight){
					var iH = this.getBody().scrollHeight + 50;
					if(iH > document.documentElement.clientHeight) iH = document.documentElement.clientHeight;
					this.resizeTo(this.getContainer().offsetWidth,iH);
				}
			}
			this.initAttributePicker();
			this.initTagPicker();
			if(_s.openerId && (o = Hemi.registry.service.getObject(_s.openerId)) && o.parentResolver){
				o.parentResolver(this);
			}
		},
		template_destroy : function(){
			Hemi.message.service.unsubscribe(this, "onchangecommunity", "refreshCommunity");
		},
		closeObject : function(){
			var o = this.getBean("rocketType");
			if(this.provideClose) this.provideClose(this,o);
			else if(this.Close) this.Close();
		},
		
		/// Empty placeholder cited by message subscription - may be overridden by any template inheriting from this one
		///
		refreshCommunity : function(s, v){

		},
		embedded_init : function(){
			
		},
		parentResolver : function(v){
			var _s = this.getProperties();
			if(this.resolve) this.resolve(v);
			if(_s.openerId && (o = Hemi.registry.service.getObject(_s.openerId)) && o.parentResolver) o.parentResolver(v);
		},
		saveType : function(){
			this.synchronizeForm();
			var o = this.getBean("rocketType"),_s = this.getProperties();
			this.rid.path.className = "rocket-text";
			this.rid.name.className = "rocket-text";
			this.setStatus("");

			if(!this.validateForPattern("name","not-empty")){
				this.rid.name.className = "rocket-text rocket-text-error";
				this.setStatus("Name cannot be empty");
				return;
			}
			if(!o.nameType || (!o.nameType.match(/^GROUP$/) && !o.nameType.match(/^PERMISSION$/) && !o.nameType.match(/^ROLE$/) && !o.nameType.match(/^USER$/))){
				var sPath = this.getPath();
				var oG = AM6Client.make("GROUP","DATA",sPath);
				o.groupPath = (oG ? oG.path : sPath);
			}
			else if(o.nameType.match(/^PERMISSION$/) || o.nameType.match(/^ROLE$/)){
				o.parentPath = this.getPath();
			}
			
			if(this.prepareSave && !this.prepareSave(o)){
				Hemi.logError("Prepare save failed for type " + this.getProperties().typeName);
				return;
			}
			
			this.prepareSaveAttributePicker(o);
			
			if(_s.customSave){
				Hemi.log("Concluding custom save operation");
				if(_s.provideSave && _s.openerId){
					var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
					if(oOpener && oOpener[_s.provideSave]) oOpener[_s.provideSave](this,o);
				}
				this.closeObject();
				return;
			}
			var sAct = "add", bAct = 0;
			if(o.id > 0) sAct = "update";
			var sMeth= sAct + this.getProperties().typeName;
			var oApi = AM6Client;
			if(sAct.match(/^add$/) && this.addType){
				bAct = this.addType(o);
			}
			else{
				if(!oApi[sAct]){
					this.setStatus("Invalid API: " + sMeth);
					return;
				}
				
				bAct = oApi[sAct](this.getProperties().typeName.toUpperCase(),o);
			}
			if(bAct){
				if(bAct != -1) this.postProcess();
				else this.setStatus("Processing ...");
			}
			else{
				this.setStatus("Failed to " + sAct);
			}
		
		},
		postProcess : function(){
			var o = this.getBean("rocketType"),n,sType = this.getProperties().typeName;
			if(o.nameType && o.nameType.match(/^group$/gi)) n = AM6Client.find("GROUP",o.groupType,this.getPath() + "/" + o.name);
			else if(this.provideItem) n = this.provideItem(sType,o);
			else if(o.nameType && o.nameType.match(/^(permission|role)$/gi)){
				n = AM6Client.getByName(sType.toUpperCase(),AM6Client.get(o.nameType,o.parentId).objectId,o.name);
				
			}
			
			else if(o.id){
				n = AM6Client.get(sType.toUpperCase(), o.id);
			}
			else{
				var sGid = null;
				if(!sType.match(/^user$/gi)) sGid = AM6Client.find("GROUP","DATA",o.groupPath).objectId;
				n = AM6Client.getByName(sType.toUpperCase(),sGid,o.name);
			}
			if(n != null){
				this.clearBean("rocketType");
				this.setBean(n,"rocketType");
			}

			this.synchronizeForm(1);
			var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
			if(oOpener && oOpener.refreshList) oOpener.refreshList();
			this.closeObject();
		},

		getPath : function(){
			var o = this.rid.path, s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s) s = "~/" + this.getProperties().typeName + "s";
			}
			return s;
		},

		_setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.rid.status,s);
		}
	]]></embedded-script>
</span></fragment><fragment id = "AttributePicker.xml">
<span>
	<div class="rocket-column-2" rid="attributePicker" style="display:none;">
		<p rid="attributePickerTitle">
			<span rid="attributePickerToggle"/> <span rid="attributePickerLabel">Attributes</span>:
		</p>
		<p rid="attributePickerContent">
			<div component="wideselect" rid="attributesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addAttribute()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeAttribute()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openAttribute()"/>
		</p>
	</div>


	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType"),_s = this.getProperties();
			if(o && o != null && o.id > 0){
				this.getElementByRID("attributePicker").style.display = "block";
				this.toggleField("attributePickerToggle","attributePickerContent");
				if(!this.getProperties().attributeListProp) this.getProperties().attributeListProp = "attributes";
				_s.enableAttributeInformation = 1;
			}
		},
		prepareSaveAttributePicker : function(o){
			this.prepareSaveAttributesList(o);
		},
		setAttributePickerLabel : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("attributePickerLabel"),s);
		},
		initAttributePicker : function(){
			/// Have to put a little extra logic here because attribute information is optional
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableAttributeInformation = (o != null && o.id > 0 ? 1 : 0);
			
			if(_s.enableAttributeInformation){
				this.getProperties().attributeListProp = "attributes";
				this.getComponentByRID("attributesList").setLoadHandler(this.scopeHandler("configAttributesList",0,1,1));
			}
		},
		openAttributeView : function(oA){
			var oProps = {openerId:this.getObjectId(),viewType:this.getBean("rocketType"),attributeType:oA,listId:this.getAttributesList().getObjectId()};
			Hemi.app.createWindow((oA ? oA.name : "New") + " Attribute", "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/Attribute.xml", "View-" + (oA ? oA.name + "-" + oA.referenceId : Hemi.guid()), 0, 0, oProps)
			.then((oW)=>{
	            if (oW) {
	            	oW.resizeTo(475, 400);
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	oW.setHideOnClose(0);
	            }
	           });
		},
		openAttribute : function(){
			var oI = this.getAttributesList().getActiveItem();
			if(oI) this.openAttributeView(oI.data);

		},
		addAttribute : function(){
			this.openAttributeView();
		},
		removeAttribute : function(){
			var oI = this.getAttributesList().getActiveItem();
			if(oI) this.getAttributesList().clearItem(oI.index);
		},
		configAttributesList : function(s,v){
			var oL = this.getAttributesList(),_s = this.getProperties();
			if(!_s.enableAttributeInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshAttributes();
		},
		refreshAttributes : function(){
			var oList = this.getAttributesList(), aP = this.getProperties().attributeListProp;
			oList.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				var oA = o[aP][i];

				oList.addItem(this.decorateAttributeItem(oA),oA);
			}
		},
		decorateAttributeItem : function(oA){
			var oL = document.createElement("div");
			var oE = document.createElement("div");
			var oV = document.createElement("div");
			var oB = document.createElement("div");
			var oC = document.createElement("span");
			oC.appendChild(oL);
			oC.appendChild(oE);
			oC.appendChild(oV);
			oC.appendChild(oB);
			oL.style.cssText= "float:left;width:100px;";
			oE.style.cssText = "float:left; width: 25px; text-align:center;";
			oV.style.cssText = "float:left;";
			oB.style.cssText = "clear:both;";
			oL.appendChild(document.createTextNode(oA.name));
			oE.appendChild(document.createTextNode("="));
			for(var v = 0; v < oA.values.length; v++){
				if(v > 0) oV.appendChild(document.createElement("br"));
				oV.appendChild(document.createTextNode(oA.values[v]));
			}
			return oC;
		},
		getAttributesList : function(){
			return this.getComponentByRID("attributesList").GetWideSelect();
		},
		prepareSaveAttributesList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableAttributeInformation) return;
			aP = this.getProperties().attributeListProp;
			o[aP] = [];
			var aAttributes = this.getAttributesList().getItems();
			for(var i = 0; i < aAttributes.length;i++) o[aP].push(aAttributes[i].data);
		}
		
		
		
	]]></embedded-script>
</span></fragment><fragment id = "Attribute.xml">
<Template>
<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
<div class="rocket-column-2">
		<p>
			Object:
		</p>
		<p>
			<span rid="objectLabel"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Attr Name:
		</p>
		<p>
			<input type="text" rid="name" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Attr Values:
		</p>
		<p>
			<div component="wideselect" rid="valuesList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addValue()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeValue()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openValue()"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			
		</p>
		<p>
			<input type="button" onclick="${this}.saveAttribute()" value="Save"/>
			<input type="button" onclick="${this}.Close()" value="Close"/>
		</p>
	</div>
	<embedded-script><![CDATA[
		embedded_init : function(){
			var _s = this.getProperties(), o, a;
			o = _s.viewType;
			if(!o) Hemi.xml.setInnerXHTML(this.getElementByRID("objectLabel"),"Invalid object reference");
			else{
				if(!this.getProperties().valueListProp) this.getProperties().valueListProp = "values";
				a = _s.attributeType;
				Hemi.xml.setInnerXHTML(this.getElementByRID("objectLabel"),(!o ? "New Object" : o.name + " (#" + o.id + ")"));
				this.getElementByRID("name").value = (a ? a.name : ""); 
				this.getComponentByRID("valuesList").setLoadHandler(this.scopeHandler("configValuesList",0,1,1));
			}
			
		},
		saveAttribute : function(){
			var oA = this.getProperties().attributeType, o = this.getProperties().viewType, oL = Hemi.registry.service.getObject(this.getProperties().listId), oAL = this.getValuesList(), aV, oI;
			aV = oAL.getItems();
			this.setStatus("");

			var sN = this.getElementByRID("name").value;
			/// If no name, then it's an error 
			if(!sN || sN.length == 0){
				this.setStatus("No name was specified");
				return;
			}

			/// If no values, then the attribute is removed
			///
			if(!aV.length){
				this.setStatus("No values are specified");
			}
			
			/// If saving, just chuck the item off the list before proceeding
			///
			oI = oL.getActiveItem();
			if(oI) oL.clearItem(oI);
			
			/// Regardless of whether an attribute was specified, create a new one and  toss the old reference set
			var a = new org.cote.objects.attributeType();
			a.name = sN;
			a.dataType = "VARCHAR";
			a.values = [];
			for(var i = 0; i < oAL.getItems().length;i++) a.values.push(oAL.getItems()[i].data);
			var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
			oL.addItem(oOpener.decorateAttributeItem(a),a);
			this.Close();
						
		},
		pickText : function(o,sL,sH, sDV){
			Hemi.app.createWindow("Picker","${dwac.path}[TextPicker.xml]","TextPicker-" + Hemi.guid(),0,0,{pickerValue:sDV,pickerLabel:sL,picker_handler:sH,openerId:o.getObjectId()},this._prehandle_picker_loaded)
			.then((oW)=>{
				if(!oW) return;
				oW.setHideOnClose(0);
				oW.resizeTo(475,100);
				oW.center();
				oW.setIsModal(true);
				oW.hideButtons();
			});
		},
		_handle_picker_loaded : function(oW){
	
		},
		removeValue : function(){
			var oI = this.getValuesList().getActiveItem();
			if(oI) this.getValuesList().clearItem(oI.index);
		},
		openValue : function(){
			var oI = this.getValuesList().getActiveItem();
			if(oI) this.pickText(this,"Change " + (this.getProperties().attributeType ? this.getProperties().attributeType.name : "Attribute") + " Value","pickChangeValue",oI.data);
		},
		pickChangeValue : function(s){
			if(!s) return;
			this.removeValue();
			if(s.length == "") return;
			this.getValuesList().addItem(s,s);
		},
		addValue : function(){
			this.pickText(this,"New " + (this.getProperties().attributeType ? this.getProperties().attributeType.name : "Attribute") + " Value","pickNewValue","");
		},
		pickNewValue : function(s){
			if(!s || s.length == 0) return;
			this.getValuesList().addItem(s,s);
		},
		configValuesList : function(s,v){
			var oL = this.getValuesList(),_s = this.getProperties();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshValues();
		},
		refreshValues : function(){
			var oL = this.getValuesList(), aP = this.getProperties().valueListProp;
			oL.clearItems();
			var o = this.getProperties().attributeType;
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i],o[aP][i]);
			}
		},
		getValuesList : function(){
			return this.getComponentByRID("valuesList").GetWideSelect();
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ArtifactPicker.xml">
<span>
	<div class="rocket-column-2">
		<p>
			<span rid="artifactPickerToggle"/> <span rid="artifactPickerTitle">Artifacts</span>:
		</p>
		<p rid="artifactPickerContent">
			<div component="wideselect" rid="artifactsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addArtifact()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeArtifact()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openArtifact()"/>
			<input type="button" class="rocket-button" value="&gt;&gt;" onclick="${this}.openArtifactData()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		this.toggleField("artifactPickerToggle","artifactPickerContent");
		if(!this.getProperties().artifactListProp) this.getProperties().artifactListProp = "artifacts";
	},
	openArtifact : function(){
		var oI = this.getArtifactsList().getActiveItem();
		if(oI && oI.data && this.openItem) this.openItem(oI.data,"Artifact");
	},
	openArtifactData : function(){
		var oI = this.getArtifactsList().getActiveItem();
		if(!oI || !oI.data || !oI.data.artifactDataId || !this.openItem) return;
		var a = oI.data;
		if(!a.artifactType.match(/^(ticket|data|task|work|note|module|story)$/i)) return oObj;
			
		var sType = a.artifactType.substring(0,1) + a.artifactType.substring(1,a.artifactType.length).toLowerCase();
		var oObj = AM6Client.get(a.artifactType,a.artifactDataId);
		if(oObj) this.openItem(oObj, sType);

	},
	addArtifact : function(){
			this.manageList("Artifact", this.getArtifactsList().getObjectId());
		},
		removeArtifact : function(){
			var oI = this.getArtifactsList().getActiveItem();
			if(oI) this.getArtifactsList().clearItem(oI.index);
		},

		configArtifactsList : function(s,v){
			var oL = this.getArtifactsList();
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshArtifacts();
		},
		refreshArtifacts : function(){
			var oL = this.getArtifactsList(), aP = this.getProperties().artifactListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getArtifactsList : function(){
			return this.getComponentByRID("artifactsList").GetWideSelect();
		},
		prepareSaveArtifactsList : function(o){
			aP = this.getProperties().artifactListProp;
			o[aP] = [];
			var aArtifacts = this.getArtifactsList().getItems();
			for(var i = 0; i < aArtifacts.length;i++) o[aP].push(aArtifacts[i].data);
		}
	
	]]></embedded-script>
</span></fragment><fragment id = "ArtifactFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Created:
		</p>
		<p>
			<input type="text" disabled="true" rid="createdDate" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
			<select onchange="${this}.chooseArtifactType()" rid="artifactType" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>REQUIREMENT</option>
    		<option>DESIGN</option>
    		<option>REVIEW</option>
    		<option>DEVELOPMENT</option>
    		<option>TEST</option>
    		<option>RELEASE</option>
    		<option>DEPENDENCY</option>
    		<option>DATA</option>
    		<option>TASK</option>
    		<option>NOTE</option>
    		<option>MODULE</option>
    		<option>STAGE</option>
    		<option>WORK</option>
    		<option>STORY</option>
    		<option>TICKET</option>
    		<option>FORM</option>
			</select>
		</p>
	</div>
	<div rid="dataRefCont" style="display: none;" class="rocket-column-2">
		<p>
			Reference:
		</p>
		<p>
			<input type="text" disable="true" rid="data" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseData()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickData('Data')"/>
			<input type="button" value="&gt;" class="rocket-button" onclick="${this}.openData()"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Previous:
		</p>
		<p>
			<input type="text" disable="true" rid="previousTransition" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.choosePrevTrans()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickPrevTrans('Artifact')"/>
			<input type="button" value="&gt;" class="rocket-button" onclick="${this}.openPrevTrans()"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Next:
		</p>
		<p>
			<input type="text" disable="true" rid="nextTransition" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseNextTrans()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickNextTrans('Cost')"/>
			<input type="button" value="&gt;" class="rocket-button" onclick="${this}.openNextTrans()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType");
			var oPrev, oNext, oData;
			
			if(o.previousTransitionId) oPrev = AM6Client.get("ARTIFACT",o.previousTransitionId);
			if(o.nextTransitionId) oNext = AM6Client.get("ARTIFACT",o.nextTransitionId); 
			this.pickNextTrans('Artifact',oNext);
			this.pickPrevTrans('Artifact',oPrev);
			var oData = this.getChoiceByType();
			this.chooseArtifactType();
			this.pickData('Data',oData);
		},
		openData : function(){
			var oI = this.getChoiceByType();
			if(!oI || !this.openItem) return;
			var oSel = this.rid.artifactType;
			var sType = oSel.value.substring(0,1) + oSel.value.substring(1,oSel.value.length).toLowerCase();
			this.openItem(oI,sType);
		},
		getChoiceByType : function(){
			var o = this.getBean("rocketType");
			var oObj;
			if(!o.artifactDataId) return oObj;
			
			var oSel = this.rid.artifactType;
			if(!oSel.value.match(/^(ticket|form|data|task|stage|work|requirement|note|module|story)$/i)) return oObj;
			
			oObj = AM6Client.get(oSel.value,o.artifactDataId);
			return oObj;
		},
		chooseArtifactType : function(){
			var oSel = this.rid.artifactType;
			
			if(oSel.value.match(/^(ticket|form|data|task|stage|work|requirement|note|module|story)$/i)){
				this.rid.dataRefCont.style.display = "block";	
			}
			else{
				this.rid.dataRefCont.style.display = "none";
			}
			this.pickData('Data');

		},
		addType : function(o){
			Hemi.log("Add artifact type: " + o.name + ":" + o.text);
			return AM6Client.update("ARTIFACT",o);
		},
		choosePrevTrans : function(){
			this.manageList("Artifact", this.getObjectId(),"pickPrevTrans");
		},
		chooseNextTrans : function(){
			this.manageList("Artifact", this.getObjectId(),"pickNextTrans");
		},
		chooseData : function(){
			var oSel = this.rid.artifactType;
			if(!oSel.value.match(/^(ticket|form|data|task|stage|work|requirement|note|module|story)$/i)) return;
			var sType = oSel.value.substring(0,1) + oSel.value.substring(1,oSel.value.length).toLowerCase();
			this.manageList(sType, this.getObjectId(),"pickData");
		},
		pickData : function(s, v){
 			var o = this.getBean("rocketType");
			o.artifactDataId = (v ? v.id : 0);
			this.rid.data.value = (v ? v.name : "");		
		},
		openPrevTrans : function(){
			var o = this.getBean("rocketType");
			if(!o.previousTransitionId) return;
			var v = AM6Client.get("ARTIFACT",o.previousTransitionId);
			if(v && this.openItem) this.openItem(v,"Artifact");
		},
		pickPrevTrans : function(s, v){
			var o = this.getBean("rocketType");
			o.previousTransitionId = (v ? v.id : 0);
			this.rid.previousTransition.value = (v ? v.name + " " + v.artifactType : "");
		},
		openNextTrans : function(){
			var o = this.getBean("rocketType");
			if(!o.nextTransitionId) return;
			var v = AM6Client.get("ARTIFACT",o.nextTransitionId);
			if(v && this.openItem) this.openItem(v,"Artifact");
		},
		pickNextTrans : function(s, v){
			var o = this.getBean("rocketType");
			o.nextTransitionId = (v ? v.id : 0);
			this.rid.nextTransition.value = (v ? v.name + " " + v.artifactType : "");
		},
		prepareSave : function(o){

			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Artifact.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Artifact";
			this.getProperties().defaultPath = uwm.getPathForType(this.getProperties().typeName);
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "ApplicationFields.xml">
<span>
	<p style="clear:both;font-size:0px;margin:0px;"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>

	<div rid="account">
	</div>
	<div rid="group">
	</div>
	<div rid="permission">
	</div>	
	<div rid="data">
	</div>	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DataDndPicker.xml']/span" src="${dwac.path}"/>	
	
	<div rid="genAppCont" style="display:none;clear:both;" class="rocket-column-2">
		<p rid="lblGenerate">
			<span rid="cfgGenerateToggle"/> Generate Application:
		</p>
		<p rid="cfgGenerateCont">

			Permissions: <input rid="chkGenPerm" type="checkbox"/>
			<br/>
			Groups: <input rid="chkGenGrp" type="checkbox"/>
			<br/>
			Seed: <input rid="txtSeedSize" type="text" class="rocket-text rocket-text-short" value="0"/>
			<br/>
			Max: <input rid="txtMaxSize" type="text" class="rocket-text rocket-text-short" value="100"/>
			<br/>
			Distribution: <input rid="txtDist" type="text" class="rocket-text rocket-text-short" value="1.0"/>
			<br/>
			<input rid="btnGenerateApplication" type="button" class="rocket-button" value="Generate" onclick="${this}.generateApplication()"/>
		</p>
	</div>
	
	<embedded-script><![CDATA[
		local_template_init : function(o){
			var o = this.getBean("rocketType");
			if(this.resizeTo) this.resizeTo(525, 400);
			this.getElementByRID("pathCont").style.display = "none";
			
			if(o.id){
				this.getProperties().dndDataPath = o.path;
				this.AddTab("account","Accounts",this.scopeHandler("loadAccountTab",0,1,1));
				this.AddTab("group","Groups",this.scopeHandler("loadGroupTab",0,1,1));
				this.AddTab("permission","Permissions",this.scopeHandler("loadPermissionTab",0,1,1));
				this.AddTab("data","Data",this.scopeHandler("loadDataTab",0,1,1));
				this.ShowTab(0);
				this.loadAccountTab();
			}
			else{
				if(irocket.getCommunityMode() && irocket.getCommunityLifecycle() && irocket.getCommunityProject()){
					this.getElementByRID("genAppCont").style.display = "block";
					this.toggleField("cfgGenerateToggle","cfgGenerateCont");
				}
			}
		},
		generateApplication : function(){
			var sName = this.getElementByRID("name").value;
			var bPerm = this.getElementByRID("chkGenPerm").checked;
			var bGrp = this.getElementByRID("chkGenGrp").checked;
			var iSeedSize = this.getElementByRID("txtSeedSize").value;
			var iMaxSize = this.getElementByRID("txtMaxSize").value;
			var iDist = this.getElementByRID("txtDist").value;
			
			var oC = this;
			oC.setStatus("Generating application ...");
			this.getElementByRID("btnGenerateApplication").disabled = true;
			AM6Client.generateApplication(irocket.getCommunityLifecycle().objectId, irocket.getCommunityProject().objectId, sName, bPerm, bGrp, iSeedSize, iMaxSize, iDist, function(s, v){
				if(v && v.json) v = v.json;
				if(v){
					oC.setStatus("Generated application");
				}
				else{
					oC.setStatus("Failed to generate application");
					this.getElementByRID("btnGenerateApplication").disabled = false;
				}
			});
		},
		resolve : function(o){
			var _s;
			if(!o || o== null || !(_s = o.getProperties()) || !_s.typeName){
				//Hemi.logError("NO RESOLVE");
				return;
			}

			if(_s.typeName.match(/^account$/gi) && o.getPath){
				Hemi.log("RESOLVE " + _s.typeName + " to " + o.getPath());
				o.getElementByRID("path").value = o.getPath();
			}
		},
		loadAccountTab : function(o){
			this.loadTab("Account",o);
		},
		loadGroupTab : function(o){
			this.loadTab("Group",o);
		},
		loadPermissionTab : function(o){
			this.loadTab("Permission",o);
		},
		loadDataTab : function(o){
			this.loadTab("Data",o);
		},
		loadTab : function(s, o){
			var oBean = this.getBean("rocketType");
			var c = this.getElementByRID(s.toLowerCase());
			if(c.loaded) return;
			c.loaded = 1;
			
			var oDiv = document.createElement("div");
			c.appendChild(oDiv);
			Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
			.then((ac)=>{
				ac.setTemplateIsSpace(1);
				ac.getProperties().openerId = this.getObjectId();
				if(s.match(/^(account|group|data)$/gi)){
					ac.getProperties().defaultPath = oBean.path;
				}
				else if(s.match(/^permission$/gi)){
					ac.getProperties().defaultParent = this.getApplicationPermissionBase(); 
				}
				if(s.match(/^account$/gi)) ac.decorateListItemName = this.decorateAccountItem;
				//if(s.match(/^group$/gi)) ac.getProperties().listGroupType = "ACCOUNT";
	
				ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
			});
		},
		addPermission : function(o, sName, sType){
			var oNP = new org.cote.objects.basePermissionType();
			oNP.id = 0;
			oNP.name = sName;
			oNP.parentId = o.id;
			oNP.nameType = "PERMISSION";
			oNP.permissionType = (sType ? sType : "USER");
			oNP.parentPath = o.parentPath + "/" + o.name;
			return AM6Client.update("PERMISSION", oNP);
		},
		getApplicationPermissionBase : function(){
			var oBean = this.getBean("rocketType");
			
			var oPB = uwm.getDefaultParentForType("Permission",AM6Client.user("PERMISSION","USER"));
				if(!oPB){
					alert("Invalid parent permission")
					return 0;
				}
				var oPA = AM6Client.getByName("PERMISSION",oPB.objectId,"Applications");

				if(oPA == null && this.addPermission(oPB,"Applications","APPLICATION")){
					oPA =  AM6Client.getByName("PERMISSION",oPB.objectId,"Applications");
				}
				if(oPA == null){
					alert("Invalid permission root");
					return 0;
				}
				var oPA1 = AM6Client.getByName("PERMISSION",oPA.objectId,oBean.name);
				if(oPA1 == null && this.addPermission(oPA,oBean.name,"APPLICATION")){
					oPA1 =AM6Client.getByName("PERMISSION",oPA.objectId,oBean.name);
				}	
				if(oPA1 == null){
					alert("Invalid permission base");
					return;
				}
				return oPA1;

			},
		
		
		decorateAccountItem : function(o){
			var sF = AM6Client.getAttributeValue(o,"firstName");
			var sM = AM6Client.getAttributeValue(o,"middleName");
			var sL = AM6Client.getAttributeValue(o,"lastName");
			if(sF || sM || sL) return (sF ? sF : "") + (sM ? " " + sM : "") + (sL ? " " + sL : "");
			return o.name;
		},
		addType : function(o){
			Hemi.log("Add group type: " + o.name + ":" + o.parentId);
			
			var b = AM6Client.update("GROUP",o);
			
			if(b && irocket.getCommunityMode() && irocket.getCommunityLifecycle() && irocket.getCommunityProject()){
				var oP = AM6Client.get("GROUP",o.parentId),g;
				if(oP) g = AM6Client.find("GROUP","DATA",oP.path + "/" + o.name);
				if(g){
					b = AM6Client.configureCommunityProjectGroupEntitlements(irocket.getCommunityLifecycle().objectId, irocket.getCommunityProject().objectId, g.objectId);
				}
				else b = 0;
			}
			return b;

		}
	]]></embedded-script>
</span></fragment><fragment id = "Application.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Application";
			this.getProperties().viewTypeName = "Application";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getProperties().defaultPath) this.getProperties().defaultPath = "~/Applications";
			this.getProperties().populate = 0;
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = new org.cote.objects.baseGroupType();
					o.name = "";
					o.nameType = "GROUP";
					var p = AM6Client.make("GROUP","DATA",this.getProperties().defaultPath);
					o.parentId = (p ? p.id : 0);
					o.nameType = "GROUP";
					o.groupType = "DATA";
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "AddressFields.xml">
<span>
	
	<div class="rocket-column-2">
		<p>
			Description:
		</p>
		<p>
			<input type="text" rid="description" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Location:
		</p>
		<p>
			<select rid="locationType" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>HOME</option>
    		<option>WORK</option>
    		<option>MOBILE</option>
    		<option>OTHER</option>
    		<option>NETWORK</option>

			</select>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Address:
		</p>
		<p>
			<input type="text" rid="addressLine1" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Address:
		</p>
		<p>
			<input type="text" rid="addressLine2" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			City:
		</p>
		<p>
			<input type="text" rid="city" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Region:
		</p>
		<p>
			<input type="text" rid="region" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			State:
		</p>
		<p>
			<input type="text" rid="state" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Country:
		</p>
		<p>
			<input type="text" rid="country" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Postal Code:
		</p>
		<p>
			<input type="text" rid="postalCode" bind="${bean.rocketType}" class="rocket-text"/>
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			//this.getElementByRID("pathCont").style.display = "none";
		},
		addType : function(o){
			Hemi.log("Add address type: " + o.name );
			
			return AM6Client.update("ADDRESS",o);
		},
		prepareSave : function(o){
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Address.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Address";
			if(!this.getProperties().defaultPath) this.getProperties().defaultPath = "~/Addresses";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);

				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment><fragment id = "AccountPickerSingle.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Account:
		</p>
		<p>
			<input type="text" disable="true" rid="account" class="rocket-text rocket-text-pick"/>
			<input type="button" value="..." class="rocket-button" onclick="${this}.chooseAccount()"/>
			<input type="button" value="X" class="rocket-button" onclick="${this}.pickAccount('Account')"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openAccount()"/>
		</p>
	</div>
	<embedded-script><![CDATA[
	embedded_init : function(){
		if(!this.getProperties().accountProp) this.getProperties().accountProp = "account";
		var o = this.getBean("rocketType");
		this.pickAccount('Account',o.account);
	},
	chooseAccount : function(){
		this.manageList("Account", this.getObjectId(),"pickAccount");
	},

		openAccount : function(){
			var o = this.getBean("rocketType"), aP = this.getProperties().accountProp;
			if(o && o[aP] && this.openItem) this.openItem(o[aP],"Account");
		},
	pickAccount : function(s, v){
		var o = this.getBean("rocketType");
		o[this.getProperties().accountProp] = v;
		this.getElementByRID("account").value = (v ? v.name : "");
	}
	]]></embedded-script>
</span></fragment><fragment id = "AccountPicker.xml">
<span>
	<div class="rocket-column-2" rid="accountPicker" style="display:none;">
		<p rid="accountPickerTitle">
			<span rid="accountPickerToggle"/> Accounts:
		</p>
		<p rid="accountPickerContent">
			<div component="wideselect" rid="accountsList">
			</div>
			<br/>
			<input type="button" class="rocket-button" value="+" onclick="${this}.addAccount()"/>
			<input type="button" class="rocket-button" value="-" onclick="${this}.removeAccount()"/>
			<input type="button" class="rocket-button" value="&gt;" onclick="${this}.openAccount()"/>
		</p>
	</div>


	<embedded-script><![CDATA[
		embedded_init : function(){
			this.getElementByRID("accountPicker").style.display = "block";
			this.toggleField("accountPickerToggle","accountPickerContent");
			if(!this.getProperties().accountListProp) this.getProperties().accountListProp = "accounts";
		},
		prepareSaveAccountPicker : function(o){
			this.prepareSaveAccountsList(o);
		},
		initAccountPicker : function(){
			/// Have to put a little extra logic here because account information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableAccountInformation = (o != null ? 1 : 0);
			
			if(_s.enableAccountInformation){
				this.getProperties().accountListProp = "accounts";
				this.getComponentByRID("accountsList").setLoadHandler(this.scopeHandler("configAccountsList",0,1,1));
			}
		},

		
		openAccount : function(){
			var oI = this.getAccountsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Account");
		},
		addAccount : function(){
			this.manageList("Account", this.getAccountsList().getObjectId());
		},
		removeAccount : function(){
			var oI = this.getAccountsList().getActiveItem();
			if(oI) this.getAccountsList().clearItem(oI.index);
		},

		configAccountsList : function(s,v){
			var oL = this.getAccountsList(),_s = this.getProperties();
			if(!_s.enableAccountInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshAccounts();
		},
		refreshAccounts : function(){
			var oL = this.getAccountsList(), aP = this.getProperties().accountListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o || !o[aP]) return;
			for(var i = 0; i < o[aP].length;i++){
				oL.addItem(o[aP][i].name,o[aP][i]);
			}
		},
		getAccountsList : function(){
			return this.getComponentByRID("accountsList").GetWideSelect();
		},
		prepareSaveAccountsList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableAccountInformation) return;
			aP = this.getProperties().accountListProp;
			o[aP] = [];
			var aAccounts = this.getAccountsList().getItems();
			for(var i = 0; i < aAccounts.length;i++) o[aP].push(aAccounts[i].data);
		}
		
		
		
	]]></embedded-script>
</span></fragment><fragment id = "AccountFields.xml">
<span>
	<div class="rocket-column-2">
		<p>
			Type:
		</p>
		<p>
			<select rid="accountType" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>GUEST</option>
    		<option>SYSTEM</option>
    		<option>NORMAL</option>
    		<option>DEVELOPMENT</option>

			</select>
		</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Status:
		</p>
		<p>
			<select rid="accountStatus" bind="${bean.rocketType}">
    		<option>UNKNOWN</option>
    		<option>UNREGISTERED</option>
    		<option>NORMAL</option>
    		<option>RESTRICTED</option>
    		<option>REGISTERED</option>
    		<option>DISABLED</option>

			</select>
		</p>
	</div>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'JWTPicker.xml']/span" src="${dwac.path}"/>	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'ContactInformation.xml']/span" src="${dwac.path}"/>

	
	<embedded-script><![CDATA[
		embedded_init : function(){
			//this.getElementByRID("pathCont").style.display = "none";
			
			this.initContactInformation();
		},
		addType : function(o){
			Hemi.log("Add account type: " + o.name );
			var b = false;
			
			return AM6Client.update("ACCOUNT",o);
		},
		prepareSave : function(o){
			this.prepareSaveContactInformation(o);
			return 1;
		}
	]]></embedded-script>
</span></fragment><fragment id = "Account.xml">
<Template>
	<embedded-script><![CDATA[
		template_init : function(){
			this.getProperties().typeName = "Account";
			if(!this.getProperties().defaultPath) this.getProperties().defaultPath = "~/Accounts";
			this.getProperties().viewBase = uwm.getApiTypeView(this.getProperties().typeName);
			if(!this.getBean("rocketType")){
				var o = this.getProperties().viewType;
				if(!o){
					o = model.primitive(this.getProperties().typeName);
				}
				else if(o.groupPath){
					this.getProperties().defaultPath = o.groupPath;
				}
				delete this.getProperties().viewType;
				this.setBean(o,"rocketType");
			}
			this.loadTemplate('${dwac.path}','BaseTemplate.xml');
		}
	]]></embedded-script>
</Template></fragment></fragments>
<tasks>
</tasks>
<application-components></application-components><Templates>
<Template id="TestTemplate.xml">
<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
<h2>Example Title</h2>
<p rid="exampleId">Example content</p>
<p><input type="button" value="Test" onclick="alert(${this}.getElementByRID)"/></p>
<p><input type="text" value="Example text" onkeyup="${this}.echo()" rid="exText"/></p>
<p>Echo: <span rid="exEcho">Example text</span></p>
<p><input type="button" value="Destroy" onclick="${this}.destroy()"/></p>
<embedded-script><![CDATA[
template_init : function(){
	window.testTemplate = this;
	var oP = document.createElement("p");
	oP.appendChild(document.createTextNode("Test scripted content"));
	this.getContainer().appendChild(oP);
	if(!this.getElementByRID){
		oP.innerHTML = "<b style = 'color: #FF0000;'>Error: Include failed to load</b>";
	}
	else{
		Hemi.xml.setInnerXHTML(this.getElementByRID("exampleId"), "Example overwrite with external utility");
	}
},
echo : function(){
	Hemi.xml.setInnerXHTML(this.getElementByRID("exEcho"),this.getElementByRID("exText").value);
}
]]></embedded-script>
</Template><Template id="TestField2.xml">
<div>
DateTime-Local: ${bean.demo.datetime}
</div>
<div>
<input type="button" value="&lt;&lt;" onclick="${this}.loadTemplate('${dwac.path}','TestField1.xml')"/>
</div>
</Template><Template id="TestField1.xml">
<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
<div>
	<input type="datetime-local" component="calendar" rid="datetime" bind="${bean.demo}"/>
</div>
<div>
	<input type="date" rid="date" bind="${bean.demo}"/>
</div>
<div>
	<input type="time" rid="time" bind="${bean.demo}"/>
</div>
<div>
<input type="button" value="&gt;&gt;" onclick="${this}.loadTemplate('${dwac.path}','TestField2.xml')"/>
</div>
	<embedded-script>
		<![CDATA[
		template_init : function(){

			/*		
			this.scopeHandler("component_loaded",0,0,1);
			var oC = this.getComponentByRID("datetime");
			Hemi.message.service.subscribe(this,"oncomponentload", "_prehandle_component_loaded", oC);
			*/
			if(!this.getBean("demo")){
				Hemi.log("Creating bean 'demo'");
				this.setBean({datetime:new Date("02/01/1980 11:34"), date:new Date("02/01/1980 11:34"), time:"11:34"},"demo");
				this.synchronizeForm(1);
			}
		},
		_handle_component_loaded : function(s, v){
			this.synchronizeForm(1);
		},
		syncComp : function(){
			/// alert(this.getTemplateSpace().getSpaceObjectByName('datetime'));
		}
		
	]]></embedded-script>
</Template><Template id="SelectCommunity.xml">
<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
<div rid="ctl" style="display:none;">
<select onchange="${this}.selectMode()" rid="mode"><option value="0">Personal</option><option value="1">Community</option></select>
<span rid="lifecycleCont">
<select onchange="${this}.selectLifecycle()" rid="lifecycles"><option value="0">Unknown</option></select>
</span>
<select onchange="${this}.selectProject()" rid="projects"><option value="0">Unknown</option></select>
</div>
<embedded-script><![CDATA[
	template_init : function(){
		Hemi.message.service.subscribe(this, "onsessionrefresh", "refreshSession");
		Hemi.message.service.subscribe(this, "onchangecommunity", "refreshCommunity");
		this.refreshMode(1);
		this.refreshSession();
	},
	refreshCommunity : function(s, v){
		if(v == this) return;

		this.getElementByRID("mode").value = (irocket.getCommunityMode() ? "1" : "0");
		this.getProperties().blockAnnounce = 1;
		this.refreshLifecycleList();
		this.refreshProjectList();
		this.getProperties().blockAnnounce = 0;
		
	},
	refreshSession : function(s,v){
		var b = (uwm.rule("IsLoggedIn") && AM6Client.isCommunityConfigured());
		
		this.getElementByRID("ctl").style.display = (b ? "block":"none");
		if(b){
			
			this.refreshLifecycleList();
			this.refreshProjectList();
			this.selectLifecycle();
			this.selectProject();
		}
	},
	selectMode : function(b){
		irocket.setCommunityMode((this.getElementByRID("mode").value == "1" ? 1 : 0));
		if(!b) this.refreshSession();
	},
	refreshMode : function(){
		this.getElementByRID("mode").value = (irocket.getCommunityMode() ? "1" : "0");
	},
	refreshLifecycleList : function(bNoUp){
		this.getElementByRID("lifecycleCont").style.display = (irocket.getCommunityMode() ? "" : "none");

		var oSel1 = this.getElementByRID("lifecycles");
		oSel1.options.length = 1;

		if(irocket.getCommunityMode()){
			var aLi = irocket.listLifecycles();
			for(var i = 0; i < aLi.length;i++){
				oSel1.options[i+1] = new Option(aLi[i].name,"" + aLi[i].id);
			}
			if(irocket.getCommunityLifecycle() && irocket.getCommunityLifecycle() != null){
				oSel1.value = "" + irocket.getCommunityLifecycle().id;
			}
			else if(oSel1.options.length > 1) oSel1.selectedIndex = 1;
			else oSel1.selectedIndex = 0;
		}
	},
	refreshProjectList : function(){
		var oSel = this.getElementByRID("projects");
		oSel.options.length = 1;
		if(irocket.getCommunityMode() && !irocket.getCommunityLifecycle()) return;
		
		var aL = irocket.listProjects();
		for(var i = 0; i < aL.length;i++){
			oSel.options[i+1] = new Option(aL[i].name,"" + aL[i].id);
		}
		
		if(!irocket.getCommunityMode()){
			oSel.options[oSel.options.length] = new Option("New","_new");
			if(irocket.getCurrentProject()){
				oSel.value = "" + irocket.getCurrentProject().id;
			}
		}
		else if(irocket.getCommunityMode() && irocket.getCommunityProject() && irocket.getCommunityProject() != null){
			oSel.value = "" + irocket.getCommunityProject().id;
		}
		else if(oSel.options.length > 1) oSel.selectedIndex = 1;
		else oSel.selectedIndex = 0;
	},
	selectLifecycle : function(){
		var vS = this.getElementByRID("lifecycles").value;
		if(vS.match(/^\d+$/) && vS != "0"){
			var oL = AM6Client.get("LIFECYCLE",vS);
			irocket.setCommunityLifecycle(oL);
			this.refreshProjectList();
			this.selectProject();
		}
	},
	selectProject : function(){
		var vS = this.getElementByRID("projects").value;
		if(vS.match(/^\d+$/) && vS != "0"){
			var oP = AM6Client.get("PROJECT",vS);
			if(!irocket.getCommunityMode()) irocket.setCurrentProject(oP);
			else irocket.setCommunityProject(oP);
		}
		else if(vS == "_new"){
			var o = new org.cote.objects.projectType();
			o.name = "";
			o.description = "";
			o.id = 0;
			o.stages = [];
			irocket.setCurrentProject(o);
			this.getElementByRID("projects").selectedIndex = 0;
		}
		if(!this.getProperties().blockAnnounce) Hemi.message.service.publish("onchangecommunity",this);
		
	},
	template_destroy : function(){
		Hemi.message.service.unsubscribe(this, "onsessionrefresh", "refreshSession");
	}

]]></embedded-script>
</Template><Template id="ResourceMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>
	<div rid="artifact">
	</div>	
	<div rid="resource">
	</div>	
	<div rid="estimate">
	</div>	
	<div rid="cost">
	</div>				
	<div rid="time">
	</div>				
	<div rid="module">
	</div>


	<div rid="ticket">
	</div>	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.AddTab("artifact","Artifacts",this.scopeHandler("loadArtifactTab",0,1,1));
				this.AddTab("resource","Resources",this.scopeHandler("loadResourceTab",0,1,1));
				this.AddTab("estimate","Estimates",this.scopeHandler("loadEstimateTab",0,1,1));
				this.AddTab("cost","Costs",this.scopeHandler("loadCostsTab",0,1,1));
				this.AddTab("time","Times",this.scopeHandler("loadTimesTab",0,1,1));
				this.AddTab("module","Modules",this.scopeHandler("loadModuleTab",0,1,1));
				this.AddTab("ticket","Tickets",this.scopeHandler("loadTicketTab",0,1,1));
				this.ShowTab(0);
				this.loadArtifactTab();
			},
			loadTimesTab : function(o){
				this.loadTab("Time",o);
			},
			loadCostsTab : function(o){
				this.loadTab("Cost",o);
			},
			loadGroupsTab : function(o){
				this.loadTab("Group",o);
			},
			loadUsersTab : function(o){
				this.loadTab("User",o);
			},
			loadValidationRuleTab : function(o){
				this.loadTab("ValidationRule",o);
			},
			loadFormTab : function(o){
				this.loadTab("Form",o);
			},
			loadFormElementTab : function(o){
				this.loadTab("FormElement",o);
			},
			loadTicketTab : function(o){
				this.loadTab("Ticket",o);
			},
			loadLifecycleTab : function(o){
				this.loadTab("Lifecycle",o);
			},
			loadStoryTab : function(o){
				this.loadTab("Story",o);
			},
			loadProjectTab : function(o){
				this.loadTab("Project",o);
			},
			loadModuleTab : function(o){
				this.loadTab("Module",o);
			},
			loadStageTab : function(o){
				this.loadTab("Stage",o);
			},
			loadMethodologyTab : function(o){
				this.loadTab("Methodology",o);
			},
			loadProcessTab : function(o){
				this.loadTab("Process",o);
			},
			loadProcessStepTab : function(o){
				this.loadTab("ProcessStep",o);
			},
			loadWorkTab : function(o){
				this.loadTab("Work",o);
			},
			loadTaskTab : function(o){
				this.loadTab("Task",o);
			},
			loadEstimateTab : function(o){
				this.loadTab("Estimate",o);
			},
			loadModelTab : function(o){
				this.loadTab("Model",o);
			},
			loadNoteTab : function(o){
				this.loadTab("Note",o);
			},
			loadDataTab : function(o){
				this.loadTab("Data",o);
			},
			loadArtifactTab : function(o){
				this.loadTab("Artifact",o);
			},
			
			loadCaseTab : function(o){
				this.loadTab("Case",o);
			},
			loadRequirementTab : function(o){
				this.loadTab("Requirement",o);
			},
			loadResourceTab : function(o){
				this.loadTab("Resource",o);
			},
			loadScheduleTab : function(o){
				this.loadTab("Schedule",o);
			},
			loadBudgetTab : function(o){
				this.loadTab("Budget",o);
			},
			loadGoalTab : function(o){
				this.loadTab("Goal",o);
			},
			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
				});
			},
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			}
		]]>
	</embedded-script>
</Template><Template id="RecentArticles.xml">
<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
<div class="uwm-content" rid="content"/>
<embedded-script><![CDATA[
	template_init : function(){
		var ctl = this;
		uwm.rule("IsLoggedIn").then((b)=>{ 
			if(!b){
			    Hemi.logWarning("Don't attempt to load articles for unauthenticated principle.");
				return;
			}
			this.getProperties().stepMap = {};
			var oS = new org.cote.objects.baseSearchRequestType();
			oS.sort = AM6Client.newSortQuery("CREATEDDATE", "DESCENDING");
			oS.organizationId = 0;
			oS.fullRecord = true;
			oS.populateGroup = false;
			oS.startRecord = 0;
			oS.recordCount = 6;
			var bPictBook = (window.pictureBookMode && window.pictureBookMode.enabled ? 1 : 0);
	
			uwm.getUser().then((u)=>{
				ctl.getObjects().user = u;
				AM6Client.find("GROUP","DATA","~/Articles",function(s,v){
					var oG = (v && typeof v.json != "undefined" ? v.json : v);
					if(!oG || oG == null) return;
	
					AM6Client.findBy("DATA", oG.objectId, oS,function(s, v){
							if(v && v.json && v.json.length){
								if(!v.json[0].dataBytesStore || v.json[0].dataBytesStore.length == 0){
									Hemi.xml.setInnerXHTML(ctl.getElementByRID("content"),"Error translating blog content");
								}
								else{
									var oH = document.createElement("h1");
									var oL = document.createElement("a");
									oL.appendChild(document.createTextNode("Articles"));
									oL.setAttribute("href","/AccountManagerService/article/" + AM6Client.dotPath(u.organizationPath) + "/" + u.name);
									oH.appendChild(oL);
									ctl.getElementByRID("content").appendChild(oH);
									for(var j = 0; j < v.json.length; j++){
										ctl.renderArticle(v.json[j], bPictBook);
									}
								}
							}
							else{
								Hemi.xml.setInnerXHTML(ctl.getElementByRID("content"),"Articles Not Available");
							}
						});
				});
			});
		});
	},
	renderStep : function(i, b, a){
		var vP = this.getProperties()[i];
		if(!vP) return;
		
		if(typeof a == "number") vP.step = a;
		else vP.step += (b ? 1 : -1);
		vP.step = Math.max(Math.min(vP.step,vP.steps-1),0);
		console.log("Step: " + a + " : " + vP.step);
		for(var s = 0; s < vP.steps; s++){
			if(s == vP.step){
				vP.blocks[s].style.display = "block";
				if(vP.images[s]) vP.images[s].style.display = "";
				if(vP.buttons[s]) vP.buttons[s].disabled = true;
			}
			else{
				vP.blocks[s].style.display = "none";
				if(vP.images[s]) vP.images[s].style.display = "none";
				if(vP.buttons[s]) vP.buttons[s].disabled = false;
			}
		}
		vP.controls[0].disabled = (vP.step == 0);
		vP.controls[1].disabled = (vP.step >= (vP.steps - 1));
		
	},
	renderArticle : function(o, bMode){

		var oCtr = this.getElementByRID("content");
		var oCont = document.createElement("div");
		oCont.setAttribute("style","clear:both");
		oCont.setAttribute("class","uwm-content-section uwm-box-border uwm-box-shadow");
		oCtr.appendChild(oCont);
		
		var _p = this.getProperties();
		_p[o.objectId] = {
			mode : bMode,
			steps : 0,
			step : 0,
			controls : [],
			images : [],
			blocks : [],
			buttons : []
		};
		var vP = _p[o.objectId];
		var oPCont, aCont,oICont;

		var ctl = this;
		
		if(bMode){
			var bb = 0;
			var aTags = AM6Client.findTags("DATA", o.objectId);
			for(var c = 0; c < aTags.length; c++){
				if(aTags[c].name.match(/^picture mode$/gi)) bb = 1;
			}
			if(!bb) bMode = 0;
		}
		if(bMode){
			oICont = document.createElement("div");
			oPCont = document.createElement("div");
			oACont = document.createElement("div");
			oICont.style.cssText = "float: left; margin-right: 1em;margin-bottom: 1em; margin-left: .5em; margin-top: .5em;";
			oPCont.style.clear = "both";
			oPCont.style.textAlign = "center";
			oCont.appendChild(oICont);
			oCont.appendChild(oACont);
			oCont.appendChild(oPCont);
			
		}
		var aOD = oCtr.getElementsByTagName("div");
		
		bbConverter.copyInto(uwm.base64Decode(o.dataBytesStore),(bMode ? oACont : oCont),(j > 0));
		
		if(bMode){
			var aD = oACont.getElementsByTagName("div");
			if(aD.length > 0){
			
				vP.steps = aD.length;
				var oI1 = document.createElement("input");
				oI1.setAttribute("type","button");
				oI1.setAttribute("value","<");
				oI1.onclick = function(){
					ctl.renderStep(o.objectId, 0);
				};
				
				oPCont.appendChild(oI1);
				vP.controls.push(oI1);
				var oI2 = document.createElement("input");
				oI2.setAttribute("type","button");
				oI2.setAttribute("value",">");
				oI2.onclick = function(){
					ctl.renderStep(o.objectId, 1);
				};
				
				oPCont.appendChild(oI2);
				vP.controls.push(oI2);
				
				for(var i = 0; i < aD.length; i++){
					vP.blocks.push(aD[i]);
					var aI = aD[i].getElementsByTagName("img");
					if(aI.length > 0){
						/// Remove any clear 
						aD[i].style.clear = "";
						Hemi.xml.setInnerXHTML(oICont, aI[0], 1);
						
						vP.images[i] = oICont.lastChild;
						vP.images[i].onclick = function(){
							ctl.renderStep(o.objectId, 1);
						};
						
						var oN = document.createElement("input");
						oN.setAttribute("type","button");
						oN.setAttribute("value",(i + 1));
						oN.setAttribute("idx","" + i);
						oN.onclick = function(e){
							var oB = Hemi.event.getEventSource(e);
							ctl.renderStep(o.objectId, 0, parseInt(oB.getAttribute("idx")));
						};
						vP.buttons[i] = oN;
						oPCont.insertBefore(oN,oI2);
						
						/// Strip off any class
						///
						vP.images[i].className = "";
						if(window.pictureBookMode.height) vP.images[i].style.maxHeight = window.pictureBookMode.height + "px";
						if(window.pictureBookMode.width) vP.images[i].style.maxWidth = window.pictureBookMode.width + "px";
						aI[0].style.display = "none";
					}
					if(i > 0){
						aD[i].style.display = "none";
						if(vP.images[i]) vP.images[i].style.display = "none";
					}
					else if(vP.buttons[i]) vP.buttons[i].disabled = true;
					
				}
			}
		}
		
		var aL = oCtr.getElementsByTagName("a");
		
		for(var i = 0; i < aL.length;i++){
			if(!aL[i].href || !aL[i].href.match(/\/AccountManagerService\/media/)) continue;
			aL[i].onclick = function(){
				uwm.openPopInImage(this.href);
				return false;
			}
		}
		
		aL = oCont.getElementsByTagName("h1");
		if(aL.length){
			var oL = document.createElement("a");
			oL.insertBefore(document.createTextNode(". "), oL.firstChild);
			
			oL.setAttribute("href","/AccountManagerService/article/" + AM6Client.dotPath(o.organizationPath) + "/" + this.getObjects().user.name + "/" + o.name);
			aL[0].appendChild(oL);
		}
	}
	
]]></embedded-script>
</Template><Template id="ProjectMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>

	<div style="margin:0px;" rid="lifecycle"/>
	<div style="margin:0px;" rid="project"/>	
	<div style="margin:0px;" rid="stage"/>	
	<div style="margin:0px;" rid="work"/>
	<div style="margin:0px;" rid="task"/>
			
	<embedded-script>
		<![CDATA[
			template_init: function(){
				//this.serveTransaction("change_bus", Hemi.data.io.service.getBusType().ONLINE);
				this.AddTab("lifecycle","Lifecycles",this.scopeHandler("loadLifecycleTab",0,1,1));
				this.AddTab("project","Projects",this.scopeHandler("loadProjectTab",0,1,1));
				this.AddTab("stage","Stages",this.scopeHandler("loadStageTab",0,1,1));
				this.AddTab("work","Work",this.scopeHandler("loadWorkTab",0,1,1));
				this.AddTab("task","Tasks",this.scopeHandler("loadTaskTab",0,1,1));
				this.ShowTab(0);
				this.loadLifecycleTab();
			},
			loadBudgetTab : function(o){
				this.loadTab("Budget",o);
			},

			loadTimesTab : function(o){
				this.loadTab("Time",o);
			},
			loadCostsTab : function(o){
				this.loadTab("Cost",o);
			},

			loadLifecycleTab : function(o){
				this.loadTab("Lifecycle",o);
			},
			loadProjectTab : function(o){
				this.loadTab("Project",o);
			},
			loadStageTab : function(o){
				this.loadTab("Stage",o);
			},
			loadWorkTab : function(o){
				this.loadTab("Work",o);
			},
			loadTaskTab : function(o){
				this.loadTab("Task",o);
			},
			loadEstimateTab : function(o){
				this.loadTab("Estimate",o);
			},
			loadNoteTab : function(o){
				this.loadTab("Note",o);
			},
			loadArtifactTab : function(o){
				this.loadTab("Artifact",o);
			},

			loadScheduleTab : function(o){
				this.loadTab("Schedule",o);
			},
			loadResourceTab : function(o){
				this.loadTab("Resource",o);
			},

			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
				});
			}
		]]>
	</embedded-script>
</Template><Template id="ProjectDesigner.xml">
<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<p rid="projectControls" style="display:none;">
	<input type="button" value="Roll" onclick="${this}.rollEstimates()"/>
	<input type="button" value="Unroll" onclick="${this}.unrollEstimates()"/>
	<input type="button" value="Save" onclick="${this}.save()"/>
	<!-- 
	<input type = "button" value = "Debug Save" onclick = "${this}.save(1)" />
	-->
	</p>
	<p>
	Dev Note: Just make this whole thing one big WideSelect control, since that already has the buffering capability that makes working with large datasets easier.
	Currently, it takes upwards of 30 seconds to build up a 2K row view; 9 seconds of that is on the deep populate of the project, which isn't the most efficient way to build out the whole dataset
	</p>
	<table style="clear:both;display:none;border-collapse:collapse;" rid="projectTable" border="0" cellpadding="0" margin="0" cellspacing="0">
	<thead>
		<tr>
			<th style="width:55px;"/>
			<th style="width:25px;"/>
			<th style="width: 210px;">Name</th>
			<th style="width:125px;">Estimate</th>
			<th style="width:100px;">Start</th>
			<th style="width:100px;">Due</th>
			<th style="width:100px;">Depends</th>
			<th style="width:125px;">Resources</th>
			<th style="width:40px;"/>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>
			<input disabled="true" value="" class="rocket-text" type="text" style="text-align:right;width: 25px !important; border-width: 0px !important;"/>
				<input type="button" class="uwm-inline-button uwm-inline-button-info" value="" onclick="${this}.openObject()"/></td>
						<td/>
			<td>
			<input type="text" class="rocket-text" style="width:175px;" rid="projectName"/>
			<input type="button" onclick="${this}.addStage()" value="+" class="uwm-inline-button"/>
			</td>
			<td colspan="6"/>
		</tr>
	</tbody>
	
	</table>	
<embedded-script><![CDATA[
	template_init : function(){
		var _o = this.getObjects(),_s = this.getProperties();
		_s.debugRefresh = 1;
		_s.elementNames = ["rowNum","status","budget","schedule","name","end","estimate","dependencies","resources"];
		this.scopeHandler("project_picker_open",0,0,1);
		this.scopeHandler("project_picker_choose",0,0,1);
		Hemi.message.service.subscribe(this, "onsessionrefresh", "refreshSession");
		Hemi.message.service.subscribe(this, "onchangecommunity", "refreshCommunity");
		
		Hemi.message.service.subscribe(this, "ondragstart", "handleDragStart");
		Hemi.message.service.subscribe(this, "ondragover", "handleDrag");
		Hemi.message.service.subscribe(this, "ondrop", "handleDrop");
		Hemi.message.service.subscribe(this, "ondragend", "handleDragEnd");
		
		this.refreshSession();
		_s.autoSchedule = 1;
		
		_s.realHoursInDay = 24;
		_s.hoursInDay = 8;
		_s.hoursInWeek = 40;
		_s.realHoursInWeek = 168;
		_s.hoursInYear = _s.hoursInWeek * 52;
		_s.realHoursInYear = 8736;
		_s.hoursInMonth = parseInt(_s.hoursInYear / 12); 
		_s.realHoursInMonth = _s.hoursInMonth;

	},
	
	template_destroy : function(){
		this._prehandle_project_picker_open = 0;
		this._prehandle_project_picker_choose = 0;
		Hemi.message.service.unsubscribe(this, "onchangecommunity", "refreshCommunity");
		Hemi.message.service.unsubscribe(this, "onsessionrefresh", "refreshSession");
	},
	save : function(bDebug){
		var _o = this.getObjects(), p, b, o;
		if(this.prepareSaveProject()){
		
			if(!bDebug){
				/// Cleanup the trashed objects first
				///
				for(var i in _o.stageTrash) AM6Client.delete("STAGE",_o.stageTrash[i].objectId);
				for(var i in _o.taskTrash) AM6Client.delete("TASK",_o.taskTrash[i].objectId);
				_o.previousVersion = _o.project;
				b = AM6Client.updateCommunityProject(_o.project);
				if(b){
					if(_o.project.objectId){
						p = AM6Client.communityProjectFull(_o.project.objectId);
					}
					else{
						o = AM6Client.getByName("PROJECT",AM6Client.find("GROUP","DATA",_o.project.groupPath).objectId,_o.project.name);
						if(o){
							p =  AM6Client.communityProjectFull(o.objectId);
						}
					}
				}
			}
			else{
				p = _o.project;
			}
			if(p && p!= null){
				if(irocket.getCommunityMode()) irocket.setCommunityProject(p);
				else irocket.setCurrentProject(p);
			}
			else{
				alert("Todo: Add status display: Error saving");
			}
			
		}
	},
	/// The save function is somewhat different than other atomic saves in that it will aggregate the current information
	/// into the community/current project, clear its current contents, and then update via the rocket community.
	///	Types of objects that need to be created/updated here are: project, stage, work, and task
	///	Everything else should already be created via a model import
	///
	prepareSaveProject : function(){
		var _o = this.getObjects(),p,s,i,t,ls,lt,_s = this.getProperties();
		if(!(p = _o.project)){
			Hemi.logError("Invalid project reference");
			return;
		}
		if(!_o.project.groupPath) _o.project.groupPath = AM6Client.make("GROUP", "DATA",irocket.getBasePath("Project")).path;
		_o.project.name = Hemi.text.trim(this.getElementByRID("projectName").value);
		/// chuck all the current stage references
		/// note: this won't delete the stages
		p.stages = [];
		/// Use rowOrder to reset logical ids and stage references
		///
		for(var c = 0; c < _o.rowOrder.length;c++){
			i = _o.rowOrder[c];
			if(_o.stages[i]) s = _o.stages[i];
			else if(_o.tasks[i]) t = _o.tasks[i];
			else{
				Hemi.logError("Invalid id reference: " + i);
				continue;
			}
			if(s != ls){
				Hemi.log("Preparing to save stage '" + s.object.name + "'");
				this.prepareSaveStage(p, s);
				if(_s.autoSchedule && ls){
		         	ls.object.schedule.startTime = new Date(ls.minTaskTime);
		         	ls.object.schedule.endTime = new Date(ls.maxTaskTime);
				}
				ls = s;	
			}
			/// Don't call prepareSave for child tasks
			/// those will be handled recursively
			if(t != lt && !t.parentGuid){
				Hemi.log("Preparing to save task '" + t.object.name + "'");
				this.prepareSaveTask(p, s, t, 0);
				lt = t;
			}
		}
		if(_s.autoSchedule && ls){
		    ls.object.schedule.startTime = new Date(ls.minTaskTime);
		    ls.object.schedule.endTime = new Date(ls.maxTaskTime);
		}
		return 1;
	},
	setElementValue : function(sId,sVar,bT){
		if(bT) Hemi.xml.setInnerXHTML(this.getElementByRID(sId),sVar);
		else this.getElementByRID(sId).value = sVar;
	},
	getElementValue : function(sId,bT){
		if(bT) return Hemi.text.trim(Hemi.xml.getInnerText(this.getElementByRID(sId)));
		return Hemi.text.trim(this.getElementByRID(sId).value);
		
	},
	prepareSaveTask : function(p, s, t, pt){
		
		var sEn = this.getElementValue(t.guid + "estimate",0),_o = this.getObjects(),_s = this.getProperties();
		/// status is already set
		/// if estimate is set and the name changed, or there is a name but no estimate, then create a new estimate

		t.object.name = Hemi.text.trim(this.getElementByRID(t.guid + "name").value);
		if(t.object.name.length == 0) t.object.name = s.object.name + " Task " + (this.getObjects().tasks.length + 1);
		t.object.logicalOrder = t.index;
		if(!t.object.groupPath) t.object.groupPath = AM6Client.make("GROUP", "DATA",irocket.getBasePath("Task")).path;
		/// throw out childTask references - these wouldn't be saved anyway except through saving the community project
		/// because task inheritence is determined by parentId, not participation
		///
		t.object.childTasks = [];
		/// break the parentId off any persistant task if it's been pushed up
		///
		if(!pt){
			t.object.parentId = 0;
			s.object.work.tasks.push(t.object);
		}
		else pt.object.childTasks.push(t.object);
	
		/// iterate through child tasks and push through
		for(var c = 0; c < t.childTasks.length;c++){
			this.prepareSaveTask(p,s,this.getObjects().tasks[t.childTasks[c]],t);
		}
		
				/// process dependencies
		for(var i = 0; i < t.dependencies.length; i++){
			var oA = new org.cote.objects.artifactType();
			oA.nameType = "ARTIFACT";
			var vA = (_o.stages[t.dependencies[i]] ? _o.stages[t.dependencies[i]] : _o.tasks[t.dependencies[i]]);
			/// don't set any values here - let the backend saveCommunityProject process set the defaults 
			oA.name = "";
			oA.id = 0;
			oA.description = "";
			oA.artifactType = "UNKNOWN";
			oA.createdDate = new Date();
			oA.previousTransitionId = 0;
			oA.nextTransitionId = 0;
			oA.artifactDataId = 0;
			oA.groupPath = AM6Client.make("GROUP", "DATA",irocket.getBasePath("Artifact")).path;
			/// don't use referenceObject because, being overloaded, it will cause a deserialization error
			///
			//oA.referenceObject = vA.object;
			if(!vA.object.urn) vA.object.urn = Hemi.guid();
			oA.referenceUrn = vA.object.urn;

			t.object.dependencies.push(oA);
		}
		
		var d1 = new Date(), d2 = new Date();
		var oE = this.getElementByRID(t.guid + "end");
	   	d2 = new Date(oE.value + (oE.type == "date" ? " 00:00:00":""));
	   	d1 = new Date(d2.getTime() - (t.object.estimate && t.object.estimate.time ? this.getTimeMS(t.object.estimate.time,1) : 0));
	   	t.object.startDate = d1;
	   	t.object.dueDate = d2;
	   	
	   	if(_s.autoSchedule){
	        var iTMS = (t.object.estimate && t.object.estimate.time ? this.getTimeMS(t.object.estimate.time,1) : 0);
		  	if(s.minTaskTime == 0 || (t.object.dueDate.getTime() - iTMS) < s.minTaskTime) s.minTaskTime = (t.object.dueDate.getTime() - iTMS);
		  	if(s.maxTaskTime == 0 || t.object.dueDate.getTime() > s.maxTaskTime) s.maxTaskTime = t.object.dueDate.getTime(); 
		}
	   	
	},
	prepareSaveStage : function(p, s){
		 var _o = this.getObjects();
		s.object.name = Hemi.text.trim(this.getElementByRID(s.guid + "name").value);
		if(!s.object.groupPath) s.object.groupPath = AM6Client.make("GROUP", "DATA",irocket.getBasePath("Stage")).path;
		if(s.object.name.length == 0) s.object.name = p.name + " Stage " + (p.stages.length + 1);
		s.logicalOrder = s.index;
		if(!s.object.budget){
			s.object.budget = new org.cote.objects.budgetType();
			s.object.budget.budgetType = "UNKNOWN";
			s.object.budget.nameType = "BUDGET";
		}
		if(!s.object.budget.groupPath) s.object.budget.groupPath = AM6Client.make("GROUP", "DATA",irocket.getBasePath("Budget")).path;
		s.object.budget.name = Hemi.text.trim(this.getElementByRID(s.guid + "budget").value);
		if(s.object.budget.name.length == 0) s.object.budget.name = s.object.name + " Budget";
		if(!s.object.work){
			s.object.work = new org.cote.objects.workType();
			s.object.work.nameType = "WORK";
		}
		if(!s.object.work.groupPath) s.object.work.groupPath = AM6Client.make("GROUP", "DATA",irocket.getBasePath("Work")).path;
		s.object.work.tasks = [];
		s.object.work.logicalOrder = s.index;
		s.object.work.name = s.object.name;
		if(!s.object.schedule){
			s.object.schedule = new org.cote.objects.scheduleType();
			s.object.schedule.nameType = "SCHEDULE";
		}
		if(!s.object.schedule.groupPath){
			s.object.schedule.groupPath = AM6Client.make("GROUP", "DATA",irocket.getBasePath("Schedule")).path;
		}
		s.object.schedule.name = s.object.name;
		
		
		
		var aS = Hemi.text.trim(this.getElementByRID(s.guid + "schedule").value).split(" to ");
		var d1 = new Date(), d2 = new Date();
		if(aS.length == 2){
			d1 = new Date(aS[0]);
			d2 = new Date(aS[1]);
		}
		s.object.schedule.startTime = d1;
		s.object.schedule.endTime = d2;
		
		/// process dependencies
		for(var i = 0; i < s.dependencies.length; i++){
			var oA = new org.cote.objects.artifactType();
			oA.nameType = "ARTIFACT";
			var vA = (_o.stages[s.dependencies[i]] ? _o.stages[s.dependencies[i]] : _o.tasks[s.dependencies[i]]);
			/// don't set any values here - let the backend saveCommunityProject process set the defaults 
			o.name = "";
			o.description = "";
			o.artifactType = "UNKNOWN";
			o.createdDate = new Date();
			o.previousTransitionId = 0;
			o.nextTransitionId = 0;
			/// don't use referenceObject because, being overloaded, it will cause a deserialization error
			///

			if(!vA.object.urn) vA.object.urn = Hemi.guid();
			o.referenceUrn = vA.object.urn;

			s.object.work.artifacts.push(o);
		}		
		
		p.stages.push(s.object);
		
	},
	handleDragStart : function(s, v){
		//Hemi.log("Drag start");
	},
	handleDragEnd : function(s, v){
		var _o = this.getObjects();
		//Hemi.log("Drag end");
		if(_o.rowMarker) _o.rowMarker.style.borderTop = "";
		
	},
	handleDrag : function(s, v){
		var _o = this.getObjects(),oTR;
		if(v.target){

			if(_o.rowMarker) _o.rowMarker.style.borderTop = "";
			var oTR = v.target.getContainer().parentNode;
			//Hemi.log("Drag over: " + oTR.nodeName);
			var sid = oTR.getAttribute("rid");
			if(!_o.tasks[sid]) return;
			oTR.style.borderTop = "1px solid #CFCFCF";
			_o.rowMarker = oTR;
		}
	},
	handleDrop : function(s, v){
		var _o = this.getObjects(),oTR1,oTR2,sId1, sId2;
		if(v.src && v.target){
			oTR1 = v.src.getContainer().parentNode;
			oTR2 = v.target.getContainer().parentNode;
			sId1 = oTR1.getAttribute("rid");
			sId2 = oTR2.getAttribute("rid");
			if(!_o.tasks[sId1] || !_o.tasks[sId2]){
				Hemi.logWarning("The source or target were not valid tasks");
				return;
			}
			
			this.moveRow(sId1, sId2, oTR1, oTR2);
			
		}
	
	},
	isDeepChild : function(oT, sId){
		var b = 0;
		for(var i = 0; i < oT.childTasks.length; i++){
			if(oT.childTasks[i] == sId || this.isDeepChild(this.getObjects().tasks[oT.childTasks[i]],sId)){
				b = 1;
				break;
			}
		}
		return b;
	},
	/// Move sId1 ABOVE sId2
	/// sId1, and all its children, should then be 'dented' and reparented against the previous sibling
	/// Last, the entire table needs to be reindexed/redepended
	///
	moveRow : function(sId1, sId2, oR1, oR2, bNoReParent){
		var _o = this.getObjects(), oT1, oT2;
		oT1 = _o.tasks[sId1];
		oT2 = _o.tasks[sId2];
		if(!oT1 || !oT2){
			Hemi.logError("Invalid tasks for " + sId1 + " and " + sId2);
			return;
		}
		if(!oR1) oR1 = this.getElementByRID(sId1);
		if(!oR2) oR2 = this.getElementByRID(sId2);
		if(!oR1 || !oR2){
			Hemi.logError("Invalid rows for " + sId1 + " and " + sId2);
			return;
		}
		else if(sId1 == sId2){
			Hemi.logError("Invalid self reference");
			return;
		}
		else if(this.isDeepChild(oT1,sId2)){
			Hemi.log("Invalid parent reference");
			return;
		}
		/// Detect previous sibling relative to R2.  If it's R1, then break here - nothing to do.
		///
		var ind = oR2.index, oPrevSib, iNewDepth = 0, sStageGuid;
		
		/*
		if(ind > 0) oPrevSib = _o.tasks[_o.rowOrder(ind-1)];
		for(var i = ind -1; i >= 0; i--){
			var nId = _o.rowOrder(i);
			if(nId == sId1){
				Hemi.log("Don't move task in place.");
				break;
			}
			/// Don't look past the current stage (ie, beyond the task rows), because the relative row should already be in the desired stage
			///
			if(!_o.tasks[nId]) break;
			oPrevSib = 
		}
		*/
		/// First, move R1 above R2
		///
		Hemi.log("Moving row");
		oR2.parentNode.insertBefore(oR1,oR2);

		/// If oR1.parentGuid != oR2.parentGuid, then decouple T1 from its current parent
		///
		/*
		if(bReParent){
			Hemi.log("Reparenting to " + (oPrevSib ? oPrevSib.guid : " nothing"));
			this.spliceTaskFromParent(oT1);
			if(oPrevSib){
				sStageGuid = oPrevSib.stageGuid;
				iNewDepth = oPrevSib.depth + 1;
				oPrevSib.childTasks.push(oT1.guid);
				oT1.parentGuid = oPrevSib.guid;
			}
		}
		else{
			Hemi.log("Not reparenting");
		}
		*/
		var oParent = (oT2.parentGuid ? _o.tasks[oT2.parentGuid] : 0);

		if(!bNoReParent){
			this.spliceTaskFromParent(oT1);
			if(oT2.parentGuid){
				Hemi.log("Reparenting to " + (oT2.parentGuid ? oT2.parentGuid : " nothing"));
				
				//if(oT2.parentGuid){
					/// Splice the new child in above the current ref child
					var iM = -1;
					var oPar = _o.tasks[oT2.parentGuid];
					for(var i = 0; i < oPar.childTasks.length;i++){
						if(oPar.childTasks[i] == oT2.guid){
							iM = i;
							break;
						}
					}
					if(iM >= 0){
						Hemi.log("Splicing child in at index " + iM);
						oT1.parentGuid = oT2.parentGuid;
						oPar.childTasks.splice(iM,0,sId1);
					}
					else{
						Hemi.logWarning("Failed to find correct child index.  Appending task to end of task list");
						oPar.childTasks.push(sId1);
					}
				//}
			}
		}
		iNewDepth = oT2.depth;
		/// Move child tasks up, relative to oT1
		///
		for(var i = 0; i < oT1.childTasks.length; i++){
			var sIdC = oT1.childTasks[i];
			var oTRC = this.getElementByRID(sIdC);
			this.moveRow(sIdC, sId2, oTRC,oR2,1);
		}
		if(!bNoReParent){
			if(iNewDepth != oT1.depth){
				Hemi.log("Redepthing");
				this.redepthTask(oT1,iNewDepth,1);
			}
		
		
			this.reindex();
		}

	},
	refreshCommunity : function(oI){
		this.refreshDisplay();
	},
	refreshSession : function(s,v){
		this.refreshDisplay();
	},
	refreshDisplay : function(){
		var _o = this.getObjects(),_s = this.getProperties(),b = uwm.rule("IsLoggedIn"), oP;
		var aB = this.getElementByRID("projectTable").querySelectorAll("tbody");
		/// skip the first tbody
		for(var i = aB.length - 1; i >= 1;i--) Hemi.xml.removeChild(aB[i],aB[i].parentNode,1);
		
		_o.stages = [];
		_o.rowOrder = [];
		_o.stageTrash = {};
		_o.tasks = [];
		_o.taskTrash = {};
		_s.rowCount = 0;
		
		this.getElementByRID("projectControls").style.display = (b ? "block" : "none");
		this.getElementByRID("projectTable").style.display = (b ? "block" : "none");
		
		if(!b) return;
		
		if(this.getBean &&  this.getBean("rocketType")){
			oP =  this.getBean("rocketType");
			if(oP.objectId) oP = AM6Client.communityProjectFull(oP.objectId);
		}
		else if(irocket.getCommunityMode() && irocket.getCommunityProject()){
			oP = AM6Client.communityProjectFull(irocket.getCommunityProject().objectId);
		}
		else if(!irocket.getCommunityMode() && irocket.getCurrentProject()){
			oP = (irocket.getCurrentProject().objectId ? AM6Client.communityProjectFull(irocket.getCurrentProject().objectId) : irocket.getCurrentProject());

		}
		else{
			oP = new org.cote.objects.projectType();
			oP.nameType = "PROJECT";
			oP.name = "";
			oP.description = "";
			oP.id = 0;
			oP.stages = [];
		}
		_o.project = oP;
		if(!oP.stages.length) this.addStage();
		for(var i = 0; i < oP.stages.length;i++){
			this.addStage(oP.stages[i]);
		}
		this.rebuildDependencies();
		this.refreshProjectDisplay();
		


	},
	getStageTemplate : function(){
		return Hemi.xml.getText("/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/ProjectStageSection.xml" + (this.getProperties().debugRefresh ? "?" + this.getObjectId() : ""),0,0,"ProjectStageSection",1);
	},
	getRowTemplate : function(){
		return Hemi.xml.getText("/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/ProjectRowSection.xml" + (this.getProperties().debugRefresh ? "?" + this.getObjectId() : ""),0,0,"ProjectRowSection",1);
	},

	dentTask : function(s, b){
		/// TODO: Refactor this into an id tree
		///
		var _o = this.getObjects(),o,np,md,po;
		o = _o.tasks[s];
		if(!o){
			Hemi.logError("Task not found for guid " + s);
			return;
		}
		if(b && !o.depth){
			Hemi.log("Task " + s + " is already outdented");
			return;
		}
		if(o.parentGuid && !_o.tasks[o.parentGuid]){
			Hemi.logError("Parent does not exist");
			return;
		}
		md = o.depth - (b ? 2 : 0);
		if(md < 0) md = 0;
		var ld = md;
		/// Find nearest new parent
		///    - if new depth is 0, then the new parent is nothing
		///
		for(var i = o.index -1; (!b || o.depth > 1) && i >= 0; i--){
			var tp = _o.tasks[_o.rowOrder[i]];
			/// this is ok because the rowOrder may contain stages or tasks
			if(!tp) continue;
			/// prevent walking up into a sibling ancestor stack
			///
			ld = (tp.depth < ld ? tp.depth : ld);
			Hemi.log("Checking for parent at level " + ld + " vs " + md + " against possible parent depth " +  tp.depth);
			///  && (!b || md > 0)
			if(tp.depth <= md){
				Hemi.log("Found new parent: " + tp.index); 
				np = tp;
				break;
			}
		}
		//Hemi.log(md + " / " + np);
		/// if new depth is greater than zero but there is no new parent, exit
		/// this will happen if indenting the first child 
		if((!b && md >= 0 && !np) || (np && np.guid == o.parentGuid)){
			Hemi.log("Did not find a new parent because " + (np ? np.guid + " == " + o.parentGuid : " level issue"));
			return;
		}
		if(b && o.depth > 1 && !np){
			Hemi.logError("Bug: Cannot outdent to a positive depth without a parent");
			alert("Outdent Error");
			return;
		}
		
		if(o.parentGuid){
			//Hemi.log("Breaking the link to the current parent");
			this.spliceTaskFromParent(o);
		}
		if(np){
			Hemi.log("Creating the link to the new parent at index " + np.index);
			o.parentGuid = np.guid;
			np.childTasks.push(o.guid);
		}
		
		Hemi.log("Adjusting task depths");
		this.redepthTask(o,b);
		Hemi.log((b ? "Out" : "In") + "dent task.  New Depth: " + o.depth);
	},
	spliceTaskFromParent : function(o){
		var _o = this.getObjects();
		if(!o.parentGuid) return;
		var po = _o.tasks[o.parentGuid];
		if(!po) return;
		for(var i = 0; i < po.childTasks.length; i++){
			if(po.childTasks[i] == o.guid){
				po.childTasks.splice(i,1);
				delete o.parentGuid;
				break;
			}
		}

	},
	redepthTask : function(o,b, x){
		
		if(x) o.depth = b;
		else o.depth += (b ? -1 : 1);
		Hemi.log("Redepthing " + o.index + " to " + o.depth);
		if(o.depth < 0){
			alert("Invalid depth for task: " + o.guid);
			return;
		}
		Hemi.log("Adjusting " + o.childTasks.length + " task depths");
		for(var i = 0; i < o.childTasks.length; i++){
			Hemi.log("Redepthing task " + o.childTasks[i]);
			this.redepthTask(this.getObjects().tasks[o.childTasks[i]],(x ? b + 1 : b),x);
		}
		this.refreshTaskDisplay(o.guid,1);
	},
	checkResource : function(e, s){
		var b = (e.shiftKey ? 1 : 0),_o = this.getObjects(),bC=0;
		Hemi.log(e.keyCode + " : " + e.shiftKey);
		if(b && e.keyCode == 38){
			var oW = Hemi.app.getWindowManager().GetWindowByName("ResourcePicker");
			if(oW) oW.Close();
			var o = _o.tasks[s];
			if(!o) return false;
			var po = 0;
			for(var i = o.index - 1; i >= 0; i--){
				if((po = _o.tasks[_o.rowOrder[i]])){
					break;
				}
			}
			if(po){
				o.object.resources = po.object.resources;
				this.refreshTaskDisplay(o.guid);
				
			}
		}
		else if(e.keyCode == 13){
			var oW = Hemi.app.getWindowManager().GetWindowByName("ResourcePicker");
			if(oW) oW.Close();
			Hemi.event.cancelEvent(e);
			this.nextRow(s,1);
			return false;
		}
	},
	checkTask : function(e, s){
		//Hemi.log(e.keyCode + " : " + e.shiftKey);
		var b = (e.shiftKey ? 1 : 0);
		if(e.keyCode == 9){
			Hemi.event.cancelEvent(e);
			this.dentTask(s, b);
			return false;
		}
		else if(e.keyCode == 13){
			Hemi.event.cancelEvent(e);
			this.nextRow(s);
			return false;
		}
	},
	nextRow : function(s,d){
		var _o = this.getObjects(),o,oS;
		o = _o.tasks[s];
		if(!o){
			Hemi.log("Invalid task id: " + s);
			return;
		}
		oS = _o.stages[o.stageGuid];
		if(!oS){
			Hemi.log("Invalid stage id: " + o.stageGuid);
			return;
		}
		var aTr = this.getElementByRID(oS.guid).parentNode.querySelectorAll("tr");
		var sLid = aTr[aTr.length-1].getAttribute("rid");
		Hemi.log("Checking next row: " + s + " :: " + sLid);
		if(s == sLid){
			this.addTask(oS.guid);
			this.getElementByRID(this.getElementByRID(oS.guid).parentNode.lastChild.getAttribute("rid") + (d ? "resources" : "name")).focus();
			this.reindex();
		}
		else{
			var b = 0;
			for(var i = 0; i < aTr.length;i++){
				var sRid = aTr[i].getAttribute("rid");
				if(b){
					this.getElementByRID(sRid + (d ? "resources" : "name")).focus();
					break;
				}
				if(sRid == s) b = 1;
			}
		}
	},
	
	/// Rebuild the guid-based dependency hash, which disconnects the object model from ids and uses in-page transitive ids
	/// 
	rebuildDependencies : function(){
		var _o = this.getObjects();
		/// look through all of the rows for any tasks or stage work where dependencies are specified
		///
		for(var i = 0; i < _o.rowOrder.length;i++){
			var ct = _o.tasks[_o.rowOrder[i]];
			
			if(ct && (!ct.object.dependencies || !ct.object.dependencies.length)){
				//Hemi.log("Skip task " + ct.object.name + " with no dependencies");
				continue;
			}
			if(!ct) ct = _o.stages[_o.rowOrder[i]];
			if(!ct || (ct.object.nameType == 'STAGE' && ct.object.work && (!ct.object.work.dependencies || !ct.object.work.dependencies.length))){
				//Hemi.log("Skip stage " + ct.object.name + " with no dependencies");
				continue;
			}
			ct.dependencies = [];
			this.rebuildDependency(ct);
		}
	},
	rebuildDependency : function(o){
		var _o = this.getObjects();
		var aR = [];
		var aD = (o.object.nameType == 'STAGE' ? o.object.work : o.object).dependencies;
		/// Clear the 'local' dependency list
		///
		o.dependencies = [];
		/// Loop through dependencies
		///
		//Hemi.log("Dependencies: " + aD.length);
		for(var i = 0; i < aD.length; i++){

			var oD = aD[i];
			for(var r = 0; r < _o.rowOrder.length;r++){
				var ct = _o.tasks[_o.rowOrder[r]];
				if(!ct) ct = _o.stages[_o.rowOrder[r]];
				if(!ct) continue;
				if(ct.object.nameType == oD.artifactType && ct.object.id == oD.artifactDataId){
					aR.push("" + (r + 1));
					o.dependencies.push(ct.guid);
					break;
				}
			}
		}
		this.getElementByRID(o.guid + "dependencies").value = aR.join(",");
		
	},
	
	/// Note: Stages don't support dependencies
	///
	updateDependencies : function(s){
		var _o = this.getObjects(),o,
		o = _o.tasks[s];
		if(!o) o = _o.stages[s];
		if(!o){
			Hemi.logError("Task or stage not found for guid " + s);
			return;
		}
		var aTL = [];
		/// Create a hash of the values
		var aV = Hemi.text.trim(this.getElementByRID(s + "dependencies").value).split(",");
		var vH = [];
		for(var i = 0; i < aV.length;i++){
			var z = parseInt(aV[i]);
			if(isNaN(z)) continue;
			vH[z-1] = 1;
		}
		/// Look through all the tasks to find the dependencies by index
		///
		for(var i = 0; i < _o.rowOrder.length;i++){
			var ct = _o.tasks[_o.rowOrder[i]];
			if(!ct) ct = _o.stages[_o.rowOrder[i]];
			if(ct.index == o.index){
				Hemi.logDebug("Skipping self task");
			}
			if(vH[ct.index]){
				aTL.push(ct.guid);
				vH[ct.index] = 0;
			}
		}
		
		Hemi.log("Attached " + aTL.length + " task and stage dependencies"); 
		o.dependencies = aTL;
	},
	addStage : function(oS){
		var p = this.getProperties(),_o = this.getObjects(),d1 = new Date().getTime(), d2;
		var sId = Hemi.guid();
		//var sId = this.getStageIdPrefix(p.stageCount+1);
		
		_o.stages[sId] = {
			guid:sId,
			index:_o.rowOrder.length,
			object:(oS ? oS : null),
			childTasks : [],
			dependencies : [],
			minTaskTime : 0,
			maxTaskTime : 0
		};
		_o.rowOrder[p.rowCount] = sId;

		p.rowCount++;

		/// Prime the stage list
		var oP = this.getStage(sId);
		
		
		var sT = this.getStageTemplate().replace(/\${id}/gi,sId);
		//sT = sT.replace(/\${estimateOptions}/gi,this.getEstimateTimeList());
		//sT = sT.replace(/\${rowNum}/gi,p.stageCount);
 		var sB =  sT;
 		//alert(sT);
 		
		var oX = Hemi.xml.parseXmlDocument(sB);
	   	if(!oX || !oX.documentElement){
	   		alert("Invalid XML from:\n\n" + sB);
	   		return;
	   	}
		for(var i = 0; i < oX.documentElement.childNodes.length;i++){
 			Hemi.xml.setInnerXHTML(this.getElementByRID("projectTable"), oX.documentElement.childNodes[i],1, 0, 0, 0, 0, this._handle_xhtml_token);
 		}
		var aC = this.getElementByRID("projectTable").childNodes;

		// Note -extendSpaceConfiguration operates against a container, without registering the container itself
		// therefore, the container (tr) is not registered when configured like this
	   	// 

	   	this.extendSpaceConfiguration(aC[aC.length-1]);
	   	
	   	this.getElementByRID(sId + "rowNum").value = p.rowCount;
	   	/*
   		for(var i = 0; i < 10; i++){
   			_o.stages[sId].childTasks.push(this.addTask(sId));
   		} 
	   	*/
	   	
	   	if(oS && oS.work){
	   		var oW = (!oS.work.id || oS.work.populated ? oS.work : AM6Client.get("WORK",oS.work.objectId));
			var iL = oW.tasks.length;
	   		for(var i = 0; i < iL || i < 1; i++){
	   			this.addTask(sId,(i < iL ? oW.tasks[i] : 0));
	   		} 
	   	}
	   	else for(var i = 0; i < 1; i++) this.addTask(sId);

	   	d2 = new Date().getTime();
	   	this.refreshStageDisplay(sId);
	   	Hemi.log("Time to render stage: " + (d2 - d1));
	},
	refreshProjectDisplay : function(){
		var _o = this.getObjects(), o;
		o = _o.project;
		this.getElementByRID("projectName").value = o.name; 
	},
	refreshStageDisplay : function(sId){
		var _o = this.getObjects(), o;
		if((o = _o.stages[sId].object) == null) return;
		this.getElementByRID(sId + "name").value = o.name;
		if(o.schedule){
	   		this.getElementByRID(sId + "schedule").value = 
	   			Hemi.text.pad((o.schedule.startTime.getMonth() + 1),2) + "/" + Hemi.text.pad(o.schedule.startTime.getDate(),2) + "/" + o.schedule.startTime.getFullYear()
	   			+ " to "
	   			+ Hemi.text.pad((o.schedule.endTime.getMonth() + 1),2) + "/" + Hemi.text.pad(o.schedule.endTime.getDate(),2) + "/" + o.schedule.endTime.getFullYear();
	   		;
	   	}
	   	if(o.budget){
	   		this.getElementByRID(sId + "budget").value = (o.budget.time ? o.budget.time.name : o.budget.name);
	   	}
		
	},
	addTask : function(sStageId, oT, sParentId,iD){
		var p = this.getProperties(), _o = this.getObjects();
		if(typeof iD != "number" || iD < 0) iD = 0;
		var sId = Hemi.guid();
		
		/// Prime the task list
		///
		_o.tasks[sId] = {
			stageGuid:sStageId,
			guid:sId,
			parentGuid:sParentId,
			index : _o.rowOrder.length,
			depth:iD,
			childTasks:[],
			dependencies : [],
			object : (oT ? oT : null)
		};
		oT = this.getTaskAtRow(sId,oT);
		_o.rowOrder[_o.rowOrder.length] = sId;
		p.rowCount++;
		_o.stages[sStageId].childTasks.push(sId);
		var sT = this.getRowTemplate().replace(/\${id}/gi,sId);
		sT = sT.replace(/\${rowNum}/gi,p.rowCount);
		//sT = sT.replace(/\${stageNum}/gi,p.stageCount);
		
		//sT = sT.replace(/\${estimateOptions}/gi,this.getEstimateTimeList());
 		var sB = sT ;
		var oX = Hemi.xml.parseXmlDocument(sB);
	   	if(!oX || !oX.documentElement){
	   		alert("Invalid XML from:\n\n" + sB);
	   		return;
	   	}

	   	var oBody = this.getElementByRID(sStageId).parentNode;
	   	if(!oBody || oBody == null){
	   		alert("Null model reference");
	   		return;
	   	}
		for(var i = 0; i < oX.documentElement.childNodes.length;i++){
			Hemi.xml.setInnerXHTML(oBody, oX.documentElement.childNodes[i],1, 0, 0, 0, 0, this._handle_xhtml_token);
		}
		var aC = oBody.childNodes;
		
	   	this.extendSpaceConfiguration(aC[aC.length-1]);
	   	this.getElementByRID(sId + "rowNum").value = p.rowCount;
	   	var obj = this;
	   	this.getElementByRID(sId + "name").onkeydown = function(e){
	   		obj.checkTask(e, sId); 
	   	};
	   	this.getElementByRID(sId + "resources").onkeydown = function(e){
	   		obj.checkResource(e, sId); 
	   	};
	   	/*
	   	this.getElementByRID(sId + "estimate").onkeydown =  function(e){
			Hemi.event.cancelEvent(e);
			return false;
		};
		*/
		if(oT.id > 0){
			oT = (!oT.objectId || oT.populated ? oT : AM6Client.get("TASK", oT.objectId));
			for(var i = 0; oT.childTasks && i < oT.childTasks.length;i++){
				_o.tasks[sId].childTasks.push(this.addTask(sStageId,oT.childTasks[i],sId,iD + 1));
			}
		}
		this.refreshTaskDisplay(sId);
		//if(sParentId) _o.tasks[sParentId].childTasks[_o.tasks[sParentId].childTasks.length] = sId;
	   	return sId;
 	},
	deleteRow : function(sId,bNoIndex,bNoStageUpdate){
		var o,oT,_o = this.getObjects(),p = this.getProperties(),udef;
		
		oT = _o.tasks[sId];
		o = oT.object;
		if(o.id > 0){
			this.getObjects().taskTrash[o.id] = o;
		}
		
		///this.getObjects().rowOrder.splice(oT.index,1);
		
		/// Don't splice rowOrder on delete because it could be in bulk and the indexes aren't updated yet
		///
		_o.rowOrder[oT.index] = 0;
		

		/// If not deleting due to a deleted stage (part 1), then disconnect from parent and outdent child tasks
		///
		if(!bNoStageUpdate){
			/// Outdent Child Tasks
			Hemi.log("Adjust task hierarchy for " + oT.childTasks.length + " child tasks");
			for(var i = 0; i < oT.childTasks.length;i++){
				this.dentTask(oT.childTasks[i],1);
			}
		
			/// Disconnect from parent
			///
			if(oT.parentGuid) this.spliceTaskFromParent(oT);
		}
		
	
		this.getObjects().tasks[sId] = udef;
		var oXForm = this.getForm();
	   	for(var i = 0; i < p.elementNames.length; i++){
			oXForm.removeElement(oXForm.getElementByName(sId + p.elementNames[i]));
		}
		Hemi.log("Delete Row: " + sId);
		var oRow = this.getElementByRID(sId);
		if(oRow){
			/// Remove and unlink node and all framework objects;
			Hemi.xml.removeChildren(oRow, 1);
			Hemi.xml.removeChild(oRow,oRow.parentNode,1);
		}
		else{
			Hemi.logError("Row " + sId + " not found");
		}
		if(!bNoStageUpdate){
			Hemi.log("Detaching task from the stage");
			var s = _o.stages[oT.stageGuid];
			if(!s || s == null){
				Hemi.logError("Failed to find stage for id " + o.stageGuid);
			}
			else{
				for(var c = 0; c < s.childTasks.length;c++){
					if(s.childTasks[c] == sId){
						s.childTasks.splice(c,1);
						break;
					}
				}
			}
		}		
		
		if(!bNoIndex) this.reindex();
		else Hemi.log("Need to reindex rows, update dependencies");
	},
	deleteStage : function(sId){
		var o,_o = this.getObjects(),p = this.getProperties(),udef,oS;
		oS = _o.stages[sId];
		o = oS.object;
		if(o.id > 0){
			this.getObjects().stageTrash[o.id] = o;
		}
		/// Don't splice on delete because it could be in bulk and the indexes aren't updated yet
		///
		_o.rowOrder[oS.index] = 0;
		_o.stages[sId] = udef;
		
		var oXForm = this.getForm();
			   	for(var i = 0; i < p.elementNames.length; i++){
			oXForm.removeElement(oXForm.getElementByName(sId + p.elementNames[i]));
		}
		Hemi.log("Delete Tasks: " + oS.childTasks.length);
		for(var c = 0; c < oS.childTasks.length;c++){
			/// delete row, don't reindex or try to change the stage (this)
			///
			this.deleteRow(oS.childTasks[c],1,1);
		}
		Hemi.log("Delete Row: " + sId);
		var oRow = this.getElementByRID(sId).parentNode;
		if(oRow){
			/// Remove and unlink node and all framework objects;
			Hemi.xml.removeChildren(oRow, 1);
			Hemi.xml.removeChild(oRow,oRow.parentNode,1);
		}
		else{
			Hemi.logError("Row " + sId + " not found");
		}
		this.reindex();

	},
	reindex : function(){
		var _o = this.getObjects(),_p = this.getProperties(),o,oN = [],iC=0;
		var aTR = this.getElementByRID("projectTable").querySelectorAll("tr");
		for(var i = 0; i < aTR.length; i++){
			var cid = aTR[i].getAttribute("rid");
			if(!cid){
				Hemi.logWarning("Expected rid at row " + i);
			}
			o = _o.tasks[cid];
			if(!o) o = _o.stages[cid];
			if(!o){
				Hemi.logDebug("Splice for " + cid);
				continue;
			}
			o.index = iC;
			this.getElementByRID(o.guid + "rowNum").value = (iC + 1);
			oN[iC++]=o.guid;
		}
		_o.rowOrder = oN;
		_p.rowCount = _o.rowOrder.length;
		this.redepends();
	},
	
	/// Sets the dependency fields with the row number convenience
	/// Requires that the dependency model is already imported into the UI row structure
	/// AND that the UI row model is already indexed
	///
	redepends : function(){
		var _o = this.getObjects(),_p = this.getProperties(),o,co;
		for(var i = 0; i < _o.rowOrder.length; i++){
			o = _o.tasks[_o.rowOrder[i]];
			if(!o) o = _o.stages[_o.rowOrder[i]];
			if(!o){
				Hemi.logError("Invalid row index at " + i);
				continue;
			}
			var aD = [];
			for(var c = 0; c < o.dependencies.length; c++){
				co = _o.tasks[o.dependencies[c]];
				if(!co) co = _o.stages[o.dependencies[c]];
				if(!co){
					Hemi.logWarning("Invalid dependency: '" + o.dependencies[c] + "'");
					continue;
				}
				aD.push(co.index + 1);
			}
			this.getElementByRID(o.guid + "dependencies").value = aD.join(",");
		}	
	},
 	rebindTask : function(sId){
		var _o = this.getObjects(), o;
		if((o = _o.tasks[sId].object) == null) return;
		o.name = this.getElementByRID(sId + "name").value;
		o.taskStatus = this.getElementByRID(sId + "status").value;
		if(o.taskStatus.length == 0) o.taskStatus = "UNKNOWN";  	
 	},
	refreshTaskDisplay : function(sId, bRebind){
		if(bRebind) this.rebindTask(sId);
		var _o = this.getObjects(), o;
		if((o = _o.tasks[sId].object) == null){
			Hemi.logError("Invalid object reference for guid '" + sId + "'");
			return;
		}
		
	   	//this.getElementByRID(sId + "status").value = (o.taskStatus.match(/^UNKNOWN$/) ? "" : o.taskStatus);
	   	var sStat = "uwm-inline-button ";
	   	if(o.taskStatus == "UNKNOWN" && o.estimate) o.taskStatus = "ESTIMATED";
		switch(o.taskStatus){
			case "UNKNOWN":
				sStat += "uwm-inline-button-broken";
				break;
			case "ESTIMATED":
				sStat += "uwm-inline-button-clock";
				break;
			case "IN_PROGRESS":
				sStat += "uwm-inline-button-restart";
				break;
			case "COMPLETED":
				sStat += "uwm-inline-button-bookmark-silver";
				break;
			case "BLOCKED":
				sStat += "uwm-inline-button-logout";
				break;
			case "APPROVED":
				sStat += "uwm-inline-button-bookmark";
				break;
			case "WASTE":
				sStat += "uwm-inline-button-trash-empty";
				break;
			case "UNPLANNED":
				sStat += "uwm-inline-button-info";
				break;
			case "REJECTED":
				sStat += "uwm-inline-button-trash-empty";
				break;
			default:
				Hemi.log("Invalid status: " + o.taskStatus);
				break;
		}	   	
		//Hemi.log("Set class name to : " + sStat);
	   	this.getElementByRID(sId + "status").className = sStat;
	   	this.getElementByRID(sId + "name").value = o.name;
	   	var oE = this.getElementByRID(sId + "end");
	   	if(oE.type.match(/^date/gi)) oE.value = o.dueDate.getFullYear() + "-" + Hemi.text.pad((o.dueDate.getMonth() + 1),2) + "-" + Hemi.text.pad(o.dueDate.getDate(),2);
	   	else oE.value = (o.dueDate.getMonth() + 1) + "/" + Hemi.text.pad(o.dueDate.getDate(),2) + "/" + o.dueDate.getFullYear();
	   	this.getElementByRID(sId + "name").style.paddingLeft = (_o.tasks[sId].depth * 20) + "px";
	   	//Hemi.log("Padding to " + (_o.tasks[sId].depth * 10) + "px;");
	   	this.getComponentByRID(sId + "end").synchronizeValue();
	   	//this.getElementByRID(sId + "estimate").value = (o.estimate ? o.estimate.name : "");
	   	this.setElementValue(sId + "estimate",(o.estimate ? o.estimate.name : ""),0);
	   	var aR = [];
	   	for(var i = 0; o.resources && i < o.resources.length; i++){
	   		aR.push(o.resources[i].name);
	   	}
	   	this.getElementByRID(sId + "resources").value = aR.join(",");
	},
	getTaskAtRow : function(i, oT){
		var o = this.getObjects(), ot;
		if(!i) return;
		//if(!o.tasks[s]) o.tasks[s] = {};
		if((ot = o.tasks[i].object) == null){
			ot = new org.cote.objects.taskType();
			ot.name = "";
			ot.description = "";
			ot.taskStatus = "UNKNOWN";
			ot.nameType = "TASK";
			ot.id = 0;
			ot.logicalOrder = o.tasks[i].index;
			ot.startDate = (new Date());
			ot.dueDate = (new Date());
			ot.completedDate = (new Date());
			ot.dependencies = [];
			o.tasks[i].object = ot;

		}
		return ot;
	},
	getStage : function(sId){
		var o = this.getObjects(), ot;
		if(!sId) return;
		if((ot = o.stages[sId].object) == null){
			ot = new org.cote.objects.stageType();
			ot.nameType = "STAGE";
			ot.name = "";
			ot.description = "";
			ot.id = 0;
			ot.logicalOrder = o.stages[sId].index;
			
			ot.work = new org.cote.objects.workType();
			ot.work.nameType = "WORK";
			ot.work.name = "";
			ot.work.description = "";
			ot.work.id = 0;
			ot.work.logicalOrder = i;
			ot.work.dependencies = [];
			
			ot.schedule = new org.cote.objects.scheduleType();
			ot.schedule.nameType = "SCHEDULE";
			ot.schedule.name = "";
			ot.schedule.id = 0;
			ot.schedule.startTime = new Date();
			ot.schedule.endTime = ot.schedule.startTime;
			
			o.stages[sId].object = ot;
			
		}
		return ot;
	},
	
	openObject : function(sId){
		var o = this.getObjects(),sType, oT,obj;
		if(!sId){
			sType = "Project";
			oT = o.project;
			sId = "__project";
		}
		else if(o.stages[sId] && o.stages[sId].object){
			sType = "Stage";
			oT = o.stages[sId].object;
		}
		else if(o.tasks[sId]){
			sType = "Task";
			oT = o.tasks[sId].object;
		}
		else{
			return;
		}
		obj = (oT.id > 0 ? window[uwm.getApi(sType)]["get" + sType + "ById"](oT.id) : oT);
		if(obj == null){
			Hemi.logError("Failed to retrieve object with id " + oT.id);
			return;
		}
		var oProps = {customSave:1,openerId:this.getObjectId(),picker:0,viewType:obj,referenceId:sId,provideSave:"saveType"};
		Hemi.app.createWindow(obj.name, uwm.getApiTypeView(sType) + "/Forms/" + sType+ ".xml", "View-" + sId, 0, 0, oProps)
		.then((oW)=>{
		    if (oW) {
		    	oW.resizeTo(475, 400);
		    	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
		    	oW.setHideOnClose(0);
		    	oW.setCanMinimize(0);
		    	oW.setCanMaximize(0);
		    	oW.setCanResize(0);
	
		    }
	    });
	},
	
	saveType : function(w,o){
		var _o = this.getObjects(), _p = this.getProperties(),sId;

		if(!(sId = w.getProperties().referenceId)){
			alert("Expected form to include a reference id to the displayed record");
			return;
		}
		if(sId == "__project"){
			this.saveProject(o);
		}
		else if(_o.stages[sId]){
			this.saveStage(_o.stages[sId],o);
		}
		else if(_o.tasks[sId]){
			this.saveTask(_o.tasks[sId],o);
		}
		else{
			alert("Referenced display was not found.  Aborting save.");
			return;
		}
	},
	saveProject : function(o){
		this.getObjects().project = o;
		this.refreshProjectDisplay();
	},
	saveStage : function(s, o){
		s.object = o;
		this.refreshStageDisplay(s.guid);
	},
	saveTask : function(s, o){
		s.object = o;
		this.refreshTaskDisplay(s.guid);
	},
	
	chooseSchedule : function(sId){
		var _o = this.getObjects(),o;
		o = (_o.stages[sId] ? _o.stages[sId] : _o.tasks[sId]);
		if(!o) return;

		var ctid=sId + "schedule";
		this.openPicker("SchedulePicker",{type:"schedule",stage:o.guid,ctrlId:ctid});
	},
	chooseTask : function(sId){
		var _o = this.getObjects(),o;
		o = _o.tasks[sId];
		if(!o) return;
		var ctid=sId + "name";
		this.openPicker("TaskPicker",{type:"task",task:o.guid,ctrlId:ctid});
	},

	chooseEstimate : function(sId){
		var _o = this.getObjects(),o;
		o = (_o.stages[sId] ? _o.stages[sId] : _o.tasks[sId]);
		if(!o) return;
		var ctid=sId + "estimate";
		this.openPicker("EstimatePicker",{type:"estimate",task:(o.stageGuid ? o.guid : 0),stage:(!o.stageGuid ? o.guid : 0),ctrlId:ctid});
	},
	chooseBudget : function(sId){
		var _o = this.getObjects(),o;
		o = _o.stages[sId];
		if(!o) return;
		var ctid=sId + "budget";
		this.openPicker("BudgetPicker",{type:"budget",stage:o.guid,ctrlId:ctid});
	},
	chooseResources : function(sId){
		var _o = this.getObjects(),o;
		o = _o.tasks[sId];
		if(!o) return;
		var ctid=sId + "resources";
		this.openPicker("ResourcePicker",{multiple:1,type:"resources",task:o.guid,ctrlId:ctid});
	},
	chooseTaskStatus : function(sId){
		var _o = this.getObjects(),o;
		o = _o.tasks[sId];
		if(!o) return;
		var ctid=sId + "status";
		this.openPicker("TaskStatusPicker",{type:"taskStatus",task:o.guid,ctrlId:ctid});
	},

	chooseStage : function(sId){
		var _o = this.getObjects(),o;
		o = (_o.stages[sId] ? _o.stages[sId] : _o.tasks[sId]);
		if(!o) return;
		var ctid=sId + "estimate";
		var ctid= sId + "name";
		//this.getObjects().link_target = {type:"stage",stage:sId,ctrlId:ctid};
		this.openPicker("StagePicker",{type:"stage",stage:o.guid,ctrlId:ctid});
		
	},

	openPicker : function(sType, vSrc){
		vSrc.opener_id = this.getObjectId();
		Hemi.app.createWindow("Template Picker","Templates/Picker.xml",sType,0,0,vSrc,this._prehandle_project_picker_open)
		/// If !oW, the window already exists, so close it
		///
		.then((oW)=>{
			if(!oW){
				oW = Hemi.app.getWindowManager().GetWindowByName(sType);
				if(oW) oW.Close();
				return;
			}
		
          	if (oW) {
          		oW.resizeTo(400, 250);
          		if(vSrc.ctrlId){
          			var o = this.getElementByRID(vSrc.ctrlId);
          			/*
          			var l = Hemi.css.getAbsoluteLeft(o);
					var t = Hemi.css.getAbsoluteTop(o) + o.offsetHeight;
					Hemi.log("Move " + vSrc.ctrlId + " to " + l + ", " + t);
					oW.moveTo(l + "px",t + "px");
					*/
					Hemi.ui.util.alignControl(oW,o,oW.getContainer());
          		}
          		else{
          			Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
          		}
          		// Destroy the window when closed
          		//
          		oW.setHideOnClose(0);
          	}
          });
	},
	_handle_project_picker_open : function(oW){
		var _o = this.getObjects();
		oW.setTitle("Pick " + oW.getProperties().type);
		oW.setCanResize(0);
		oW.setCanMinimize(0);
		oW.setCanMaximize(0);
		oW.SetPickerHandler(this._prehandle_project_picker_choose);
		oW.setHideOnClose(0);
		_o.current_picker = oW;
		oW.GetPickerList().clearItems();
		var oLT = oW.getProperties();
		var aL = [];
		switch(oLT.type){
			case "taskStatus":
				aL = [
					"UNKNOWN",
		    		"ESTIMATED",
		    		"IN_PROGRESS",
		    		"COMPLETED",
		    		"BLOCKED",
		    		"APPROVED",
		    		"WASTE",
		    		"UNPLANNED",
		    		"REJECTED"
				].sort();
				break;
			case "process":
				aL = p.steps;
				break;
			case "schedule":
				aL = AM6Client.list("SCHEDULE",AM6Client.make("GROUP","DATA",irocket.getBasePath("Schedule")).objectId,0,0);
				break;
			case "resources":
				aL = AM6Client.list("RESOURCE",AM6Client.make("GROUP","DATA",irocket.getBasePath("Resource")).objectId,0,0);
				break;
			case "task":
				aL = AM6Client.list("TASK",AM6Client.make("GROUP","DATA",irocket.getBasePath("Task")).objectId,0,0);
				break;
			case "stage":
				aL = AM6Client.list("STAGE",AM6Client.make("GROUP","DATA",irocket.getBasePath("Schedule")).objectId,0,0);
				break;
			case "budget":
				aL = AM6Client.list("BUDGET",AM6Client.make("GROUP","DATA",irocket.getBasePath("Budget")).objectId,0,0);
				break;

			case "estimate":
				var aEL = AM6Client.list("ESTIMATE",AM6Client.make("GROUP","DATA",irocket.getBasePath("Estimate")).objectId,0,0);
				for(var i = 0; i < aEL.length;i++) if(aEL[i].time) aL.push(aEL[i]);
				break;
		}
		for(var i = 0; i < aL.length; i++){
			oW.GetPickerList().addItem((typeof aL[i] == "string" ? aL[i] : aL[i].name),aL[i]);
		}
		if(oLT.type == "resources"){
			oW.selectValues(_o.tasks[oLT.task].object.resources);
		}
		
	},
	_handle_project_picker_choose : function(oPicker, oItem){
		_o = this.getObjects();
		var oList;
		var oLT = oPicker.getProperties();
		var sN = "";
		var bStage = 0;
		switch(oLT.type){
			case "process":
				sN = oLT.stage + "name";
				break;
			case "taskStatus":
				_o.tasks[oLT.task].object.taskStatus = oItem.data;
				break;
			case "budget":
				_o.stages[oLT.stage].object.budget = oItem.data;;
				bStage = 1;
				break;
			case "schedule":
				_o.stages[oLT.stage].object.schedule = oItem.data;;
				bStage = 1;
				///this.pushScheduleToTasks(oItem.data,oLT.stage);
				break;
			case "estimate":
				if(oLT.task){
					_o.tasks[oLT.task].object.estimate = oItem.data;
				}
				else if (oLT.stage){
					_o.stages[oLT.stage].object.estimate = oItem.data;
					bStage = 1;
				}
				break;
			case "resources":
				var a = [];
				for(var i = 0; i < oItem.length;i++){
					a.push(oItem[i].data);
				}
				_o.tasks[oLT.task].object.resources = a;
				this.getElementByRID(oLT.task + "resources").focus();
				break;
			case "task":
				_o.tasks[oLT.task].object = oItem.data;
				break;
			case "stage":
				_o.stages[oLT.stage].object = oItem.data;
				bStage = 1;
				break;
			default:
				Hemi.logError("Unhandled type: '" + oLT.type + "'");
				break;

		}
		
		if(!bStage){
			this.refreshTaskDisplay(oLT.task);
		}
		else{
			this.refreshStageDisplay(oLT.stage);
		}
		
		oPicker.Close();
	},
	
   getTimeMS : function(oT,b){
   		var iM = 0,_s = this.getProperties();
   		if(!oT || oT == null) return 0;
		switch(oT.basisType){
			case "MINUTE":
				iM = 60;
				break;
			case "HOUR":
				iM = 3600;
				break;
			case "DAY":
				iM = 3600 * (b ? _s.realHoursInDay : _s.hoursInDay);
				break;
			case "WEEK":
				iM = 3600 * (b ? _s.realHoursInWeek : _s.hoursInWeek);
				break;
			case "MONTH":
				iM = 3600 * (b ? _s.realHoursInMonth : _s.hoursInMonth);
				break;
			case "YEAR":
				iM = 3600 * (b ? _s.realHoursInYear : _s.hoursInYear);
				break;
		}
		return oT.value * (iM * 1000);
   },
   unrollEstimates : function(){
   	this.rerollEstimates(1);
   },
   rollEstimates : function(){
   	this.rerollEstimates(0);
   },
   /// TODO: For roll-up, the depth/sum needs to be stored in a hash against the parent and not just reset.
   rerollEstimates : function(bUnroll){
	var _o = this.getObjects(),oT,oS,nId,iD = 0,iSum=0,oLS=0;
	var vPSum = {};
	   for(var i = _o.rowOrder.length; i >= 0; i--){
	   	  
	      oT = 0;
	      oS = 0;
	      nId = _o.rowOrder[i];
	      if(_o.tasks[nId]) oT = _o.tasks[nId];
	      if(_o.stages[nId]) oS = _o.stages[nId];
	      if(!oT && !oS){
	         /// error
	         //iSum = 0;
	         //iD = 0;
	         continue;
	      }
	      if(oS){
	         /// handle stages separately
	
	         //iSum = 0;
	         if(oLS){
	         	oLS.object.schedule.startTime = new Date(oLS.minTaskTime);
	         	oLS.object.schedule.endTime = new Date(oLS.maxTaskTime);
	         	this.refreshStageDisplay(oLS.guid);
	         }
			 oLS = oS;
	         continue;
	      }

	      if(!oT.object) continue;
			if(!vPSum[oT.parentGuid]) vPSum[oT.parentGuid] = 0;
			if(!vPSum[oT.guid]) vPSum[oT.guid] = 0;
	      /// depth shift
	      if(oT.depth != iD){
	      	/// if task has children, take the value of iSum as the estimate
	        if(oT.childTasks && oT.childTasks.length > 0){
	        	if(bUnroll){
	        		oT.object.estimate = AM6Client.getByName("ESTIMATE",AM6Client.find("GROUP", "DATA",irocket.getBasePath("Estimate")).objectId, "Zero");
	        	}
	        	else{
		            //var oE = oT.object.estimate;
		            iSum = vPSum[oT.guid];
		            vSum = (iSum > 0 ? Math.ceil(iSum/3600000) : 0);
		            /// if no estimate, or not an auto estimate, then create an auto estimate from the sum
		            var oE = AM6Client.getByName("ESTIMATE",AM6Client.make("GROUP", "DATA",irocket.getBasePath("Estimate")).objectId,vSum + " Hours - Auto");

		            if(!oE){
		               oE = new org.cote.objects.estimateType();
			    		oE.name = vSum + " Hours - Auto";
			    		oE.nameType = "ESTIMATE";
		                oE.estimateType = "SWAG";
		                oE.groupPath = AM6Client.make("GROUP", "DATA",irocket.getBasePath("Estimate")).path;
					}
					oT.object.estimate = oE;
					/// if the estimate has no time value, find a time value for the sum value
					///
					var oTime = oE.time;
					if(!oTime) oTime = AM6Client.getByName("TIME",AM6Client.make("GROUP", "DATA",irocket.getBasePath("Time")).objectId,"" + iSum + " Hours");
					if(!oTime){
						oTime = new org.cote.objects.timeType();
						oTime.nameType = "TIME";
					}
					oTime.basisType = "HOUR";
					/// iSum should be in ms, so round up to nearest hour
					oTime.value = vSum
					oE.time = oTime;
					vPSum[oT.parentGuid] += (oT.object.estimate && oT.object.estimate.time ? this.getTimeMS(oT.object.estimate.time) : 0);
					/// and let the sum value keep-rolling up
				}
	         } // end if child
	         /// the depth changed but the task has no children.  If the depth is greater than iD, then restart the sum.
	         else if(!bUnroll){
	         	
	         	var iCnt = (oT.object.estimate && oT.object.estimate.time ? this.getTimeMS(oT.object.estimate.time) : 0);
	         	vPSum[oT.parentGuid] += iCnt;
	         }
	       } // end if different depth
	       /// else, it's at the same depth, so keep adding to the sum
	       else if(!bUnroll){
	       		Hemi.log("Adding " + oT.name + " estimate " + (oT.estimate ? oT.estimate.name : " Null"));
	       		vPSum[oT.parentGuid] += (oT.object.estimate && oT.object.estimate.time ? this.getTimeMS(oT.object.estimate.time) : 0);
	       } 

	     	if(oT.object.estimate){
	     		this.setElementValue(oT.guid + "estimate",oT.object.estimate.name,0);
	     	}
	        iD = oT.depth;
	        
	        oS = _o.stages[oT.stageGuid]; 
	        var iTMS = (oT.object.estimate && oT.object.estimate.time ? this.getTimeMS(oT.object.estimate.time,1) : 0);
		  	if(oS.minTaskTime == 0 || (oT.object.dueDate.getTime() - iTMS) < oS.minTaskTime) oS.minTaskTime = (oT.object.dueDate.getTime() - iTMS);
		  	if(oS.maxTaskTime == 0 || oT.object.dueDate.getTime() > oS.maxTaskTime) oS.maxTaskTime = oT.object.dueDate.getTime(); 
	        
	         
	      } // end for
	      if(oLS){
	       	oLS.object.schedule.startTime = new Date(oLS.minTaskTime);
	       	oLS.object.schedule.endTime = new Date(oLS.maxTaskTime);
	       	this.refreshStageDisplay(oLS.guid);
	       }
	   } // end function
	 
	
]]></embedded-script>
</Template><Template id="PolicyMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>

	<div rid="policy">
	</div>		
	<div rid="rule">
	</div>	
	<div rid="pattern">
	</div>
	<div rid="fact">
	</div>
	<div rid="operation">
	</div>
	<div rid="function">
	</div>	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.AddTab("policy","Policies",this.scopeHandler("loadPolicyTab",0,1,1));
				this.AddTab("rule","Rules",this.scopeHandler("loadRuleTab",0,1,1));
				this.AddTab("pattern","Patterns",this.scopeHandler("loadPatternTab",0,1,1));
				this.AddTab("fact","Facts",this.scopeHandler("loadFactTab",0,1,1));
				this.AddTab("operation","Operations",this.scopeHandler("loadOperationTab",0,1,1));
				this.AddTab("function","Functions",this.scopeHandler("loadFunctionTab",0,1,1));
				this.ShowTab(0);
				this.loadPolicyTab();
			},
			loadPolicyTab : function(o){
				this.loadTab("Policy",o);
			},
			loadPatternTab : function(o){
				this.loadTab("Pattern",o);
			},
			loadRuleTab : function(o){
				this.loadTab("Rule",o);
			},
			loadFactTab : function(o){
				this.loadTab("Fact",o);
			},
			loadOperationTab : function(o){
				this.loadTab("Operation",o);
			},
			loadFunctionTab : function(o){
				this.loadTab("Function",o);
			},
			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
				});
			}
		]]>
	</embedded-script>
</Template><Template id="MethodMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>
	<div rid="methodology">
	</div>	
	<div rid="process">
	</div>	
	<div rid="processstep">
	</div>	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.AddTab("methodology","Methodologies",this.scopeHandler("loadMethodologyTab",0,1,1));
				this.AddTab("process","Processes",this.scopeHandler("loadProcessTab",0,1,1));
				this.AddTab("processstep","Process Steps",this.scopeHandler("loadProcessStepTab",0,1,1));
				this.ShowTab(0);
				this.loadMethodologyTab();
			},
			loadTimesTab : function(o){
				this.loadTab("Time",o);
			},
			loadCostsTab : function(o){
				this.loadTab("Cost",o);
			},
			loadGroupsTab : function(o){
				this.loadTab("Group",o);
			},
			loadUsersTab : function(o){
				this.loadTab("User",o);
			},
			loadValidationRuleTab : function(o){
				this.loadTab("ValidationRule",o);
			},
			loadFormTab : function(o){
				this.loadTab("Form",o);
			},
			loadFormElementTab : function(o){
				this.loadTab("FormElement",o);
			},
			loadTicketTab : function(o){
				this.loadTab("Ticket",o);
			},
			loadLifecycleTab : function(o){
				this.loadTab("Lifecycle",o);
			},
			loadStoryTab : function(o){
				this.loadTab("Story",o);
			},
			loadProjectTab : function(o){
				this.loadTab("Project",o);
			},
			loadModuleTab : function(o){
				this.loadTab("Module",o);
			},
			loadStageTab : function(o){
				this.loadTab("Stage",o);
			},
			loadMethodologyTab : function(o){
				this.loadTab("Methodology",o);
			},
			loadProcessTab : function(o){
				this.loadTab("Process",o);
			},
			loadProcessStepTab : function(o){
				this.loadTab("ProcessStep",o);
			},
			loadWorkTab : function(o){
				this.loadTab("Work",o);
			},
			loadTaskTab : function(o){
				this.loadTab("Task",o);
			},
			loadEstimateTab : function(o){
				this.loadTab("Estimate",o);
			},
			loadModelTab : function(o){
				this.loadTab("Model",o);
			},
			loadNoteTab : function(o){
				this.loadTab("Note",o);
			},
			loadDataTab : function(o){
				this.loadTab("Data",o);
			},
			loadArtifactTab : function(o){
				this.loadTab("Artifact",o);
			},
			
			loadCaseTab : function(o){
				this.loadTab("Case",o);
			},
			loadRequirementTab : function(o){
				this.loadTab("Requirement",o);
			},
			loadResourceTab : function(o){
				this.loadTab("Resource",o);
			},
			loadScheduleTab : function(o){
				this.loadTab("Schedule",o);
			},
			loadBudgetTab : function(o){
				this.loadTab("Budget",o);
			},
			loadGoalTab : function(o){
				this.loadTab("Goal",o);
			},
			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
				});
			},
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			}
		]]>
	</embedded-script>
</Template><Template id="IdentityMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>

	<div rid="person">
	</div>		
	<div rid="application">
	</div>	
	<!-- 
	<div rid = "account">
	</div>
	-->
	<div rid="user">
	</div>	
	<div rid="permission">
	</div>	
	<div rid="role">
	</div>
	<div rid="contact">
	</div>	
	<div rid="address">
	</div>	
	<!--
	<p rid = "genCont" style = "clear:both;"><input type = "button" class = "rocket-button" value = "Generate Identity Data" onclick = "${this}.openGenerator()" /></p>
	-->
	<embedded-script>
		<![CDATA[
			template_init: function(){
				//this.getElementByRID("genCont").style.display = (uwm.debugMode ? "block" : "none");
				this.AddTab("person","Persons",this.scopeHandler("loadPersonTab",0,1,1));
				this.AddTab("application","Applications",this.scopeHandler("loadApplicationTab",0,1,1));
				//this.AddTab("account","Accounts",this.scopeHandler("loadAccountTab",0,1,1));
				this.AddTab("user","Users",this.scopeHandler("loadUserTab",0,1,1));
				this.AddTab("permission","Permissions",this.scopeHandler("loadPermissionTab",0,1,1));
				this.AddTab("role","Roles",this.scopeHandler("loadRoleTab",0,1,1));
				this.AddTab("contact","Contacts",this.scopeHandler("loadContactTab",0,1,1));
				this.AddTab("address","Addresses",this.scopeHandler("loadAddressTab",0,1,1));
				this.ShowTab(0);
				this.loadPersonTab();
			},
			loadContactTab : function(o){
				this.loadTab("Contact",o);
			},
			loadAddressTab : function(o){
				this.loadTab("Address",o);
			},
			loadPersonTab : function(o){
				this.loadTab("Person",o);
			},
			loadApplicationTab : function(o){
				this.loadTab("Application",o);
			},
			loadAccountTab : function(o){
				this.loadTab("Account",o);
			},
			loadUserTab : function(o){
				this.loadTab("User",o);
			},
			loadPermissionTab : function(o){
				this.loadTab("Permission",o);
			},
			loadRoleTab : function(o){
				this.loadTab("Role",o);
			},

			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
				});
			},
			openGenerator : function(){
				Hemi.app.createWindow("Data Generator", "/RocketWeb/Templates/DataGenerator.xml", "Data Generator")
				.then((oW)=>{
		            if (oW) {
		            	oW.resizeTo(475, 400);
		            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
		            	oW.setHideOnClose(0);
		            }
	            });
			},
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			}
		]]>
	</embedded-script>
</Template><Template id="FormMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>

	<div rid="form">
	</div>		
	<div rid="formelement">
	</div>
	<div rid="validationrule">
	</div>	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.AddTab("form","Forms",this.scopeHandler("loadFormTab",0,1,1));
				this.AddTab("formelement","Form Elements",this.scopeHandler("loadFormElementTab",0,1,1));
				this.AddTab("validationrule","Validation Rules",this.scopeHandler("loadValidationRuleTab",0,1,1));
				this.ShowTab(0);
				this.loadFormTab();
			},
			loadTimesTab : function(o){
				this.loadTab("Time",o);
			},
			loadCostsTab : function(o){
				this.loadTab("Cost",o);
			},
			loadGroupsTab : function(o){
				this.loadTab("Group",o);
			},
			loadUsersTab : function(o){
				this.loadTab("User",o);
			},
			loadValidationRuleTab : function(o){
				this.loadTab("ValidationRule",o);
			},
			loadFormTab : function(o){
				this.loadTab("Form",o);
			},
			loadFormElementTab : function(o){
				this.loadTab("FormElement",o);
			},
			loadTicketTab : function(o){
				this.loadTab("Ticket",o);
			},
			loadLifecycleTab : function(o){
				this.loadTab("Lifecycle",o);
			},
			loadStoryTab : function(o){
				this.loadTab("Story",o);
			},
			loadProjectTab : function(o){
				this.loadTab("Project",o);
			},
			loadModuleTab : function(o){
				this.loadTab("Module",o);
			},
			loadStageTab : function(o){
				this.loadTab("Stage",o);
			},
			loadMethodologyTab : function(o){
				this.loadTab("Methodology",o);
			},
			loadProcessTab : function(o){
				this.loadTab("Process",o);
			},
			loadProcessStepTab : function(o){
				this.loadTab("ProcessStep",o);
			},
			loadWorkTab : function(o){
				this.loadTab("Work",o);
			},
			loadTaskTab : function(o){
				this.loadTab("Task",o);
			},
			loadEstimateTab : function(o){
				this.loadTab("Estimate",o);
			},
			loadModelTab : function(o){
				this.loadTab("Model",o);
			},
			loadNoteTab : function(o){
				this.loadTab("Note",o);
			},
			loadDataTab : function(o){
				this.loadTab("Data",o);
			},
			loadArtifactTab : function(o){
				this.loadTab("Artifact",o);
			},
			
			loadCaseTab : function(o){
				this.loadTab("Case",o);
			},
			loadRequirementTab : function(o){
				this.loadTab("Requirement",o);
			},
			loadResourceTab : function(o){
				this.loadTab("Resource",o);
			},
			loadScheduleTab : function(o){
				this.loadTab("Schedule",o);
			},
			loadBudgetTab : function(o){
				this.loadTab("Budget",o);
			},
			loadGoalTab : function(o){
				this.loadTab("Goal",o);
			},
			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
				});
			},
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			}
		]]>
	</embedded-script>
</Template><Template id="EventMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>
	<div rid="event">
	</div>	
	<div rid="location">
	</div>	
	<div rid="trait">
	</div>	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.AddTab("event","Events",this.scopeHandler("loadEventsTab",0,1,1));
				this.AddTab("location","Locations",this.scopeHandler("loadLocationsTab",0,1,1));
				this.AddTab("trait","Traits",this.scopeHandler("loadTraitsTab",0,1,1));
				this.ShowTab(0);
				this.loadEventsTab();
			},
			loadEventsTab : function(o){
				this.loadTab("Event",o);
			},
			loadLocationsTab : function(o){
				this.loadTab("Location",o);
			},
			loadTraitsTab : function(o){
				this.loadTab("Trait",o);
			},
			
			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
				});
			},
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			}
		]]>
	</embedded-script>
</Template><Template id="DevelopmentMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>
	<div rid="components">
	</div>	
	<div rid="fragments">
	</div>	
	<div rid="modules">
	</div>
	<div rid="projects">
	</div>	
	<div rid="pub">
	</div>	
	<div rid="tasks">
	</div>
	<div rid="tests">
	</div>
	<div rid="templates">
	</div>	
	<!--
	<div rid = "workers">
	</div>
	-->	
	<p>
	<input type="button" value="Configure Community" onclick="${this}.configureGroups()"/>
	<input type="button" value="Load Demos" onclick="${this}.LoadDemo()"/>
	</p>
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.scopeHandler("template_loaded", 0, 0, 1);
				this.AddTab("components","Components",this.scopeHandler("loadComponentsTab",0,1,1));
				this.AddTab("fragments","Fragments",this.scopeHandler("loadFragmentsTab",0,1,1));
				this.AddTab("modules","Modules",this.scopeHandler("loadModulesTab",0,1,1));
				this.AddTab("projects","Projects",this.scopeHandler("loadProjectsTab",0,1,1));
				this.AddTab("pub","Pub",this.scopeHandler("loadPubTab",0,1,1));
				this.AddTab("tasks","Tasks",this.scopeHandler("loadTasksTab",0,1,1));
				this.AddTab("tests","Tests",this.scopeHandler("loadTestsTab",0,1,1));
				this.AddTab("templates","Templates",this.scopeHandler("loadTemplatesTab",0,1,1));
				//this.AddTab("workers","Workers",this.scopeHandler("loadWorkersTab",0,1,1));
				this.configureGroups();
				this.ShowTab(0);
				this.loadComponentsTab();
			},
			LoadDemo : function(){
				var aStaticComponents = ["reflected","reflector"];
				var aStaticTemplates = ["form","setbeanform","getbeanform","elform","scriptform","reflect","formfieldsget","formfieldsset"];
				var aStaticFragments = ["contact","color","demobean"];
				var aStaticProjects = ["reflect"];
				var aStaticTasks = ["scriptxml","script","bootstrap"];
				var aStaticTests = ["asyncxml.js"];
				var aStaticModules = ["basic.js"];

			    this.AddDemoList("Component",aStaticComponents);
			    this.AddDemoList("Template",aStaticTemplates);
			    this.AddDemoList("Fragment",aStaticFragments);
			    this.AddDemoList("Project",aStaticProjects);
			    this.AddDemoList("Task",aStaticTasks);
			    this.AddDemoList("Test",aStaticTests);
			    this.AddDemoList("Module",aStaticModules);
				
				
			},
			AddDemoList : function(sType, aL){
				var sDBase = uwm.getPathForType("DWAC");
				var sBase = sDBase + "/" + sType + "s";
				var sSPath = "/HemiFramework/Hemi/Examples/Runnable/";
				var oGB = AM6Client.find("GROUP","DATA",sDBase);
				var oG = AM6Client.find("GROUP","DATA",sBase);
				var bScript = sType.match(/^(module|test)/gi);
				var sExt = (bScript ? "" : ".xml");
				var rReg = /dwac:(Fragments|Templates|Components|Modules|Tasks)+/;
				var m;
				for(var i = 0; i < aL.length; i++){
					var sName = sType.toLowerCase() + "." + aL[i] + sExt;
					var sOName = aL[i];
					var sText = Hemi.xml.getText(sSPath + sName);
					if(!sText || sText == null || sText.length == 0){
						Hemi.logError("Invalid file: " + sName);
						continue;
					}
					sText = sText.replace(/dwac:\/DWAC\/Anonymous/g,g_application_path + "media/" + AM6Client.dotPath(AM6Client.currentOrganization) + "/Data" + oGB.path);
					while ((m = sText.match(rReg)) && m.length > 1){
						sText = sText.replace(rReg, g_application_path + "media/" + AM6Client.dotPath(AM6Client.currentOrganization) + "/Data" + oGB.path + "/" + m[1]);
					}

					var o = AM6Client.getByName("DATA", oG.objectId, sOName);
					if(o != null){
						AM6Client.delete("DATA", o.objectId);
						o = null;
					}
					if(o == null){
						o = new org.cote.objects.dataType();
						o.name = sOName;
						o.blob = true;
						o.nameType = "DATA";
						o.mimeType = "text/" + (bScript ? "javascript" : "xml");
						o.description = "";
						o.id = 0;
						o.createdDate = new Date();
						o.modifiedDate = o.createdDate;
						o.expiryDate = o.createdDate;
						o.groupPath = oG.path;
					}
					o.dataBytesStore = uwm.base64Encode(sText);

					if(AM6Client.update("DATA",o)){
						Hemi.log("Loaded example " + sName);
					}
					else{
						Hemi.logError("Failed to load example " + sName);
					}
					
				}
			},
			_handle_template_loaded: function (v) {
				if (v && v.getProperties().local_invoke) {
					if (v.getProperties().local_invoke_params) v[v.getProperties().local_invoke].apply(v, v.getProperties().local_invoke_params);
					else v[v.getProperties().local_invoke]();
					v.getProperties().local_invoke = 0;
					v.getProperties().local_invoke_params = 0;
				}
			},
			getProps: function () {
				var _p = this.getProperties(),sBPath = uwm.getPathForType("DWAC");
								
				var sPath = sBPath + "/" + this.getProperties().current_tab;
				var oP = AM6Client.find("GROUP","DATA",sPath);
				
				return {
					application: "DWAC",
					current_group_id: (oP ? oP.objectId : 0),
					current_group_name: (oP ? oP.name : null),
					current_path: (oP ? oP.path : null),
					openerId : this.getObjectId()
				};
			},
			provideItem : function(vS){
				//alert(s + ":" + this.getProperties().current_tab + ":" + this.provideCreateItem);
				var oWp, sId = Hemi.guid(), oProps = this.getProps();
				
				if(typeof vS == "object"){
					if(vS.detailsOnly) vS = AM6Client.get("DATA", vS.objectId);
					sId = vS.objectId;
					oProps.local_invoke_params = [sId];
					oProps.local_invoke = "LoadObject";
					oProps.data_object = vS;
					
				}

				switch(this.getProperties().current_tab){
					case "Components":
						oWp = Hemi.app.createWindow("Component Builder", "Templates/ComponentBuilder.xml", "component-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
						break;
					case "Templates":
						oWp = Hemi.app.createWindow("Template Builder", "Templates/TemplateBuilder.xml", "template-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
						break;
					case "Fragments":
						oWp = Hemi.app.createWindow("Fragment Builder", "Templates/FragmentBuilder.xml", "fragment-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
						break;
					case "Modules":
						oWp = Hemi.app.createWindow("Module Builder", "Templates/ModuleBuilder.xml", "module-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
						break;
					case "Tests":
						oProps.testFeat = 1;
						oWp = Hemi.app.createWindow("Test Builder", "Templates/ModuleBuilder.xml", "test-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
						break;
					case "Tasks":
						oWp = Hemi.app.createWindow("Task Builder", "Templates/TaskBuilder.xml", "task-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
						break;
					case "Projects":
						oWp = Hemi.app.createWindow("Project Builder", "Templates/ProjectBuilder.xml", "project-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
						break;
					case "Pub":
						var sUrl = g_application_path + "dwac/" + AM6Client.dotPath(AM6Client.currentOrganization) + "/Data" + vS.groupPath + "/" + vS.name;
						window.open(sUrl, vS.objectId);
						break;
				}
				if (oWp) {
					oWp.then((oW)=>{
						oW.resizeTo(650, 650);
						Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
						// Destroy the window when finished
						//
						oW.setHideOnClose(0);
					});
				}
			},
			loadComponentsTab : function(o){
				this.loadTab("Components",o);
			},
			loadFragmentsTab : function(o){
				this.loadTab("Fragments",o);
			},
			loadModulesTab : function(o){
				this.loadTab("Modules",o);
			},
			loadProjectsTab : function(o){
				this.loadTab("Projects",o);
			},
			loadPubTab : function(o){
				this.loadTab("Pub",o);
			},
			loadTasksTab : function(o){
				this.loadTab("Tasks",o);
			},
			loadTestsTab : function(o){
				this.loadTab("Tests",o);
			},
			loadTemplatesTab : function(o){
				this.loadTab("Templates",o);
			},
			loadWorkersTab : function(o){
				this.loadTab("Workers",o);
			},
			
			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				this.getProperties().current_tab = s;

				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.provideCreateItem = this.scopeHandler("provideItem",0,1,1);
					ac.provideOpenItem = ac.provideCreateItem;
					this.configureGroup(s);
					var sBPath = uwm.getPathForType("DWAC");
					var sPath = sBPath + "/" + s;
					ac.getProperties().defaultPath = sPath;
					ac.loadTemplate(uwm.getApiTypeView("Data") + "/Forms/ListDatas.xml");
				});
			},
			configureGroups : function(){
				var aG = ["Components","Fragments","Modules","Projects","Pub","Tasks","Tests","Templates"];
				for(var i = 0; i < aG.length; i++){
					this.configureGroup(aG[i]);
				}
			},
			configureGroup : function(s){
				var sBPath = uwm.getPathForType("DWAC");
				var sPath = sBPath + "/" + s;
				
				var oP = AM6Client.find("GROUP","DATA",sPath);
				if(!oP){
					if(irocket.getCommunityMode()){
						var oBP = AM6Client.find("GROUP","DATA",sBPath);
						if(!oBP){
							var oBPP = AM6Client.find("GROUP","DATA", sBPath.substring(0, sBPath.lastIndexOf("/")));
							
							oBP = new org.cote.objects.baseGroupType();
							oBP.name = "DWAC";
							oBP.parentId = oBPP.id;
							oBP.nameType = "GROUP";
							oBP.groupType = "DATA";
							if(AM6Client.update("GROUP",oBP)){
								oBP = AM6Client.find("GROUP","DATA",sPath);
								AM6Client.configureCommunityProjectGroupEntitlements(irocket.getCommunityLifecycle().objectId, irocket.getCommunityProject().objectId, oBP.objectId);

							}
						}
						oP = new org.cote.objects.baseGroupType();
						oP.name = s;
						oP.parentId = oBP.id;
						oP.nameType = "GROUP";
						oP.groupType = "DATA";
						if(AM6Client.update("GROUP",oP)){
							oP = AM6Client.find("GROUP","DATA",sPath);
							AM6Client.configureCommunityProjectGroupEntitlements(irocket.getCommunityLifecycle().objectId, irocket.getCommunityProject().objectId, oP.objectId);

						}
					}
					else{
						/// Make is intentionally restricted to paths within a users home directory
						///
						oP = AM6Client.make("GROUP","DATA",sPath);
					}
				}
			},
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			}
		]]>
	</embedded-script>
</Template><Template Title="Designer">

	<!-- 
	
	Designer is a hodge-podge of the 'Rocket' style templates, which are modular, and a large chunk of legacy code I haven't refactored yet.
	The save/update code is a straight-up copy from the newer style
	 -->
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-style src="Styles/tabs.css" id="Tabs"/>
	<import-style src="Styles/Designer.css" id="designer"/>
	<import-style src="Styles/GridStyle.css" id="grid"/>
	<div style="clear:both;">
		<div rid="designer_tab" onclick="${this}.ShowTab(1)" class="tab">Design</div>
		<div rid="source_tab" onclick="${this}.ShowTab(2)" class="tab">Source</div>
		<div rid="preview_tab" onclick="${this}.ShowTab(3)" class="tab">Preview</div>
	</div>
	<div style="display:none;" rid="source_container">
		<textarea rid="preview_source" style="width:95%;border:1px solid #909090;font:8pt Courier;"/>
	</div>
	<div rid="preview_container" style="display:none;">
		<iframe rid="preview_frame" frameborder="0" style="border:0px solid #000000;"/>
		
	</div>
	<div style="display:none;" rid="designer_container">
	<div class="style_bar">
		<select rid="template" onchange="${this}.LoadDesignerTemplate()">
			<option value="0">TEMPLATE</option>
			<option value="blank">Blank Template</option>
		<option value="/AccountManagerService/media/Public/Data/Home/steve/DWAC/Templates/DesignerContentTemplate.xml">Demo Template</option>
		<option value="/AccountManagerService/media/Public/Data/Home/steve/DWAC/Templates/DesignerContentTemplate2.xml">Demo Template 2</option>
		</select>
		<select rid="block" onchange="${this}.ExecBlock()">
			<option value="0">BLOCK</option>
			<option>H1</option>
			<option>H2</option>
			<option>H3</option>
			<option>H4</option>
			<option>H5</option>
			<option>H6</option>
			<option>BlockQuote</option>
			<option>P</option>
			<!--
			<option>DIV</option>
			-->
		</select>
		<select rid="fonts" onchange="${this}.ExecFont()"><option value="0">FONT</option><option>Arial</option><option>Times</option><option>Verdana</option><option>Courier</option></select>
		<select rid="fontsize" onchange="${this}.ExecFontSize()"><option value="0">SIZE</option><option>Size 1</option><option>Size 2</option><option>Size 3</option><option>Size 4</option><option>Size 5</option><option>Size 6</option><option>Size 7</option></select>
		<select rid="fontcolor" onchange="${this}.ExecFontColor()">
			<option value="0">COLOR</option>
			<option>Black</option>
			<option>Grey</option>
			<option>White</option>
			<option>Red</option>
			<option>Orange</option>
			<option>Yellow</option>
			<option>Green</option>
			<option>Blue</option>
			<option>Violet</option>
		</select>
		<select rid="fill" onchange="${this}.ExecFill()">
			<option value="0">FILL</option>
			<option>Black</option>
			<option>Grey</option>
			<option>White</option>
			<option>Red</option>
			<option>Orange</option>
			<option>Yellow</option>
			<option>Green</option>
			<option>Blue</option>
			<option>Violet</option>
		</select>
		</div>
		<div class="buttons_bar" rid="buttons-bar">
		<input type="button" class="designer_button" button-action="Save" style="background-image: url(/AccountManagerService/Media/Icons/save_ico.gif);"/>
		<input type="text" placeholder="${property.defaultPath}" rid="path" style="margin-top: 6px;float:left; width: 100px !important;" class="rocket-text rocket-text-short"/>
		<input type="hidden" rid="id" bind="${bean.rocketType}"/>
		<input type="hidden" rid="mimeType" bind="${bean.rocketType}"/>
		<input type="text" rid="name" placeholder="Untitled" bind="${bean.rocketType}" style="margin-top: 6px;float:left; width: 100px !important;" class="rocket-text"/>
		<div type="button" class="designer_button_spacer"/>
		<input type="button" class="designer_button" button-action="Bold" style="background-image: url(/AccountManagerService/Media/Icons/bold.gif);"/>
		<input type="button" class="designer_button" button-action="Italic" style="background-image: url(/AccountManagerService/Media/Icons/italic.gif);"/>
		<input type="button" class="designer_button" button-action="Underline" style="background-image: url(/AccountManagerService/Media/Icons/underline.gif);"/>
		
		<div type="button" class="designer_button_spacer"/>
		
		<input type="button" class="designer_button" button-action="JustifyLeft" style="background-image: url(/AccountManagerService/Media/Icons/left_just.gif);"/>
		<input type="button" class="designer_button" button-action="JustifyCenter" style="background-image: url(/AccountManagerService/Media/Icons/centre.gif);"/>
		<input type="button" class="designer_button" button-action="JustifyRight" style="background-image: url(/AccountManagerService/Media/Icons/right_just.gif);"/>
		
		<div type="button" class="designer_button_spacer"/>
		
		<input type="button" class="designer_button" button-action="InsertUnorderedList" style="background-image: url(/AccountManagerService/Media/Icons/list.gif);"/>
		<input type="button" class="designer_button" button-action="InsertOrderedList" style="background-image: url(/AccountManagerService/Media/Icons/numbered_list.gif);"/>
		
		<div type="button" class="designer_button_spacer"/>
		
		<input type="button" class="designer_button" button-action="Indent" style="background-image: url(/AccountManagerService/Media/Icons/indent.gif);"/>
		<input type="button" class="designer_button" button-action="Outdent" style="background-image: url(/AccountManagerService/Media/Icons/outdent.gif);"/>
		
		<div type="button" class="designer_button_spacer"/>
		
		<input type="button" class="designer_button" button-action="InsertHorizontalRule" style="background-image: url(/AccountManagerService/Media/Icons/hr.gif);"/>
		<input type="button" class="designer_button" button-action="CreateLink" style="background-image: url(/AccountManagerService/Media/Icons/hyperlink.gif);"/>
		<input type="button" class="designer_button" button-action="ImageLink" style="background-image: url(/AccountManagerService/Media/Icons/blankdoc2_ico.gif);"/>
		<div style="clear:both;"/>	
	</div>
	
	<iframe rid="designer" frameborder="0" style="border:0px solid #000000;"/>
	</div>
	<div rid="status" style="display:none;clear:both;"/>
<!--
	<div class = "buttons_bar_container">
		<div rid = "buttons-bar" style = "margin-left:auto;margin-right:auto;width:100px;">
			<input type="button" class = "designer_button" rid = "prev-button" onclick = "${this}.Prev()" button-action = "avoid" style = "background-color:#FFFFCC;width:50px;" value = "Prev" />
		</div>
	</div>
-->
	<embedded-script>
		<![CDATA[
		/// Note to self: a bind error will show up in the log if an element declares a binding, but a backing bean wasn't set
		/// It shows up in this template because it's a hodge-podge of older and newer styles
		///
		template_init : function(){
			//this.createHandler("create_control",0,0,1);
			// Show the designer first!
			//
			//
			this.scopeHandler("picker_loaded", 0, 0, 1);
			/*Hemi.include("bbscript","/Scripts/")*/
			
			this.local_handle_resize = this.resizers;
			this.local_handle_minimize = this.local_minimize;
			
			this.getProperties().proxied = 0;
			
			this.getProperties().keep_buffers = 0;
			if(!this.setStatus){
				this.getElementByRID("status").style.display = "block";
				this.setStatus = this._setStatus;
			}
			this.setStatus("Setting up designer ...");
			setTimeout("Hemi.registry.service.getObject('" + this.getObjectId() + "').setup_designer()",50);
		},
		_setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.getElementByRID("status"),s);
		},
		local_minimize : function(){
			// fix for latest FF 1.5
			//
			this.disable_designer();
		},
		
		template_destroy : function(){
			var d = this.get_frame("designer"), h = 0;
			this.getProperties().designer_html = 0;
			this.getProperties().control_buffer = 0;
			this.getProperties().showing_tab = 0;
			this.local_handle_focus = 0;
			this.local_handle_blur = 0;
			this.local_handle_minimize = 0;
			this._prehandle_toggle_highlight = 0;
			this._prehandle_exec_button = 0;
			this._prehandle_frame_blur = 0;
			this.local_handle_resize = 0;
			this._prehandle_create_control = 0;
			
		},

		
		LoadDesignerTemplate : function(){
			this.setStatus("Loading template ...");
			Hemi.log("Load designer template");
			var sTemplate = this.getFormValue("template");
			if(!sTemplate || !sTemplate.match(/\.xml/g)){
				if(sTemplate == "blank"){
					this.WriteContent("<html><body><h1>Title</h1><h2>Sub Title</h2><div>[ body ]</div></body></html>","designer");
				}
				else{
					this.setStatus("Invalid template selection");
				}
				return;
			}
			/*
			if(!this.getProperties().control_buffer){
				this.setStatus("Missing control buffer");
				return;
			}
			*/
			this.getTemplateObjectByName("template").selectedIndex = 0;
			
			var oX = Hemi.xml.getXml(sTemplate,0,0,sTemplate,1);
			if(!oX || !oX.documentElement){
				this.setStatus("Error loading template");
				return;
			}
			var sHtml = Hemi.xml.serialize(oX);
			// Konqueror / Safari fix; Serialize document and strip off processing instruction
			sHtml = sHtml.replace(/<\?xml (.[^<]*)>/gi,"");
			/// TODO: Swap tokens as needed, such as MediaLink
			///
			
			this.WriteContent("<html>" + sHtml + "</html>","designer");
			this.setStatus("");
		},
		
		ShowTab : function(i){
			this.setStatus("Switching tabs ...");
			this.getTemplateObjectByName("designer_container").style.display = "none";
			this.getTemplateObjectByName("preview_container").style.display = "none";
			this.getTemplateObjectByName("source_container").style.display = "none";
			/*
			this.getTemplateObjectByName("designer_tab").style.borderBottomColor = "#FFFFFF";
			this.getTemplateObjectByName("preview_tab").style.borderBottomColor = "#FFFFFF";
			this.getTemplateObjectByName("source_tab").style.borderBottomColor = "#FFFFFF";
			*/
			var sActiveSource = this.RefreshSource();
			
			this.getProperties().showing_tab = i;
			switch(i){
				case 1:
					this.getTemplateObjectByName("designer_container").style.display = "block";
					// this.getTemplateObjectByName("designer_tab").style.borderBottomColor = "#CFCFCF";

					this.resize_designer();
					
					if(sActiveSource) this.WriteContent(sActiveSource,"designer");
					break;
				case 2:
					this.getTemplateObjectByName("source_container").style.display = "block";
					// this.getTemplateObjectByName("source_tab").style.borderBottomColor = "#CFCFCF";
					this.resize_preview_source();
					if(sActiveSource) this.getTemplateObjectByName("preview_source").value = sActiveSource;
					break;
				case 3:
					this.getTemplateObjectByName("preview_container").style.display = "block";
					// this.getTemplateObjectByName("preview_tab").style.borderBottomColor = "#CFCFCF";
					this.resize_preview_frame();
					if(sActiveSource){
						sActiveSource = sActiveSource.replace(/<form/gi,"<form target = \"_blank\"")
						this.WriteContent(sActiveSource,"preview_frame");
					}
					break;
			}
			this.setStatus("");
		},
		RefreshSource : function(){
			var sSource = 0;
			try{
				switch(this.getProperties().showing_tab){
					case 1:
						var d = this.get_frame("designer");
						if(!d || !d.document) return 0;
						sSource = "<html>" + this.get_frame("designer").document.documentElement.innerHTML + "</html>";
						break;
					case 2:
						sSource = this.getTemplateObjectByName("preview_source").value;
						break;
				}
			}
			catch(e){
				this.setStatus("Error: " + (e.message ? e.message : e.description));
			}
			if(!sSource) sSource = this.getProperties().designer_html;
			else this.getProperties().designer_html = sSource;
			return sSource;
		},
		Prev : function(){
			
		},



		ExecFontSize : function(){
			var o = this.getTemplateObjectByName("fontsize");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			d.document.execCommand("FontSize", false, o.selectedIndex);
			o.selectedIndex = 0;
		},
		ExecFont : function(){
			var o = this.getTemplateObjectByName("fonts");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			var s = o.options[o.selectedIndex].text;
			d.document.execCommand("FontName", false, s);
			o.selectedIndex = 0;
		},
		ExecBlock : function(){
			var o = this.getTemplateObjectByName("block");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			var s = o.options[o.selectedIndex].text;
			d.document.execCommand("FormatBlock", false, "<" + s + ">");
			o.selectedIndex = 0;
		},
		ExecFontColor : function(){
			var o = this.getTemplateObjectByName("fontcolor");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			var s = o.options[o.selectedIndex].text;
			d.document.execCommand("ForeColor", false, s.toLowerCase());
			o.selectedIndex = 0;
		},
		ExecFill : function(){
			var o = this.getTemplateObjectByName("fill");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			var s = o.options[o.selectedIndex].text;
			d.document.execCommand("BackColor", false, s);
			o.selectedIndex = 0;
		},
		_handle_exec_button : function(e){
			var o = Hemi.event.getEventSource(e);
			var d = this.get_frame("designer");
			var s = o.getAttribute("button-action");
			var opt;
			var r;
			d.focus();
			// if(d.createTextRange) r = d.createTextRange();
			// if(r) r.select();
			switch(o.getAttribute("button-action")){
				case "ImageLink":
					if(this.getProperties().linkNode){
						//Hemi.log("Link HTML: " + this.getProperties().linkNode);
						//d.document.execCommand("innerHTML",false,this.getProperties().linkHtml);
						this.insertNodeAtCaret(this.getProperties().linkNode);
						this.getProperties().linkNode = 0;
					}
					else{
						this.chooseData("pickData");
					}
					break;
				case "CreateLink":
					//this.chooseData("pickData");
					//break;
				case "Indent":
				case "Outdent":
				case "InsertHorizontalRule":
				case "InsertOrderedList":
				case "InsertUnorderedList":
				case "JustifyLeft":
				case "JustifyCenter":
				case "JustifyRight":
				case "Underline":
				case "Italic":
				case "Bold":
					d.document.execCommand(s, false, opt);
					break;
				case "Save":
					this.saveType();
					break;
			}
			d.focus();
		},
		_handle_picker_loaded: function (v) {
		    v.resizeTo(475, 450);

			v.getComponentByRID("typelist").GetWideSelect().getContainer().style.height = "340px";
        },
        /// Based on Tim's answer at http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div
        ///
		insertNodeAtCaret : function(oNode) {
		    var sel, range;
		    var d = this.get_frame("designer");
		    if (d.getSelection) {
		        sel = d.getSelection();
		        if (sel.getRangeAt && sel.rangeCount) {
		            range = sel.getRangeAt(0);
		            range.deleteContents();
		
		            // Range.createContextualFragment() would be useful here but is
		            // only relatively recently standardized and is not supported in
		            // some browsers (IE9, for one)
		            range.insertNode(oNode);
		        }
		    }
		},
		pickData : function(s,o,i,w){
		
			var d = this.get_frame("designer");
			this.getProperties().lastPickerPath = w.getPath();
			this.getFocus();
			d.focus();
			//var oG = o.group;
			var w = 250;
			var h = 250;

			var oA = d.document.createElement("a");
			var oI = d.document.createElement("img");
			oA.appendChild(oI);
			var sOrg = AM6Client.dotPath(AM6Client.currentOrganization);
			var sThumbUrl = "/AccountManagerService/thumbnail/" + sOrg + "/Data" + o.groupPath + "/" + o.name + "/" + w + "x" + h;
			
			var sUrl = "/AccountManagerService/media/" + sOrg + "/Data" + o.groupPath + "/" + o.name;
			var sIco = 0;
			if(!o.mimeType.match(/^image/)){
				oI.setAttribute("src","/AccountManagerService/Media/Icons/Crystal/128x128/Crystal_Clear_mimetype_misc.png");
				oI.setAttribute("border","0");
				oI.setAttribute("width","128");
				oI.setAttribute("height","128");
				oI.setAttribute("title",o.name);
				
			}
			else{
				oI.setAttribute("src",sThumbUrl);
			}

			oA.setAttribute("href",sUrl);
			oA.setAttribute("target","blank");
			oA.setAttribute("title",o.name);
			//d.document.body.appendChild(oA);

			this.getProperties().linkNode = oA;
		},
		chooseData : function(sFN){
			var sPath = (this.getProperties().lastPickerPath ? this.getProperties().lastPickerPath : "~/GalleryHome");
			var oProps = {openerId:this.getObjectId(),defaultPath:sPath,listType:"Data",picker:1,pickFunction:sFN,listId:0};
			Hemi.app.createWindow("ManageList", "${dwac.path}[ListDatas.xml]", "DataPicker", 0, 0, oProps, this._prehandle_picker_loaded)
			.then((oW)=>{
	            if (oW) {
	            	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	            	// Destroy the window when closed
	            	//
	            	oW.setHideOnClose(0);
	            }
            });
		},
		
		/// Copy from BaseFields.xml
		///
		getPath : function(){
			var o = this.getElementByRID("path"), s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s) s = "~/" + this.getProperties().typeName + "s";
			}
			return s;
		},
		/// Copy from BaseFields.xml
		///
		saveType : function(){
			this.synchronizeForm();
			var o = this.getBean("rocketType");
			this.getElementByRID("path").className = "rocket-text";
			this.getElementByRID("name").className = "rocket-text";
			this.setStatus("");
			if(!this.validateForPattern("name","not-empty")){
				this.getElementByRID("name").className = "rocket-text rocket-text-error";
				this.setStatus("Name cannot be empty");
				return;
			}
			var sPath = this.getPath();
			var oGroup = AM6Client.make("GROUP","DATA",sPath);
			if(!oGroup || oGroup == null){
				this.getElementByRID("path").className = "rocket-text rocket-text-error";
				this.setStatus("Invalid group");
				return;
			}

			/// TODO: Don't use the different bean class for the AM group object
			///
			o.groupPath = oGroup.path;
			
			if(this.prepareSave && !this.prepareSave(o)){
				Hemi.logError("Prepare save failed for type " + this.getProperties().typeName);
				return;
			}
			
			var sAct = "add", bAct = 0;
			if(o.objectId) sAct = "update";
			if(sAct.match(/^add$/) && this.addType){
				Hemi.log("Designer Save Type 1");
				bAct = this.addType(o);
			}
			else{
				Hemi.log("Designer Save Type 2");
				bAct = AM6Client.update(o.nameType, o);
			}
			
			if(bAct){
				if(bAct != -1) this.postProcess();
				else this.setStatus("Processing ...");
			}
			else{
				this.setStatus("Failed to " + sAct);
			}
		
		},
		/// Copy from BaseFields.xml
		///
		prepareSave : function(o){
			/// For updating, if a detailed binary object is being saved, don't allow to save here - only allow through the uploader
			/// therefore, save as detailsOnly
			///
			Hemi.log("Designer Prepare Save ...");
			//"preview_source"
			var iTab = this.getProperties().showing_tab;
			if(iTab != 3){
				this.ShowTab(3);
			}
						
			o.mimeType = "text/plain";
			var sBBCode = bbConverter.convertNodes(this.get_frame("preview_frame").document.body.childNodes);
			
			if(iTab != 3) this.ShowTab(iTab);
			
			o.dataBytesStore = uwm.base64Encode(sBBCode);
			//Hemi.log("Designer Prepare Save Data: " + o.dataBytesStore);
			return 1;
		},
		/// Modified from DataFields.xml
		///
		addType : function(o){
			Hemi.log("Add rich text type: " + o.name + ":" + o.mimeType);

			var v = "";
			if(o.mimeType && o.mimeType.match(/^text/)){
				return AM6Client.update("DATA",o);
			}
			return 0;
		},
		/// Copy from BaseFields.xml
		///
		postProcess : function(){
			var o = this.getBean("rocketType");
			Hemi.log("Post process " + o.name);
			var n = AM6Client.getByName("DATA",AM6Client.find("GROUP","DATA",o.groupPath).objectId,o.name);
			if(n != null){
				this.clearBean("rocketType");
				this.setBean(n,"rocketType");
			}
			this.synchronizeForm(1);
			var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
			if(oOpener){
				if(oOpener.refreshList) oOpener.refreshList();
				if(oOpener.handleDesignerSave) oOpener.handleDesignerSave(o);
			}
			if(this.Close) this.Close();
		},
		setup_designer : function(){
				try{
					var d = this.get_frame("designer");
					if(!d || !d.document){
						alert("SetupDesigner: Unable to find document");
						return;
					}
					this.ShowTab(1);
					
					var o = d.document;
					o.documentElement.style.borderWidth = "0px";
					o.documentElement.style.padding = "0px";
					o.body.style.border = "0px solid black";
					o.body.style.padding = "0px";
					
					this.local_handle_blur = this.disable_designer;
					
					this.resize_designer();
				
					this.PrepDesigner();
				}
				catch(e){
					this.setStatus("Error setting up designer: " + (e.message ? e.message : e.description));
				}
			},
				
				PrepDesigner : function(){
					var d = this.get_frame("designer");
					var o = this.getBean("rocketType");
					if(!d || !d.document){
						setTimeout("Hemi.registry.ObjectRegistry.getObject('" + this.getObjectId() + "').PrepDesigner()",50);
						this.setStatus("Deferring Preparation ...");
						return;
					}
					var sCSS = "<link rel=\"stylesheet\" href=\"/AccountManagerService/Style/uwm.css\" type=\"text/css\" title = \"uwm\" /><link rel=\"stylesheet\" href=\"/AccountManagerService/Style/rocket.css\" type=\"text/css\" />";
 					if(o && o.dataBytesStore){
						this.WriteContent("<html><head>" + sCSS + "</head><body>" + bbConverter.import(uwm.base64Decode(o.dataBytesStore)) + "</body></html>","designer");
					}
					else if(this.getProperties().designer_html){
						this.WriteContent(this.getProperties().designer_html,"designer");
					}
					else if(this.getProperties().control_buffer){
						this.WriteContent("<html><body>" + this.getProperties().control_buffer + "</body></html>","designer");
					}
					else{
						this.WriteContent("<html><head>" + sCSS + "<body><h1>Title</h1><h2>Sub Title</h2><div>[ body ]</div></body></html>","designer");
					}
					this.setStatus("");
		},
		WriteContent : function(s,n){
			try{
					var d = this.get_frame(n);
					if(!d || !d.document){
						alert("WriteContent: Unable to find document; " + this.WriteContent.caller);
						return;
					}
					var o = d.document;
					o.open();
					o.write(s);
					o.close();
					this.enable_designer();
				}
				catch(e){
					this.setStatus("Unexpected UI Error: " + (e.message ? e.message : e.description));
				}

		},
		enable_designer : function(b){
		
			try{
			
				var d = this.get_frame("designer");
				if(d){
					d.document.designMode = "on";
					d.focus();
					//this.getTemplateObjectByName("notes").innerHTML = "Enable";
				}
				else{
					this.setStatus("Could not find designer document to enabled");
				}
			}
			catch(e){
				this.setStatus("Error enabling designer: " + (e.message ? e.message : e.description));
			}
		},
		disable_designer : function(){
			if(this.getIsClosed()) return;
			try{
				var d = this.get_frame("designer");
				//document.title = "disable " + (new Date()).getTime();
				if(d){
					//this.getProperties().keep_buffers = 1;				
					// var h = d.document.body.innerHTML;
					//this.loadTemplate(g_application_path + "Templates/DesignerProxy.xml");
				}
			}
			catch(e){
				this.setStatus("Error enabling designer: " + (e.message ? e.message : e.description));
			}
		},
		resizers : function(){
			switch(this.getProperties().showing_tab){
				case 1:
					this.resize_designer();
					break;
				case 2:
					this.resize_preview_source();
					break;
				case 3:
					this.resize_preview_frame();
					break;

				}
		},
		resize_designer_delay : function(){
			setTimeout("Hemi.registry.service.getObject('" + this.getObjectId() + "').resize_designer()",50);
		},
		
		resize_designer : function(){
			this.resizeFrame("designer",0,0);
		},

		resize_preview_frame : function(){
			this.resizeFrame("preview_frame",0,0);
		},
		resize_preview_source : function(){
			this.resizeFrame("preview_source",10,0);
		}
		

	]]>
	</embedded-script>

</Template><Template id="Dashboard.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<div rid="authRequired" style="display:none;">
	<!--
	<h2>Authentication Required</h2>
	-->
	</div>
	<div class="uwm-box-border uwm-content" rid="profileCont" template="/AccountManagerService/media/Public/Data/Home/steve/DWAC/Templates/Blank.xml"/>
	<div class="uwm-box-border uwm-content" rid="articleCont" template="/AccountManagerService/media/Public/Data/Home/steve/DWAC/Templates/Blank.xml"/>
	<!--
	<div rid = "galleryContainer" style = "display:none;height: 500px;width:100%;border: 1px dotted #CFCFCF;">
	</div>
	-->
	<embedded-script><![CDATA[
		template_init : function(){
			Hemi.message.service.subscribe(this, "onsessionrefresh", "refreshSession");
			this.refreshSession();
			/// window.setTimeout("Hemi.registry.service.getObject('" + this.getObjectId() + "').refreshSession()",250);
		},
		template_destroy : function(){
			Hemi.message.service.unsubscribe(this, "onsessionrefresh", "refreshSession");
			if(window.galleryView) window.galleryView.destroy();
		},
		refreshSession : function(s,v){
			var _s = this.getProperties(),bR = uwm.rule("IsLoggedIn"), oA = this.getElementByRID("authRequired");
			bR.then((b)=>{
				Hemi.logDebug("Handle Session Refresh - Comparing " + b + " to " + _s.lastState);
				if(!oA) return;
				oA.style.display = (b ? "none" : "block");
				/// this.getElementByRID("galleryContainer").style.display = (!b ? "none" : "block");
				if(b != _s.lastState){
					if(window.galleryView) window.galleryView.destroy();
					/// if(b) this.setupCanvas();
					
					this.getComponentByRID("profileCont").loadTemplate('${dwac.path}','Profile.xml');
					this.getComponentByRID("articleCont").loadTemplate('${dwac.path}','RecentArticles.xml');
				}
			});
		},
		setupCanvas : function(){
			window.g_gallery_container = this.getElementByRID("galleryContainer");
			if(!window.galleryView){
				var sTxt = Hemi.xml.getText("/AccountManagerService/Scripts/canvasGallery.js");
				eval(sTxt);
				
				/// timeout is set to coincide with any initial transition animation that alters the page layout, but which doesn't kick off a page resize
				///
				///window.setTimeout(galleryView.alignViews,350);
			}
		},
		template_destroy : function(){
			if(window.galleryView){
				window.galleryView.destroy();
				delete window.galleryView;
			}
		}
	]]></embedded-script>
</Template><Template id="Console.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
  <div rid="contentContainer" class="content">
  	<div class="uwm-box-border">
	  	<div class="console-history" component="wideselect" rid="typelist">
		</div>
		<div rid="commandContainer" class="command"><span rid="prompt" class="prompt">Anonymous:$</span><input class="console-text" type="text" rid="commandLine"/></div>
	</div>
  </div>
	<embedded-script>
		<![CDATA[
			template_init: function(){
				var _o = this.getObjects();
				_o.console = uwm.shell(this.getTemplateSpace(), this.rid.contentContainer, this.rid.commandContainer, this.rid.typelist, this.rid.prompt, this.rid.commandLine);
				uwm.addShellCommands(_o.console);
			},
			template_destroy : function(){
				var _o = this.getObjects();
				if(_o.console) _o.console.destroy();
			}
		
		]]>
	</embedded-script>
</Template><Template id="BusinessMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>
	<div rid="goal">
	</div>
	<div rid="budget">
	</div>
	<div rid="schedule">
	</div>
	<div rid="case">
	</div>	
	<div rid="requirement">
	</div>
	<div rid="model">
	</div>
	<div rid="estimate">
	</div>	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				//this.serveTransaction("change_bus", Hemi.data.io.service.getBusType().ONLINE);
				this.AddTab("goal","Goals",this.scopeHandler("loadGoalTab",0,1,1));
				this.AddTab("budget","Budgets",this.scopeHandler("loadBudgetTab",0,1,1));
				this.AddTab("schedule","Schedules",this.scopeHandler("loadScheduleTab",0,1,1));
				this.AddTab("case","Cases",this.scopeHandler("loadCaseTab",0,1,1));
				this.AddTab("requirement","Requirements",this.scopeHandler("loadRequirementTab",0,1,1));
				this.AddTab("model","Models",this.scopeHandler("loadModelTab",0,1,1));
				this.AddTab("estimate","Estimates",this.scopeHandler("loadEstimateTab",0,1,1));
				this.ShowTab(0);
				this.loadGoalTab();
			},
			loadTimesTab : function(o){
				this.loadTab("Time",o);
			},
			loadCostsTab : function(o){
				this.loadTab("Cost",o);
			},
			loadGroupsTab : function(o){
				this.loadTab("Group",o);
			},
			loadUsersTab : function(o){
				this.loadTab("User",o);
			},
			loadValidationRuleTab : function(o){
				this.loadTab("ValidationRule",o);
			},
			loadFormTab : function(o){
				this.loadTab("Form",o);
			},
			loadFormElementTab : function(o){
				this.loadTab("FormElement",o);
			},
			loadTicketTab : function(o){
				this.loadTab("Ticket",o);
			},
			loadLifecycleTab : function(o){
				this.loadTab("Lifecycle",o);
			},
			loadStoryTab : function(o){
				this.loadTab("Story",o);
			},
			loadProjectTab : function(o){
				this.loadTab("Project",o);
			},
			loadModuleTab : function(o){
				this.loadTab("Module",o);
			},
			loadStageTab : function(o){
				this.loadTab("Stage",o);
			},
			loadMethodologyTab : function(o){
				this.loadTab("Methodology",o);
			},
			loadProcessTab : function(o){
				this.loadTab("Process",o);
			},
			loadProcessStepTab : function(o){
				this.loadTab("ProcessStep",o);
			},
			loadWorkTab : function(o){
				this.loadTab("Work",o);
			},
			loadTaskTab : function(o){
				this.loadTab("Task",o);
			},
			loadEstimateTab : function(o){
				this.loadTab("Estimate",o);
			},
			loadModelTab : function(o){
				this.loadTab("Model",o);
			},
			loadNoteTab : function(o){
				this.loadTab("Note",o);
			},
			loadDataTab : function(o){
				this.loadTab("Data",o);
			},
			loadArtifactTab : function(o){
				this.loadTab("Artifact",o);
			},
			
			loadCaseTab : function(o){
				this.loadTab("Case",o);
			},
			loadRequirementTab : function(o){
				this.loadTab("Requirement",o);
			},
			loadResourceTab : function(o){
				this.loadTab("Resource",o);
			},
			loadScheduleTab : function(o){
				this.loadTab("Schedule",o);
			},
			loadBudgetTab : function(o){
				this.loadTab("Budget",o);
			},
			loadGoalTab : function(o){
				this.loadTab("Goal",o);
			},
			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
				});
			}
		]]>
	</embedded-script>
</Template><Template/><Template id="AssetMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>
	<div rid="group">
	</div>	
	<div rid="data">
	</div>	
	<div rid="note">
	</div>
	<div rid="tag">
	</div>	
	<embedded-script>
		<![CDATA[
			template_init: function(){
				this.AddTab("data","Data",this.scopeHandler("loadDataTab",0,1,1));
				this.AddTab("group","Groups",this.scopeHandler("loadGroupsTab",0,1,1));
				this.AddTab("note","Notes",this.scopeHandler("loadNoteTab",0,1,1));
				this.AddTab("tag","Tags",this.scopeHandler("loadTagTab",0,1,1));

				this.ShowTab(0);
				this.loadDataTab();
			},
			loadDataTab : function(o){
				this.loadTab("Data",o);
			},
			loadGroupsTab : function(o){
				this.loadTab("Group",o);
			},
			loadNoteTab : function(o){
				this.loadTab("Note",o);
			},
			loadTagTab : function(o){
				this.loadTab("Tag",o);
			},

			loadTab : function(s, o){
				var c = this.getElementByRID(s.toLowerCase());
				if(c.loaded) return;
				c.loaded = 1;
				
				var oDiv = document.createElement("div");
				c.appendChild(oDiv);
				Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
				.then((ac)=>{
					ac.setTemplateIsSpace(1);
					ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
				});
			},
			DoLogout : function(){
				window.uwm.logout();
				window.uwm.operation("ContinueWorkflow");
			}
		]]>
	</embedded-script>
</Template><Template id="AlertMain.xml">
	<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	
<div class="uwm-box-border uwm-content">
	<import-xml src="Fragments/TabTools.xml" id="TabTools"/>
	<p style="clear:both;font-size:0px;margin:0px;"/>
	<span rid="tabs">
	<div rid="activity">
	</div>
	<div rid="person">
	</div>
	<div rid="role">
	</div>
	</span>
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'StatusFrag.xml']/span" src="${dwac.path}"/>
</div>
<embedded-script><![CDATA[
	template_init : function(){
		if(!uwm.rule("IsLoggedIn")){
			this.refreshSession(0);
		}
		else{
			Hemi.message.service.subscribe(this, "onsessionrefresh", "handle_session_refresh");
			this.AddTab("activity","Activities",this.scopeHandler("loadActivitiesTab",0,1,1));
			this.AddTab("person","Persons",this.scopeHandler("loadPersonsTab",0,1,1));
			this.AddTab("role","Roles",this.scopeHandler("loadRolesTab",0,1,1));
			this.scopeHandler("load_object_tab",0,0,1);

			this.ShowTab(0);
			this.loadActivitiesTab();
			
			this.checkDefaultConfig();
		}
	},
	newData : function(sName, sDesc, sMime, sData, sPath){
		var o = new org.cote.objects.dataType();
		o.name = sName;
		o.blob = true;
		o.nameType = "DATA";
		o.dataBytesStore = uwm.base64Encode(sData);
		o.groupPath = sPath;
		o.mimeType = sMime;
		o.description = sDesc;
		o.id = 0;
		o.createdDate = new Date();
		o.modifiedDate = o.createdDate;
		o.expiryDate = o.createdDate;
		return o;
	},
	newRole : function(sName, sType, oPar){
		var o = new org.cote.objects.baseRoleType();
		o.id = 0;
		o.name = sName;
		o.parentId = oPar.id;
		o.nameType = "ROLE";
		o.roleType = sType;
		return o;
	},
	checkDefaultConfig : function(){

		uwm.getUser().then((oP)=>{
			var bConf = AM6Client.getAttributeValue(oP,"first-contact-v1-config","false");
			if(bConf.match(/^false$/gi)){
			
				var sDEmail = "[h1]Unfortunate News[/h1][div]It is with a heavy heart that ${informant} has indicated ${myname} passed away. ${informant} shares this information: ${tidings}. Understanding many will want to reach out to lend and receive support, and find out more information, please direct your questions to ${primary}.[/div]";
				var sBEmail = "[h1]My Unfortunate News[/h1][div]It is with a heavy heart that I have passed away. ${informant} shares this information: ${tidings}. Understanding many will want to reach out to lend and receive support, and find out more information, please direct your questions to ${primary}.[/div]";
				var sMEmail = "[h1]My Medical News[/h1][div]You are receiving this message because I have become incapacitated due to a medical condition. ${informant} shares this information: ${tidings}. Understanding many will want to reach out to lend and receive support, and find out more information, please direct your questions to ${primary}.[/div]";
				var sDText = "First Contact: ${myname} has passed away";
				var sBText = "First Contact: ${myname} has passed away";
				var sMText = "First Contact: ${myname} is in the hospital";
				var oD = AM6Client.find("GROUP","DATA","~/Data");
				AM6Client.update("DATA", this.newData("BEREAVEMENT Email", "Template for bereavement email", "text/plain", sBEmail, oD.path));
				AM6Client.update("DATA", this.newData("DEATH Email", "Template for death email", "text/plain", sDEmail, oD.path));
				AM6Client.update("DATA", this.newData("MEDICAL Email", "Template for medical email", "text/plain", sMEmail, oD.path));
				AM6Client.update("DATA", this.newData("BEREAVEMENT Text", "Template for bereavement text", "text/plain", sBText, oD.path));
				AM6Client.update("DATA", this.newData("DEATH Text", "Template for death text", "text/plain", sDText, oD.path));
				AM6Client.update("DATA", this.newData("MEDICAL Text", "Template for medical text", "text/plain", sMText, oD.path));
	
				var oParent = uwm.getDefaultParentForType("Role",AM6Client.user("ROLE","USER"));
				AM6Client.update("ROLE",this.newRole("Primary Contacts", "PERSON", oParent));
				AM6Client.update("ROLE",this.newRole("Secondary Contacts", "PERSON", oParent));
				AM6Client.addAttribute(oP,"first-contact-v1-config","true");
				AM6Client.update("USER",oP);
			}
		});
	},
	provideSelectItem : function(o){
		if(!o.nameType && o.data) o = o.data;
		if(!o.nameType.match(/^(role|person)$/gi)) return;
		var v = this.getElementByRID("tab-" + o.id);
		if(!v || v == null){
			if(!o.populated) o = AM6Client.get(o.nameType, o.id);
			this.provideOpenItem(o);
		}
		else this.ShowTab(v.tab_index);
	},
	provideOpenItem : function(o){
		var v = this.getElementByRID("tab-" + o.id);
		if(v && v!=null) this.provideSelectItem(o);
		else this.newTab(o);
	},
	closeRole : function(c, o){
		return this.closePerson(c,o,1);
	},
	closePerson : function(c, o,b){
		var v = this.getElementByRID("tab-" + o.id);
		/// Need to destroy the underlying XHTML component 
		/// which isn't returned via getComponentByRID, because that's the application component
		/// but not when it's only an XHTMLComponent
		/// 
		var vc =this.getTemplateSpace().getSpaceObjectByName("tab-" + o.id);
		if(vc && vc.object) vc = vc.object;
		if(!v || v == null) return;
		this.ShowTab((b?2:1));
		c.destroy();
		
		if(v.tab_index){
			var t = this.getObjects().tabs[v.tab_index].tab;
			t.parentNode.removeChild(t);
			this.getObjects().tabs[v.tab_index] = null;
		}
		
		if(vc) vc.destroy();
	},
	handleOpenPersonList : function(o){
		if(o.resizeList) o.resizeList();
		var aH = ["button_delete","button_new","button_open","button_design","path","button_spacer_1","button_spacer_2"];
		for(var i = 0; i < aH.length; i++){
			c = o.getElementByRID(aH[i]);
			if(!c) alert("invalid: " + aH[i]);
			else o.getElementByRID(aH[i]).style.display = "none";
		}
	},
	handleOpenPerson : function(o){
		/// Hide all the fields we're not interested in using
		///
		if(!o.getElementByRID) return;
		var aH = ["btnFact","aliasCont","suffixCont","genderCont","attributePicker","accountPicker","userPicker","personPicker","pathCont","descriptionCont","titleCont","prefixCont"],c;
		for(var i = 0; i < aH.length; i++){
			c = o.getElementByRID(aH[i]);
			if(!c) alert("invalid: " + aH[i]);
			else o.getElementByRID(aH[i]).style.display = "none";
		}
		/// Toggle open the contact field
		///
		o.toggleField("contactPickerToggle","contactPickerContent");
	},
	newTab : function(o){
		this.getObjects().ctxObj = o;
		var oD = document.createElement("div");
		oD.setAttribute("rid","tab-" + o.id);
		var oT = this.getElementByRID("tabs");
		oT.appendChild(oD);
	   	this.extendSpaceConfiguration(oT.childNodes[oT.childNodes.length-1]);
	   	this.AddTab("tab-" + o.id,o.name,this._prehandle_load_object_tab);
	   	this.ShowTab(this.getObjects().tabs.length-1);
	   	this._handle_load_object_tab(oD);
	},
	_handle_load_object_tab : function(s,o){
		var ctx = this.getObjects().ctxObj;
		if(!ctx) return;
		delete this.getObjects().ctxObj;
		
		var c = this.getElementByRID("tab-" + ctx.id);
		if(c.loaded) return;
		c.loaded = 1;
		
		var oDiv = document.createElement("div");
		c.appendChild(oDiv);
		Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
		.then((ac)=>{
			ac.setTemplateIsSpace(1);
			ac.getProperties().openerId = this.getObjectId();
			ac.getProperties().viewType = ctx;
			
			if(ctx.nameType == "PERSON"){
				ac.provideClose = this.scopeHandler("closePerson",0,1,1);
				ac.local_template_init = this.scopeHandler("handleOpenPerson",0,1,1);
				ac.loadTemplate('${dwac.path}','Person.xml');
			}
			else if(ctx.nameType == "ROLE"){
				ac.provideClose = this.scopeHandler("closeRole",0,1,1);
				ac.loadTemplate('${dwac.path}','Role.xml');
			}
		});

	},
	template_destroy : function(){
		Hemi.message.service.unsubscribe(this, "onsessionrefresh", "handle_session_refresh");
	},
	loadActivitiesTab : function(o){
		this.loadTab("Activity",o);
	},
	loadPersonsTab : function(o){
		this.loadTab("Person",o);
	},
	loadRolesTab : function(o){
		this.loadTab("Role",o);
	},
	loadTab : function(s, o){
		var c = this.getElementByRID(s.toLowerCase());
		if(c.loaded) return;
		c.loaded = 1;
		
		var oDiv = document.createElement("div");
		c.appendChild(oDiv);
		Hemi.app.createApplicationComponent(0, oDiv, this.getTemplateSpace())
		.then((ac)=>{
			ac.setTemplateIsSpace(1);
			ac.getProperties().openerId = this.getObjectId();
			if(s.match(/^(person|role)$/gi)){
				//ac.getProperties().defaultPath = "~/Persons";
				ac.decorateListItemName = this.decoratePersonItem;
				ac.provideOpenItem = this.scopeHandler("provideOpenItem",0,1,1);
				ac.provideSelectItem = this.scopeHandler("provideSelectItem",0,1,1);
				ac.local_template_init = this.scopeHandler("handleOpenPersonList",0,1,1);
				ac.loadTemplate(uwm.getApiTypeView(s) + "/Forms/List" + s + "s.xml");
			}
			else if(s.match(/^activity$/gi)){ 
				ac.loadTemplate('${dwac.path}','AlertActivities.xml');
			}
		});
		
	},
	decoratePersonItem : function(o){
		/*
		var sF = accountManager.getAttributeValue(o,"firstName");
		var sM = accountManager.getAttributeValue(o,"middleName");
		var sL = accountManager.getAttributeValue(o,"lastName");
		if(sF || sM || sL) return (sF ? sF : "") + (sM ? " " + sM : "") + (sL ? " " + sL : "");
		*/
		return o.name;
	},
	refreshSession : function(b){
		if(typeof b == "undefined") b = uwm.rule("IsLoggedIn");
		if(!b) this.loadTemplate('${dwac.path}','UnauthMain.xml');
	},
	handle_session_refresh : function(s,v){
		this.refreshSession();
	}
	
]]></embedded-script>
</Template><Template id="AlertActivities.xml">
<import-xml src="Templates/TemplateTools.xml" id="TemplateTools"/>
	<!--
	<span template = "/AccountManagerService/media/Public/Data/Home/steve/DWAC/Fragments/Profile.xml"></span>
	-->
	<div class="rocket-column-2">
		<p>
			Make Contact:
		</p>
		<p>
			<img rid="btnAlert" style="border:1px dotted transparent;margin:0px;padding:0px;" src="/AccountManagerService/Media/Icons/emergency_100x100.png" width="100" height="100" title="Alert!"/>
			<!--
			<br />
			<input style = "width:100px;font:14pt Arial;margin:0px;padding:0px;" type = "text" class = "rocket-text" rid = "alertToken" />
			-->
		</p>
	</div>
	<div class="rocket-column-2" rid="credentialContainer">
		<p>
			Emergency Token:
		</p>
		<p>
			<input type="button" class="rocket-button" value="Reset Token" onclick="${this}.resetCredential()"/>
			<input type="button" class="rocket-button" value="Validate" onclick="${this}.validateToken()"/>
		</p>
		<p style="float:none;margin-left: 145px !important;">An emergency token allows non-members to notify your contacts</p>
	</div>
	<div class="rocket-column-2">
		<p>
			Upload:
		</p>
		<p>
			<import-dxml context-path="/DWAC/fragments/fragment[@id = 'DndFormFragment.xml']/span" src="${dwac.path}"/>
			<br/>
			<a href="/AccountManagerService/media/Public/Data/Home/steve/DWAC/Templates/FirstContactTemplate.xlsx" target="_blank">Contact Template</a>
			<br/>
			<b>Note:</b> The uploaded file name must end with <i>FirstContactTemplate.xlsx</i> or <i>FirstContactTemplate.csv</i>
			
		</p>
	</div>

	<div class="rocket-column-2">
		<p>
			Template:
		</p>
		<p>
			<a href="/AccountManagerService/media/Public/Data/Home/steve/DWAC/Templates/FirstContactTemplate.xlsx" target="_blank">Download FirstContact Template</a>
		</p>
	</div>
	<p style="clear:both;font-size:0px;margin:0px;"/>
	
	<import-dxml context-path="/DWAC/fragments/fragment[@id = 'StatusFrag.xml']/span" src="${dwac.path}"/>



<embedded-script><![CDATA[
	template_init : function(){
		this.scopeHandler("picker_loaded", 0, 0, 1);
		this.getElementByRID("dndPath").placeholder = "~/Data";
		this.getElementByRID("dndPathCont").style.display = "none";
		this.resizeDndTarget(100,100);
		this.getElementByRID("uploadprogress").style.display = "none";
		this.getProperties().dndHandler = "handleDnd";
		this.setStatus("Drag a list of contacts into the target area");
		this.getElementByRID("btnAlert").onmouseover = function(e){
			var o = Hemi.event.getEventSource(e);
			o.style.border = "1px solid #00FF00";
		};
		this.getElementByRID("btnAlert").onmouseout = function(e){
			var o = Hemi.event.getEventSource(e);
			o.style.borderColor = "transparent";
		};

	},
	template_destroy : function(){
		this._prehandle_picker_loaded = 0;
	},
	_handle_picker_loaded: function (v) {
	    v.resizeTo(475, 450);

		v.getComponentByRID("typelist").GetWideSelect().getContainer().style.height = "340px";
       },

 
	handleDnd : function(){
		AM6Client.clearCache("DATA",1);
		this.setStatus("Upload complete");
		
	},
	/// Need to make this a fragment since it's starting to get repeated for non BaseType forms
	///
	toggleField : function(l, n){
		var lbl =  this.getElementByRID(l);//(typeof l == "string" ? this.getElementByRID(l) : l);
		var cnt =  this.getElementByRID(n);//(typeof n == "string" ? this.getElementByRID(n) : n);
		var b = cnt.mark;
		var s = (b ? "[ - ]" : "[ + ]");
		var d = (b ? "block" : "none");
		cnt.mark = (b ? 0 : 1);
		Hemi.xml.setInnerXHTML(lbl,s);
		cnt.style.display = d;
		if(!lbl.mark){
			var ctl = this;
			lbl.mark = 1;
			var sL = l;
			var sN = n;
			lbl.onclick = function(){
				ctl.toggleField(sL,sN);
				ctl.resizeForm();
			};
		}
		//this.resizeForm();
	},
	handleOpenCredential : function(oW){
		
	},
	validateToken : function(){
		this.pickText(this,"Token","validateTokenValue","");
	},
	validateTokenValue : function(s){
		if(!s || s.length == 0) return;
		var b = AM6Client.validateMaterialToken("GROUP",s);
		if(b) this.setStatus("Token is valid");
		else this.setStatus("Token is not valid");
		
	},
	resetCredential : function(){
		var o = AM6Client.find("GROUP","DATA","~/Persons");
		/// Using anything other than a USER or GROUP for a credential attachment is not supported at the moment
		///
		/// AM6Client.userPerson();
		var oProps = {openerId:this.getObjectId(),viewType:o,tokenMode:1,materialToken:1};
		Hemi.app.createWindow(o.name + " Credentials", "${dwac.path}[CredentialForm.xml]", "Credential-" + o.id, 0, 0, oProps, this.scopeHandler("handleOpenCredential",0,1,1))
		.then((oW)=>{
	           if (oW) {
	           	oW.resizeTo(475, 400);
	           	Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
	           	oW.setHideOnClose(0);
	           }
          });
	
	},
	pickText : function(o,sL,sH, sDV){
		Hemi.app.createWindow("Picker","${dwac.path}[TextPicker.xml]","ValidateToken",0,0,{pickerValue:sDV,pickerLabel:sL,picker_handler:sH,openerId:o.getObjectId()})
		.then((oW)=>{
			if(!oW) return;
			oW.setHideOnClose(0);
			oW.resizeTo(475,100);
			oW.center();
			oW.setIsModal(true);
			oW.hideButtons();
		});
	}
	
]]></embedded-script>
</Template></Templates>
</DWAC>
