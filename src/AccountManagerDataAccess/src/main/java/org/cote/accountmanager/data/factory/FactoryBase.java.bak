package org.cote.accountmanager.data;

import java.util.ArrayList;
import java.util.List;

import org.cote.accountmanager.objects.ProcessingInstructionType;

public abstract class FactoryBase {

	private String selectFullString = null;
	private String selectIdString = null;
	private String selectNameString = null;
	private String updateFullString = null;
	private String selectAggregateString = null;
	private boolean scopeToOrganization = true;

	private String tableName = null;
	private List<String> fields = new ArrayList<String>();
	private List<String> selectFields = new ArrayList<String>();

	private int addCounter = 0;
	public boolean spoolAdd = false;
	
	private DataTable dataTable = null;
	private DBFactory.CONNECTION_TYPE connectionType = DBFactory.CONNECTION_TYPE.UNKNOWN;

	public FactoryBase()
	{

	}
	public void Destroy()
	{

	}


	public String getSelectString(ProcessingInstructionType instruction)
	{
		return selectFullString;
	}
	public String getUpdateString(ProcessingInstructionType instruction)
	{
		return updateFullString;
	}

	public boolean insert(DataRow row)
	{
		//bulk_insert.AddRow(row);
		if (spoolAdd == false)
		{
			addCounter = 0;
			///return bulk_insert.Insert();
			return false;
		}
		return true;
	}
	public void writeSpool()
	{
		if (spoolAdd == true)
		{
			addCounter = 0;
			//bulk_insert.Insert();
		}
	}
	protected DataRow NewRow()
	{
		return dataTable.newRow();
	}

	protected boolean getCanSelectColumn(String column_name)
	{
		return true;
	}
	protected boolean getCanUpdateColumn(String column_name)
	{
		return true;
	}
	protected void Initialize()
	{
		if (tableName == null) throw new DataAccessException("TableName is not specified");
		
		/// Load DataTable meta
		///
		
		/*
		bulk_insert = new Core.Data.SqlBulkInsert(
			new Core.Database.DataProvider(),
			//context.ConnectionString,
			TableName
		);
		bulk_insert.DatabaseType = context.DatabaseType;
		bulk_insert.AutoInsert = true;
		bulk_insert.BulkSize = 100;
		bulk_insert.BatchSize = 25;
		bulk_insert.Prepare();
		*/
		fields.clear();

		StringBuffer buff = new StringBuffer();
		StringBuffer ubuff = new StringBuffer();

		String lock_hint = DBFactory.getNoLockHint(connectionType);
		
		String token = DBFactory.getParamToken(connectionType);

		buff.append("SELECT #TOP# ");
		ubuff.append("UPDATE " + tableName + " SET ");
		int ucount = 0;
		int scount = 0;
		
		for (int i = 0; i < bulk_insert.Table.Columns.Count; i++)
		{
			Fields.Add(bulk_insert.Table.Columns[i].ColumnName);

			if (CanSelectColumn(bulk_insert.Table.Columns[i].ColumnName))
			{
				SelectFields.Add(bulk_insert.Table.Columns[i].ColumnName);
				if (scount > 0) buff.Append(",");
				buff.Append(bulk_insert.Table.Columns[i].ColumnName);
				scount++;
			}
			if (CanUpdateColumn(bulk_insert.Table.Columns[i].ColumnName))
			{
				if (ucount > 0) ubuff.Append(",");
				ubuff.Append(bulk_insert.Table.Columns[i].ColumnName + " = " + token + bulk_insert.Table.Columns[i].ColumnName);
				ucount++;
			}
		}
		String table_clause = " FROM " + TableName + lock_hint;
		SelectFullString = buff.ToString() + " #PAGE# " + table_clause;
		SelectIdString = "SELECT Id" + table_clause;
		SelectAggregateString = "SELECT %AGGREGATE%" + table_clause;
		SelectNameString = "Select Name" + table_clause;
		UpdateFullString = ubuff.ToString();

	}
	#endregion Initialize

	#region Get Names / Ids By Field
	internal int GetCountByField(Db.FieldMatch[] Fields, int organization_id)
	{
		return GetAggregateByField("count(*)", Fields, organization_id);
	}
	internal int GetAggregateByField(String aggregate_expression, Db.FieldMatch[] Fields, int organization_id)
	{
		int out_count = 0;

		String select_string = SelectAggregateString.Replace("%AGGREGATE%", aggregate_expression);
		System.Data.IDbConnection connection = Core.Database.DatabaseEngine.GetInstance().ConnectionPool.GetConnection();
		IDbCommand command = connection.CreateCommand();

		String clause = ProcessFields(command.Parameters, Fields);
		command.CommandText =
			select_string + " WHERE " + clause
			//+ (String.IsNullOrEmpty(match_name) == false ? " AND " + match_name + " = " + GetQueryParam(match_name) : "")
			+ (ScopeToOrganization ? " AND OrganizationId = " + organization_id : "")
		;
		//ApplicationContext.GetInstance().Log(command.CommandText);
		IDataReader reader = command.ExecuteReader();
		if (reader.Read())
		{
			if(reader.IsDBNull(0) == false) out_count = reader.GetInt32(0);
		}
		reader.Close();
		Core.Database.DatabaseEngine.GetInstance().ConnectionPool.CloseConnection(connection);

		return out_count;
	}
	protected int[] GetIdByField(String field_name, DbType field_type, object field_value, int organization_id)
	{
		return GetIdByField(new Db.FieldMatch[]{new Db.FieldMatch(field_type, field_name, field_value)}, organization_id);
	}
	protected int[] GetIdByField(Db.FieldMatch[] Fields, int organization_id)
	{
		List<int> out_ints = new List<int>();

		System.Data.IDbConnection connection = Core.Database.DatabaseEngine.GetInstance().ConnectionPool.GetConnection();
		IDbCommand command = connection.CreateCommand();

		StringBuilder match_buff = new StringBuilder();
		for (int i = 0; i < Fields.Length; i++)
		{
			if (i > 0) match_buff.Append(" AND ");
			match_buff.Append(Fields[i].Name + " = " + GetQueryParam(Fields[i].Name));
			AddParameter(command.Parameters, Fields[i].DbType, Fields[i].Name, Fields[i].Value);
		}

		command.CommandText =
			SelectIdString + " WHERE " + match_buff.ToString()
			//+ (String.IsNullOrEmpty(match_name) == false ? " AND " + match_name + " = " + GetQueryParam(match_name) : "")
			+ (ScopeToOrganization ? " AND OrganizationId = " + organization_id : "")
		;

		IDataReader reader = command.ExecuteReader();
		while (reader.Read())
		{

			out_ints.Add(reader.GetInt32(0));
		}
		reader.Close();
		Core.Database.DatabaseEngine.GetInstance().ConnectionPool.CloseConnection(connection);

		return out_ints.ToArray();
	}
	protected String[] GetNameByField(String field_name, DbType field_type, object field_value, int organization_id)
	{
		return GetNameByField(new Db.FieldMatch[] { new Db.FieldMatch(field_type, field_name, field_value) }, organization_id);
	}
	protected String[] GetNameByField(Db.FieldMatch[] Fields, int organization_id)
	{
		List<String> out_names = new List<String>();

		System.Data.IDbConnection connection = Core.Database.DatabaseEngine.GetInstance().ConnectionPool.GetConnection();
		IDbCommand command = connection.CreateCommand();

		StringBuilder match_buff = new StringBuilder();
		for (int i = 0; i < Fields.Length; i++)
		{
			if (i > 0) match_buff.Append(" AND ");
			match_buff.Append(Fields[i].Name + " = " + GetQueryParam(Fields[i].Name));
			AddParameter(command.Parameters, Fields[i].DbType, Fields[i].Name, Fields[i].Value);
		}

		command.CommandText =
			SelectNameString + " WHERE " + match_buff.ToString()
			//+ (String.IsNullOrEmpty(match_name) == false ? " AND " + match_name + " = " + GetQueryParam(match_name) : "")
			+ (ScopeToOrganization ? " AND OrganizationId = " + organization_id : "")
		;

		IDataReader reader = command.ExecuteReader();
		while (reader.Read())
		{

			out_names.Add(reader.GetString(0));
		}
		reader.Close();
		Core.Database.DatabaseEngine.GetInstance().ConnectionPool.CloseConnection(connection);

		return out_names.ToArray();

	}
	#endregion Get Names / Ids By field

	#region Delete
	protected int DeleteById(int[] id)
	{
		if (ScopeToOrganization) throw new DbException("Cannot invoke without organization id");
		return DeleteByIntField("Id", id, 0);
	}
	protected int DeleteById(int id)
	{
		return DeleteById(new int[] { id });
	}
	protected int DeleteById(int id, int organization_id)
	{
		return DeleteByIntField("Id",new int[] { id }, organization_id);
	}
	protected int DeleteById(int[] id, int organization_id)
	{
		return DeleteByIntField("Id", id, organization_id);
	}
	protected int DeleteByIntField(String field_name, int[] list, int organization_id)
	{
		if (list.Length == 0) return 0;

		System.Data.IDbConnection connection = Core.Database.DatabaseEngine.GetInstance().ConnectionPool.GetConnection();
		IDbCommand command = connection.CreateCommand();
		System.Text.StringBuilder list_buff = new StringBuilder();
		int deleted_records = 0;
		for (int i = 0; i < list.Length; i++)
		{
			if (list_buff.Length > 0) list_buff.Append(",");
			list_buff.Append(GetQueryParam(field_name + (i + 1)));
			Core.Data.DbFactory.AddParameter(Core.ApplicationContext.GetInstance().DatabaseType, command.Parameters, GetQueryParam(field_name + (i + 1)), DbType.Int32, 0, list[i]);

			if((i > 0 || list.Length ==1 ) && ((i % 250 == 0) || i == list.Length - 1)){
				
				command.CommandText =
					"DELETE FROM " + TableName + " WHERE Id IN (" + list_buff.ToString() + ")"
					+ (ScopeToOrganization ? " AND OrganizationId = " + organization_id : "")
				;
				deleted_records += command.ExecuteNonQuery();
				command.Parameters.Clear();
				list_buff.Remove(0, list_buff.Length);
			}
		}

		/*
		for (int i = 0; i < list.Length; i++)
		{
			Core.Data.DbFactory.AddParameter(Core.ApplicationContext.GetInstance().DatabaseType, command.Parameters, GetQueryParam(field_name + (i + 1)), DbType.Int32, 0, list[i]);
		}
		*/
		

		Core.Database.DatabaseEngine.GetInstance().ConnectionPool.CloseConnection(connection);

		return deleted_records;
	}
	// TODO: Need to restrict Field size for ('in') parameter
	//
	protected int DeleteByField(Db.FieldMatch[] Fields, int organization_id)
	{
		System.Data.IDbConnection connection = Core.Database.DatabaseEngine.GetInstance().ConnectionPool.GetConnection();
		IDbCommand command = connection.CreateCommand();

		String query_clause = ProcessFields(command.Parameters, Fields);
		command.CommandText =
			"DELETE FROM " + TableName + " WHERE " + query_clause
			+ (ScopeToOrganization ? " AND OrganizationId = " + organization_id : "")
		;

		int deleted_records = command.ExecuteNonQuery();

		Core.Database.DatabaseEngine.GetInstance().ConnectionPool.CloseConnection(connection);

		return deleted_records;
	}

	#endregion Delete

	#region Read Helpers
	protected DateTime ReadDate(IDataReader reader, String column_name)
	{
		int column_index = reader.GetOrdinal(column_name);
		/// Bug in Mono as of 1.2.6
		/// Checking isdbnull on date throws error
		/// //
		try
		{
			if (reader.IsDBNull(column_index)) return new DateTime(0);
			return reader.GetDateTime(column_index);
		}
		catch (Exception e)
		{
			ApplicationContext.GetInstance().LogError("Exception for field '" + column_name + "' on table " + this.TableName + " with ordinal " + column_index.ToString() + " of total column count " + reader.FieldCount + ": " + e.Message);
			/*
			ApplicationContext.GetInstance().LogError(e.StackTrace);
			
			for (int i = 0; i < reader.FieldCount; i++)
			{
				ApplicationContext.GetInstance().LogError(i.ToString() + (i == column_index ? "*":"") + " " + reader.GetName(i));
			}
			 */
			
		}
		return new DateTime(0);
	}
	protected int ReadInt16(IDataReader reader, String column_name)
	{
		return reader.GetInt16(reader.GetOrdinal(column_name));
	}
	protected int ReadInt32(IDataReader reader, String column_name)
	{
		return reader.GetInt32(reader.GetOrdinal(column_name));
	}
	protected String ReadString(IDataReader reader, String column_name)
	{
		int column_index = reader.GetOrdinal(column_name);
		if (reader.IsDBNull(column_index)) return null;
		return reader.GetString(column_index);
	}
	protected bool ReadBool(IDataReader reader, String column_name)
	{
		return reader.GetBoolean(reader.GetOrdinal(column_name));
	}
	protected long ReadLong(IDataReader reader, String column_name)
	{
		return (long)reader.GetInt32(reader.GetOrdinal(column_name));
	}
	#endregion Read Helpers

	#region Param Helpers
	protected String ProcessFields(IDataParameterCollection col, Db.FieldMatch[] Fields)
	{
		StringBuilder match_buff = new StringBuilder();
		for (int i = 0; i < Fields.Length; i++)
		{
			if (i > 0) match_buff.Append(" AND ");

			if (Fields[i].Comparator == Db.FieldMatch.FieldComparator.EQUALS)
			{
				match_buff.Append(Fields[i].Name + " = " + GetQueryParam(Fields[i].Name));
			}
			if (Fields[i].Comparator == Db.FieldMatch.FieldComparator.NOT_EQUALS)
			{
				match_buff.Append("NOT " + Fields[i].Name + " = " + GetQueryParam(Fields[i].Name));
			}
			if (Fields[i].Comparator == Db.FieldMatch.FieldComparator.LIKE)
			{
				// TODO: This is a SQL Injection Point -- need to fix or be sure to restrict
				// At the moment, assuming it's a string value
				//
				match_buff.Append(Fields[i].Name + " LIKE '" + Fields[i].Value + "'");
				continue;
			}
			else if (Fields[i].Comparator == Db.FieldMatch.FieldComparator.IN || Fields[i].Comparator == Db.FieldMatch.FieldComparator.NOT_IN)
			{
				// TODO: This is a SQL Injection Point -- need to fix or be sure to restrict
				// At the moment, assuming it's a string value
				//
				//match_buff.Append(Fields[i].Name + " IN (" + GetQueryParam(Fields[i].Name) + ")");
				String not_str = (Fields[i].Comparator == Core.Tools.AccountManager.Db.FieldMatch.FieldComparator.NOT_IN ? " NOT " : "");
				match_buff.Append(Fields[i].Name + " " + not_str + "IN (" + (String)Fields[i].Value + ")");
				continue;
			}

			AddParameter(col, Fields[i].DbType, Fields[i].Name, Fields[i].Value);
		}
		return match_buff.ToString();
	}
	protected String GetQueryParam(String param_name)
	{
		String token = Core.Data.DbFactory.GetParamToken(Core.ApplicationContext.GetInstance().DatabaseType);
		return token + param_name;
	}
	protected void AddParameter(IDataParameterCollection col, DbType type, String name, object val)
	{
		AddParameter(col, type, name, 0, val);
	}
	protected void AddParameter(IDataParameterCollection col, DbType type, String name, int size, object val)
	{
		Core.Data.DbFactory.AddParameter(Core.ApplicationContext.GetInstance().DatabaseType, col, GetQueryParam(name), type, size, val);
	}
	#endregion Param Helpers
}
