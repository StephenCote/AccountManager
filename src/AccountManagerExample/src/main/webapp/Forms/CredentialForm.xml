<Template>
<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<div rid = "objCont" class = "rocket-column-2">
		<p>
			Object:
		</p>
		<p rid = "lblObject"></p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Credential Type:
		</p>
		<p><select rid = "credentialType" disabled = "true">
		<option value = "UNKNOWN">Unknown</option>
		<option selected = "true" value = "HASHED_PASSWORD">Password</option>
		<option value = "TOKEN">Token</option>
		<option value = "CERTIFICATE">Certificate</option>
		</select></p>
	</div>
	<div class = "rocket-column-2" rid = "currentPasswordContainer">
		<p>
			Current Password:
		</p>
		<p><input type = "password" rid = "currentPassword" class = "rocket-text" /></p>
	</div>
	<div rid = "passwordCont" class = "rocket-column-2">
		<p>
			New Password:
		</p>
		<p><input type = "password" rid = "newPassword" class = "rocket-text" /></p>
	</div>
	<div rid = "confirmPasswordCont" class = "rocket-column-2">
		<p>
			Confirm New Password:
		</p>
		<p><input type = "password" rid = "confirmNewPassword" class = "rocket-text" /></p>
	</div>
	<div rid = "tokenCont" class = "rocket-column-2">
		<p>
			Token:
		</p>
		<p><input disabled = "true" type = "text" rid = "token" style = "width: 200px !important;" class = "rocket-text" /><input type = "button" class = "rocket-button" value = "Refresh" onclick = "${this}.newToken()" /></p>
		<p style = "float:none;margin-left: 145px !important;">Remember to write down this code if you are creating a new one.  Click the refresh button to create another random code.</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			
		</p>
		<p><input type = "button" value = "Create" onclick = "${this}.createCredential()" rid = "btnButton" class = "rocket-button" /></p>
	</div>
	<p rid = "lblStatus" style = "clear:both;">
	</p>
<embedded-script><![CDATA[
	template_init : function(){
		var o = this.getProperties().viewType;
		var oU = uwm.getUser();
		if(!oU) return;
		
		if(!this.setStatus) this.setStatus = this._setStatus;
		if(this.getProperties().apiToken){
			this.getProperties().viewType = o = accountManager.getCreatePath("DATA","~/.api");
			if(!o){
				this.setStatus("Invalid API Object");
				return;
			}
		}
		if(!o){
			//this.setStatus("Invalid object reference");
			this.GetElementByRID("objCont").style.display = "none";
		}
		else{
			Hemi.xml.setInnerXHTML(this.GetElementByRID("lblObject"),o.nameType + " " + o.name + " (#" + o.id + ")");
		}
		this.refreshMode();
	},
	refreshCurrentPasswordView : function(){
		var o = this.getProperties().viewType;
		/// This is a courtesy
		/// If this is skipped and/or faked by supplying another role with this name
		/// It will still be checked and caught on the server
		///
		if(this.getProperties().tokenMode) return;
		
		var bAa = 0;
		var bDa = 0;
		var bAo = 0;
		var aR = accountManager.listRolesForUser();
			
		for(var i = 0; i < aR.length;i++){
			if(aR[i].name.match(/^accountadministrators$/gi)){
				bAa = 1;
			}
			else if(aR[i].name.match(/^dataadministrators$/gi)){
				bDa = 1;
			}
		}
		if(!o.nameType.match(/^(user|unknown)$/gi) && oU.id == o.ownerId) bAo = 1;
		this.GetElementByRID("currentPasswordContainer").style.display = ((bAa || bDa || bAo) ? "none" : "block");

	},
	refreshMode : function(){
		var bToken = this.getProperties().tokenMode;
		var aToken = this.getProperties().apiToken;
		if(aToken) this.GetElementByRID("credentialType").value = "TOKEN";
		this.GetElementByRID("currentPasswordContainer").style.display = (bToken ? "none" : "block");
		this.GetElementByRID("passwordCont").style.display = (bToken ? "none" : "block");
		this.GetElementByRID("confirmPasswordCont").style.display = (bToken ? "none" : "block");
		this.GetElementByRID("tokenCont").style.display = (bToken ? "block" : "none");
		if(!bToken) this.refreshCurrentPasswordView();
		else this.newToken();
	},
	newToken : function(){
		var o = this.getProperties().viewType, sToken = "";

		if(this.getProperties().materialToken){
			var iBin = (o && o.id ? 6 : 20);
			sToken = Hemi.text.pad(uwm.getUser().organizationId,3) + "-" + uwm.getUser().id + "-" + (o ? o.id : 0) + "-" + Math.random().toString().substring(2,iBin)  + "-" + Math.random().toString().substring(2,iBin);
		}
		else{
			sToken = SHA1.hash_asB64(Hemi.guid());
		}
		this.GetElementByRID("token").value = sToken; 
	},
	_setStatus : function(s){
		Hemi.xml.setInnerXHTML(this.GetElementByRID("lblStatus"),s);
	},
	createCredential : function(){
		var o = this.getProperties().viewType;
		var sP,sCP,aToken = this.getProperties().apiToken,mToken = this.getProperties().materialToken;
		if(this.getProperties().tokenMode){
			sP = uwm.base64Encode(this.GetElementByRID("token").value);
			sCP = sP;
		}
		else{
			sP = uwm.base64Encode(this.GetElementByRID("newPassword").value);
			sCP = uwm.base64Encode(this.GetElementByRID("confirmNewPassword").value);
		}
		if(sP.length < 5 || sP != sCP){
			this.setStatus("Passwords don't match");
			return;
		}
		var userSvc = window.uwmServices.getService("Crypto");
		var authReq = new org.cote.beans.authenticationRequestType();
		authReq.credentialType = this.GetElementByRID("credentialType").value;
		authReq.checkCredentialType = authReq.credentialType;
		authReq.credential = sP;
		authReq.checkCredential = uwm.base64Encode(this.GetElementByRID("currentPassword").value);
		if(!o){
			authReq.subject = uwm.getUser().name;
		}
		else{
			if(o.nameType.match(/^user$/gi)){
				authReq.subject = o.name;
			}
			else{
				authReq.subject = o.urn;
			}
		}
		authReq.subjectType = this.getProperties().viewType.nameType;
		authReq.organizationPath = accountManager.getOrganizationPath(o);
		var vParms = (v ? v : {});
		var ctl = this;

		userSvc.newPrimaryCredential(authReq,{
			hemiSvcCfg:1,
			async:1,
			handler:function(s, v){
				if(v && v.json == true){
					ctl.setStatus("Changed primary credential");
					ctl.GetElementByRID("newPassword").value = "";
					ctl.GetElementByRID("confirmNewPassword").value = "";
					ctl.GetElementByRID("currentPassword").value = "";
				}
				else{
					ctl.setStatus("Unable to change primary credential");
				}
			}
		});
	
	}
]]></embedded-script>
</Template>