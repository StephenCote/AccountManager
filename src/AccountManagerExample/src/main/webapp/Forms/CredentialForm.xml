<Template>
<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<div class = "rocket-column-2">
		<p>
			Object:
		</p>
		<p rid = "lblObject"></p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Credential Type:
		</p>
		<p><select rid = "credentialType" disabled = "true">
		<option value = "UNKNOWN">Unknown</option>
		<option selected = "true" value = "HASHED_PASSWORD">Password</option>
		<option value = "CERTIFICATE">Certificate</option>
		</select></p>
	</div>
	<div class = "rocket-column-2" rid = "currentPasswordContainer">
		<p>
			Current Password:
		</p>
		<p><input type = "password" rid = "currentPassword" class = "rocket-text" /></p>
	</div>
	<div class = "rocket-column-2">
		<p>
			New Password:
		</p>
		<p><input type = "password" rid = "newPassword" class = "rocket-text" /></p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Confirm New Password:
		</p>
		<p><input type = "password" rid = "confirmNewPassword" class = "rocket-text" /></p>
	</div>
	<div class = "rocket-column-2">
		<p>
			
		</p>
		<p><input type = "button" value = "Create" onclick = "${this}.createCredential()" rid = "btnButton" class = "rocket-button" /></p>
	</div>
	<p rid = "lblStatus" style = "clear:both;">
	</p>
<embedded-script><![CDATA[
	template_init : function(){
		var o = this.getProperties().viewType;
		
		if(!this.setStatus) this.setStatus = this._setStatus;
		if(!o){
			this.setStatus("Invalid object reference");
		}
		else{
			Hemi.xml.setInnerXHTML(this.GetElementByRID("lblObject"),o.nameType + " " + o.name + " (#" + o.id + ")");
			/// This is a courtesy
			/// If this is skipped and/or faked by supplying another role with this name
			/// It will still be checked and caught on the server
			///
			var aR = accountManager.listRolesForUser();
			var bA = 0;
			for(var i = 0; i < aR.length;i++){
				if(aR[i].name.match(/^accountadministrators$/gi)){
					bA = 1;
					break;
				}
			}
			this.GetElementByRID("currentPasswordContainer").style.display = (bA ? "none" : "block");
			
		}
	},
	_setStatus : function(s){
		Hemi.xml.setInnerXHTML(this.GetElementByRID("lblStatus"),s);
	},
	createCredential : function(){
		var sP = uwm.base64Encode(this.GetElementByRID("newPassword").value);
		var sCP = uwm.base64Encode(this.GetElementByRID("confirmNewPassword").value);
		if(sP.length < 5 || sP != sCP){
			this.setStatus("Passwords don't match");
			return;
		}
		var userSvc = window.uwmServices.getService("User");
		var authReq = new org.cote.beans.authenticationRequestType();
		authReq.credentialType = this.GetElementByRID("credentialType").value;
		authReq.checkCredentialType = authReq.credentialType;
		authReq.credential = uwm.base64Encode(this.GetElementByRID("newPassword").value);
		authReq.checkCredential = uwm.base64Encode(this.GetElementByRID("currentPassword").value);
		authReq.subject = this.getProperties().viewType.name;
		authReq.organizationPath = accountManager.getOrganizationPath(o);
		var vParms = (v ? v : {});
		var ctl = this;
		userSvc.newPrimaryCredential(authReq,{
			hemiSvcCfg:1,
			async:1,
			handler:function(s, v){
				if(v && v.json == true){
					ctl.setStatus("Changed primary credential");
					ctl.GetElementByRID("newPassword").value = "";
					ctl.GetElementByRID("confirmNewPassword").value = "";
					ctl.GetElementByRID("currentPassword").value = "";
				}
				else{
					ctl.setStatus("Unable to change primary credential");
				}
			}
		});
	
	}
]]></embedded-script>
</Template>