<html-fragment>
<!-- 
	<div class = "rocket-column-2">
		<p>
			Id:
		</p>
		<p>
			<input type = "text" class = "rocket-text rocket-text-short" rid = "id" bind = "${bean.rocketType}" disable = "true" />
		</p>
	</div>
-->
	<div rid = "pathCont" class = "rocket-column-2">
		<p>
			Path:
		</p>
		<p>
			<input type = "text" placeholder = "${property.defaultPath}" rid = "path" class = "rocket-text" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Name:
		</p>
		<p>
			<input type = "text" rid = "name" bind = "${bean.rocketType}" class = "rocket-text" />
		</p>
	</div>
	
	<import-xml src = "${property.viewBase}/Forms/${property.typeName}Fields.xml" id = "${property.typeName}Fields" />
	<import-xml src = "/AccountManagerExample/Forms/AttributePicker.xml" id = "AttributePicker" />
	<div rid = "debugCont" style = "display:none;clear:both;" class = "rocket-column-2">
		<p rid = "lblDebug">
			Debug:
		</p>
		<p>
			<input rid = "btnDebug" type = "button" class = "rocket-button" value = "Debug" onclick = "${this}.sendToDebug()" />
		</p>
	</div>

	<div style = "clear:both;" class = "rocket-column-2">
		<p rid = "lblSave">
			Save:
		</p>
		<p>
			<input rid = "btnSave" type = "button" class = "rocket-button" value = "Save" onclick = "${this}.saveType()" />
		</p>
	</div>
	<p style = "clear:both;"><span rid = "status"></span></p>
	<embedded-script><![CDATA[
		template_init : function(){
			var o = this.getBean("rocketType"), _s = this.getProperties();
			if(!this.setStatus) this.setStatus = this._setStatus;
			this.GetElementByRID("debugCont").style.display = (uwm.debugMode ? "block" : "none");
			this.setStatus("");
			if(typeof _s.populate == "undefined") _s.populate = 1;
			this.GetElementByRID("name").focus();
			if(!_s.viewTypeName) _s.viewTypeName = _s.typeName;
			if(this.setTitle) this.setTitle(_s.viewTypeName + " - " + (o.id ? o.name : "New"));
			if(this.resizeTo && this.getBody){
				if(this.getBody().scrollHeight > this.getBody().offsetHeight){
					var iH = this.getBody().scrollHeight + 50;
					if(iH > document.documentElement.clientHeight) iH = document.documentElement.clientHeight;
					this.resizeTo(this.getContainer().offsetWidth,iH);
				}
			}
			this.initAttributePicker();
		},
		embedded_init : function(){

			
		},
		saveType : function(){
			this.synchronizeForm();
			var o = this.getBean("rocketType"),_s = this.getProperties();
			this.GetElementByRID("path").className = "rocket-text";
			this.GetElementByRID("endTime").className = "rocket-text";
			this.GetElementByRID("name").className = "rocket-text";
			this.setStatus("");
			if(!this.ValidateForPattern("name","not-empty")){
				this.GetElementByRID("name").className = "rocket-text rocket-text-error";
				this.setStatus("Name cannot be empty");
				return;
			}
			if(!o.nameType || (!o.nameType.match(/^GROUP$/) && !o.nameType.match(/^PERMISSION$/) && !o.nameType.match(/^ROLE$/))){
				var sPath = this.getPath();
				var oGroup = accountManager.getCreatePath(sPath);
				if(!oGroup || oGroup == null){
					this.GetElementByRID("path").className = "rocket-text rocket-text-error";
					this.setStatus("Invalid group");
					return;
				}
	
				/// TODO: Don't use the different bean class for the AM group object
				///
				o.group = accountManager.getCleanGroup(oGroup);
			}
			
			if(this.prepareSave && !this.prepareSave(o)){
				Hemi.logError("Prepare save failed for type " + this.getProperties().typeName);
				return;
			}
			
			this.prepareSaveAttributePicker(o);
			
			if(_s.customSave){
				Hemi.log("Concluding custom save operation");
				if(_s.provideSave && _s.openerId){
					var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
					if(oOpener && oOpener[_s.provideSave]) oOpener[_s.provideSave](this,o);
				}
				if(this.Close) this.Close();
				return;
			}
			var sAct = "add", bAct = 0;
			if(o.id > 0) sAct = "update";
			var sMeth= sAct + this.getProperties().typeName;
			var oApi = window[uwm.getApi(this.getProperties().typeName)];
			if(sAct.match(/^add$/) && this.addType){
				bAct = this.addType(o);
			}
			else{
				if(!oApi[sMeth]){
					this.setStatus("Invalid API: " + sMeth);
					return;
				}
				
				bAct = oApi[sMeth](o);
			}
			if(bAct){
				if(bAct != -1) this.postProcess();
				else this.setStatus("Processing ...");
			}
			else{
				this.setStatus("Failed to " + sAct);
			}
		
		},
		postProcess : function(){
			var o = this.getBean("rocketType"),n;
			var oApi = window[uwm.getApi(this.getProperties().typeName)];
			if(o.nameType && o.nameType.match(/^group$/gi)) n = accountManager.getGroup(this.getPath() + "/" + o.name);
			else if(this.provideItem) n = this.provideItem(this.getProperties().typeName,o);
			else if(o.id) n = oApi["get" + this.getProperties().typeName + "ById"](o.id);
			else n = oApi["get" + this.getProperties().typeName](o.name,o.group);
			if(n != null){
				this.clearBean("rocketType");
				this.setBean(n,"rocketType");
			}
			///Hemi.log("Refresh form for id #" + n.id);
			this.synchronizeForm(1);
			///if(this.getProperties().picker){
				var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
				if(oOpener && oOpener.refreshList) oOpener.refreshList();
				///if(oOpener["refresh" + this.getProperties().typeName + "sList"]) oOpener["refresh" + this.getProperties().typeName + "sList"]();
				if(this.Close) this.Close();
			///}
			///this.loadTemplate("/AccountManagerExample/Forms/BaseTemplate.xml");
		
		},

		getPath : function(){
			var o = this.GetElementByRID("path"), s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s) s = "~/" + this.getProperties().typeName + "s";
			}
			return s;
		},

		_setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.GetElementByRID("status"),s);
		}
	]]></embedded-script>
</html-fragment>
