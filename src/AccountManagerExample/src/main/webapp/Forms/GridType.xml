<?xml version="1.0" encoding="utf-8" ?>
<html-fragment>

	<import-style src ="Styles/Designer.css" id ="designer" />
	<import-style src ="Styles/GridStyle.css" id ="grid" />

	<div class = "buttons_bar" rid = "buttons-bar">
		<input type="button" rid = "button_refresh" class = "designer_button refresh_button" button-action = "Refresh" />
		<input type="button" rid = "button_new" class = "designer_button new_button" button-action = "New" />
		<input type="button" rid = "button_open" class = "designer_button open_button" button-action = "Open"  />
		<input type ="button" rid = "button_design" class ="designer_button design_button" button-action = "Design" />
		<input type="button" style ="display:none;" rid = "button_save" class = "designer_button save_button" button-action = "Save" />
		<input type="button" rid = "button_delete" class = "designer_button delete_button" button-action = "Delete"  />
		<div class = "designer_button_spacer"></div>
		<input type = "text" rid = "path" style = "margin-top: 5px; width: 100px !important; float: left;" placeholder = "~/Path" class = "rocket-text" />
		<input class = "rocket-text rocket-text-pick" style = "display:none;margin-top: 5px; width: 75px !important; float: left;" type = "text" rid = "filter" value = "" />
		<input class = "rocket-button" type = "button" rid = "button_search" style = "display:none;margin-top: 5px; float: left;" value = "..." onclick = "${this}._search()" />
		<div class = "designer_button_spacer"></div>
		<input type="button" rid = "button_move_first" disabled = "true" class = "designer_button" button-action = "MoveFirst" value = "&lt;&lt;" />
		<input type="button" rid = "button_move_prev" disabled = "true" class = "designer_button" button-action = "MovePrev" value = "&lt;" />
		<input type="button" rid = "button_move_next" disabled = "true" class = "designer_button" button-action = "MoveNext" value = "&gt;" />
		<input type="button" rid = "button_move_last" disabled = "true" class = "designer_button" button-action = "MoveLast" value = "&gt;&gt;" />
		<div class = "designer_button_label" rid = "record_label"></div>
	</div>
	<div class = "uwm-box-border" component = "wideselect" rid = "typelist">
	</div>
	<div rid = "control_bar" style = "display:none;">
		<input class = "rocket-button" type = "button" value = "Pick and Continue" rid = "button_pickmulti" onclick = "${this}.pickItem(1)" />
		<input class = "rocket-button" type = "button" value = "Pick" rid = "button_pickone" onclick = "${this}.pickItem()" />
		<input class = "rocket-button" type = "button" value = "Cancel" rid = "button_cancelpick" onclick = "${this}.cancelPickItem()" />
	</div>
	<p><span rid = "status">[ ... ]</span></p>
	<!--
	Members:
		InitializeIOGrid
		LoadIOGrid
		SetTotalItemCount
		ToggleIOGridSelectItem
		
	Virtuals:
		CreateNewItem
		SaveSelectedItem
		openListItem
		DeleteSelectedItem
		refreshList
		DrawIOGridItem
		DrawIOGridHeader
		DrawIOGridFooter
		provideRefresh
		provideList
		provideCount
		search
	-->
	<embedded-script>
		<![CDATA[
		initGrid : function(sTypeName, sDefPath, sViewTypeName, bNotAGroup, bNoPopulate,vParent,bManualPick,bShowSearch){

			var _s = this.getProperties();
			var _o = this.getObjects();
			_s.populate = (bNoPopulate ? 0 : 1);
			_s.manualPick = (bManualPick ? 1 : 0);
			if(_s.manualPick){
				this.GetElementByRID("control_bar").style.display = "block";
			}
			if(vParent){
				_o.parentRef = vParent;
			}
			
			if(bShowSearch){
				this.GetElementByRID("filter").style.display = "";
				this.GetElementByRID("button_search").style.display = "";
			}
	
			if(!sViewTypeName) sViewTypeName = sTypeName;
			_s.typeName = sTypeName;
			_s.viewTypeName = sViewTypeName;
			_s.start_record = 0;
			_s.record_count = 10;

			if(bNotAGroup) _s.noGroup = 1;
			if(!_s.noGroup || vParent){
				var s = this.getParentPath();
				this.GetElementByRID("path").placeholder = (sDefPath ? sDefPath : (s ? s : "~/" + sTypeName + "s"));
				this.scopeHandler("input_keypress",0,0,1);
				this.GetElementByRID("path").onkeypress = this._prehandle_input_keypress;	
			}
			else{
				this.GetElementByRID("path").style.display = "none";
			}
			
			this.GetComponentByRID("typelist").setLoadHandler(this.scopeHandler("configList",0,1,1));
			if(this.setTitle) this.setTitle(sViewTypeName);
			
			
			
			
		},
		resizeList : function(){
			if(this.getBody) this.ResizeFrame(this.getList().getContainer());
			else{
				var iH = this.getContainer().parentNode.parentNode.offsetHeight - this.GetElementByRID("typelist").offsetTop;
				this.getList().getContainer().style.height = iH + "px";
			}
			var iW = this.getContainer().parentNode.parentNode.offsetWidth - 200;
			//this.GetElementByRID("path").style.width = iW + "px";
		},
		embedded_init : function(){
		
		},
		embedded_destroy : function(){
			Hemi.message.service.unsubscribe(this, "onsessionrefresh", "handle_list_session_refresh");
			Hemi.message.service.unsubscribe(this, "oncommunitychange", "refreshCommunity");
			this._prehandle_input_keypress = null;
		},
		_handle_input_keypress : function(e){
			e = Hemi.event.getEvent(e);
			if(e.keyCode == 13) this.refreshList();
		},
		closeToFocus : function(){
			var o;
			if(this.Close) this.Close();
			if(this.getProperties().openerId && (o = Hemi.registry.service.getObject(this.getProperties().openerId)) && o.getFocus){
				o.getFocus();
			}
		},
		cancelPickItem : function(){
			if(this.Close) this.closeToFocus();
		},
		
		_search : function(){
			var filter = this.GetElementByRID("filter").value;
			if(this.search) this.search(filter);
		},
		configList : function(){
			if(!this.local_handle_resize) this.local_handle_resize = this.resizeList;
			this.resizeList();
			this.getList().setResultHandler( this.scopeHandler("typelistclick",0,0,1));
			this.refreshList();
			Hemi.message.service.subscribe(this, "onsessionrefresh", "handle_list_session_refresh");
			Hemi.message.service.subscribe(this, "oncommunitychange", "refreshCommunity");
		},
				
		getList : function(){
			return this.GetComponentByRID("typelist").GetWideSelect();
		},
		getParentPath : function(){
			var s,vParent = this.getObjects().parentRef;
			if(vParent && (vParent.nameType.match(/^ROLE$/) || vParent.nameType.match(/^PERMISSION$/))){
				var oApi = window[uwm.getApi(this.getProperties().typeName)];
				s = oApi["get" + this.getProperties().viewTypeName + "Path"](vParent.id);
			}
			return s; 
		},
		getPath : function(){
			if(this.getProperties().noGroup && !this.getObjects().parentRef) return 0;
			var o = this.GetElementByRID("path"), s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s){
					s = this.getParentPath();
					if(!s) s = "~/" + this.getProperties().typeName + "s";
				}
			}
			return s;
		},
		refreshCommunity : function(s, v){
			var sPath = uwm.getPathForType(this.getProperties().typeName,"~/" + this.getProperties().typeName + "s");
			this.GetElementByRID("path").placeholder = sPath;
			this.GetElementByRID("path").value = sPath;
			this.refreshList();
		},
		handle_list_session_refresh : function(s, v){
			this.refreshList();
		},
		pickItem : function(b){
			var o = this.getList().getActiveItem();
			this.setStatus("");
			if(!o){
				this.setStatus("Nothing is selected");
				return;
			}
			this._handle_typelistclick("manualpick",o);
			if(!b && this.Close) this.closeToFocus();
		},

		_handle_typelistclick : function(s, v){
			this.EnableButton("button_delete");
			this.EnableButton("button_open");
			if(this.handle_list_click) this.handle_list_click(v);
			if(this.getProperties().picker && (!this.getProperties().manualPick || s == "manualpick")){
				var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
				if(this.getProperties().pickFunction && oOpener[this.getProperties().pickFunction]){
					oOpener[this.getProperties().pickFunction](this.getProperties().formType,v.data, this.getProperties().sourceId,this);
				}
				else{
					var oL = 0;
					if(this.getProperties().listId) oL = Hemi.registry.service.getObject(this.getProperties().listId);
					else if(oOpener.getList) oL = oOpener.getList();
					else if(oOpener["get" + this.getProperties().typeName + "sList"]) oL = oOpener["get" + this.getProperties().typeName + "sList"]();
					if(oL && v && v.data) oL.addItem(v.data.name, v.data);
					else if(this.getProperties().pickFunction && oOpener[this.getProperties().pickFunction]) oOpener[this.getProperties().pickFunction](this.getProperties().formType,v.data, this.getProperties().sourceId,this);
				}
				if(this.Close && s != "manualpick") this.closeToFocus();
			}
		},
		
		showButton : function(n){
				var o = this.GetElementByRID("button_" + n);
				if(o) o.style.display = "";
		},
		hideButton : function(n){
				var o = this.GetElementByRID("button_" + n);
				if(o) o.style.display = "none";
		},
		_handle_exec_button : function(e){
			var o = Hemi.event.getEventSource(e);
			var d = this.get_frame("designer");
			var s = o.getAttribute("button-action"); 
			var bRM = this.getProperties().response_mode;
			var oItem = this.getList().getActiveItem();
			switch(s){
				case "New":
					this.createItem();
					break;
				case "Save":
					if(typeof this.SaveSelectedItem == "function") this.SaveSelectedItem();
					break;
				case "MoveLast":
					this.getProperties().start_record = this.getProperties().total_count - this.getProperties().record_count;
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "MoveFirst":
					this.getProperties().start_record = 0;
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "MovePrev":
					this.getProperties().start_record -= this.getProperties().record_count;
					if(this.getProperties().start_record < 0) this.getProperties().start_record = 0;
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "MoveNext":
					this.getProperties().start_record += this.getProperties().record_count;
					if(this.getProperties().total_count > 0 && this.getProperties().start_record >= this.getProperties().total_count){
						this.getProperties().start_record = this.getProperties().total_count - this.getProperties().record_count;
					}
					if(typeof this.refreshList == "function") this.refreshList(1);
					break;
				case "Refresh":
					this.refreshList();
					break;
				case "Open":
					if(!oItem) return;
					this.openItem(oItem.data);
					break;
				case "Design":
					if(!oItem){
						if(this.getProperties().typeName == "Data") this.openWindow(this.getProperties().viewTypeName,0,"Design");
					}
					else{
						this.designItem(oItem.data);
					}
					break;
				case "Delete":
					if(!oItem) return;
					if(this.deleteItem(oItem.data)){
						this.DisableButton("button_delete");
						this.DisableButton("button_open");
						this.refreshList();
					}
					break;
			}
		},
		openDataData : function(a){
			if(a.detailsOnly) a = accountManager.getDataById(a.id);
			var vData = {media_name:a.name,media_id:a.id,maxWidth:500,maxHeight:500,media_url:"data:" + a.mimeType + ";base64," + a.dataBytesStore};
			var oW = Hemi.app.createWindow("View " + a.name, "/AccountManagerExample/Forms/ImageViewer.xml", "View-" + a.id, 0, 0, vData);
            if (oW) {
            	oW.resizeTo(450, 300);
            	Hemi.app.getWindowManager().CenterWindow(oW);
            	// Destroy the window when closed
            	//
            	oW.setHideOnClose(0);
            } 
	
		},
		designItem : function(o){
			/// Data
			var oApi = window[uwm.getApi(this.getProperties().typeName)];
			if(o.nameType == "DATA" && o.mimeType && o.mimeType.match(/^text/)){
				this.openItem(o,"Design");
			}
			else if(o.nameType == "DATA" && o.mimeType && o.mimeType.match(/^image/)){
				this.openDataData(o);
			}
			else if(o.nameType == "FORM" && !o.isTemplate){
				//if(!o.populated) o = rocket.getFormById(o.id);
				//var oProps = {viewType:oForm};
				//var oW = Hemi.app.createWindow(oForm.name, "/RocketWeb/Forms/FormView.xml", "View-" + oForm.id, 0, 0, oProps);
				this.openItem(o,"FormView");
			}
			else if(o.nameType == "GROUP"){
				if(!o.populated) o = accountManager.getGroupById(o.id);
				this.GetElementByRID("path").value = o.path;
				this.getProperties().start_record = 0;
				this.getProperties().viewType = o;
				this.refreshList();
				//this.openItem(o,"ListGroups",1);
			}
			else if(o.nameType == "ROLE" || o.nameType == "PERMISSION"){
				this.getObjects().parentRef = o;
				this.GetElementByRID("path").value = this.getParentPath();
				this.getProperties().start_record = 0;
				//this.getProperties().viewType = o;
				this.refreshList();
				//this.openItem(o,"ListGroups",1);
			}

		},
		openItem : function(o,v,b){
			var _s = this.getProperties();
			var oApi = window[uwm.getApi(this.getProperties().typeName)];
			if(_s.populate && !o.populated){
				if(!v && o.nameType && o.nameType.match(/^data$/gi) && o.detailsOnly && o.blob){
					Hemi.log("Not pulling own blob data for " + o.name + " unless specifically requested.");
				}
				else if(!o.nameType.match(/^data$/gi) || o.detailsOnly){
					Hemi.log("Not populated.  Fetching a populated version.");
					if(o.nameType.match(/^group$/gi)) o = accountManager.getGroupById(o.id);
					else if(o.nameType.match(/^(role|permission)$/gi)) o = oApi["get" + this.getProperties().typeName + "ById"](o.id);
					else if(this.provideItem) o = this.provideItem(this.getProperties().typeName,o);
					else if(o.id)  o = oApi["get" + this.getProperties().typeName + "ById"](o.id);
					else o = oApi["get" + this.getProperties().typeName](o.name,o.group);
					if(!o.populated) alert("still not populated");
				}
			}
			this.openWindow(this.getProperties().viewTypeName, o, v, (b ? o.path : 0));
		},
		createItem : function(){
			this.openWindow(this.getProperties().viewTypeName);
		},
		openWindow : function(sType,oType,v, p){
			var oProps = {parentRef:this.getObjects().parentRef,defaultPath:(p ? p : this.getPath()),openerId:this.getObjectId(),listType:sType,picker:0,viewType:oType,listId:this.getList().getObjectId()};
			var oW = Hemi.app.createWindow((oType && oType.id ? oType.name : "New" + sType), uwm.getApiTypeView(sType) + "/Forms/" + (v ? v : sType) + ".xml", "View-" + (oType && oType.id ? sType + "-" + oType.id : Hemi.guid()), 0, 0, oProps);
            if (oW) {
            	oW.resizeTo((v ? 600 : 450), 400);
            	Hemi.app.getWindowManager().CenterWindow(oW);
            	// Destroy the window when closed
            	//
            	oW.setHideOnClose(0);
            }
		},
		deleteItem : function(o){
			var b = 0;
			if(!uwm.rule("IsLoggedIn")){
				this.setStatus("Not Authenticated with id " + uwm.getSession().sessionId);
				return b;
			}
			else if(this.provideDelete){
				b = this.provideDelete(o);
			}
			else{
				var oApi = window[uwm.getApi(this.getProperties().typeName)];
				b = oApi["delete" + this.getProperties().typeName](o);
			}
			if(b){
				this.setStatus("Deleted object #" + o.id);
			}	
			else{
				this.setStatus("Unable to delete object #" + o.id);
			}

			return b;
		
		},
		disableButtons : function(){
			this.DisableButton("button_delete");
			this.DisableButton("button_open");
			this.DisableButton("button_move_first");
			this.DisableButton("button_move_last");
			this.DisableButton("button_move_next");
			this.DisableButton("button_move_prev");		
		},

		setTotalCount : function(i){
			this.getProperties().total_count = i;
			this.DisableButton("button_move_first");
			this.DisableButton("button_move_last");
			this.DisableButton("button_move_next");
			this.DisableButton("button_move_prev");	
			if(this.getProperties().start_record > 0){
				this.GetElementByRID("button_move_prev").disabled = false;
				this.GetElementByRID("button_move_first").disabled = false;
			}
			
			if((this.getProperties().start_record + this.getProperties().record_count) < this.getProperties().total_count){
				this.GetElementByRID("button_move_next").disabled = false;
				this.GetElementByRID("button_move_last").disabled = false;
			}

			if(this.getProperties().total_count > 0) Hemi.xml.setInnerXHTML(this.GetElementByRID("record_label"),(this.getProperties().start_record + 1) + "-" + (this.getProperties().start_record + this.getProperties().record_count) + " of " + this.getProperties().total_count);
			else Hemi.xml.setInnerXHTML(this.GetElementByRID("record_label"),"0 of 0");

		},

		refreshList : function(bSkipCountReset){
			var sPath, _s = this.getProperties(), _o = this.getObjects();
			if(this.provideRefresh) this.provideRefresh(bSkipCountReset);
			
			if(!_s.noGroup) sPath = this.getPath();
			var oApi = window[uwm.getApi(this.getProperties().typeName)];
			var oL = this.getList();
			oL.clearItems();
			this.setStatus("");
			if(!bSkipCountReset) this.setTotalCount(0);
			var vComp = {};
			if(this.getProperties().picker){
				var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
				var oL2 = 0;
				if(this.getProperties().listId){
					oL2 = Hemi.registry.service.getObject(this.getProperties().listId);
					if(!oL2.getObjectType().match(/wideselect/gi)) oL2 = 0;
				}

				if(oOpener.getList) oL2 = oOpener.getList();
				else if(oOpener["get" + this.getProperties().typeName + "sList"]) oL2 = oOpener["get" + this.getProperties().typeName + "sList"]();
				if(oL2){
					for(var i = 0; i < oL2.getItems().length;i++) vComp[oL2.getItems()[i].name]=1;
				}
			}
			if(!this.getProperties().typeName){
				this.setStatus("Pending ...");
				return;
			}
			
			if(!uwm.rule("IsLoggedIn")){
				this.setStatus("Not Authenticated with id " + uwm.getSession().sessionId);
			}
			else{
				/// TODO - change the count method API to use the path like the other calls
				///
				if(!bSkipCountReset){
					var count = 0;
					var sFilt = this.GetElementByRID("filter").value;
					if(this.provideCount) count = this.provideCount(sPath, sFilt);
					else if(sPath && !_s.noGroup) count = oApi["count" + this.getProperties().typeName + "s"](sPath);
					else count = oApi["count" + this.getProperties().typeName + "s"](uwm.getUser().organization,_o.parentRef); 
					if(count != null) this.setTotalCount(count);
				}
				else{
					this.setTotalCount(this.getProperties().total_count);
				}
				var aList = [];
				var sFilt = this.GetElementByRID("filter").value;
				var tname = this.getProperties().typeName;
				if(this.provideList) aList = this.provideList(sPath, sFilt, this.getProperties().start_record,this.getProperties().record_count);
				else if(sPath) aList = oApi["list" + tname + "s"](sPath,this.getProperties().start_record,this.getProperties().record_count);
				else{
				
					if(tname != "Role" && tname != "Permission") aList = oApi["list" + tname + "s"](uwm.getUser().organization,_o.parentRef,this.getProperties().start_record,this.getProperties().record_count);
					else aList = oApi["list" + tname + "s"](uwm.getUser().organization,_o.parentRef,"UNKNOWN",this.getProperties().start_record,this.getProperties().record_count);
				}
				
				if(_s.start_record == 0 && (_s.typeName.match(/^(group|permission|role)$/gi)) && (_s.viewType || _o.parentRef)){
					var oP = oApi["get" + _s.viewTypeName + "ById"]((_s.viewType ? _s.viewType.parentId : _o.parentRef.parentId));
					/// alert('check .. ' + _s.start_record + "/" + _s.typeName + "/" + _s.viewType + "/" + _o.parentRef + "/" + oP);
					if(oP != null){
						var sn = (this.decorateListItemName ? this.decorateListItemName(oP) : "..");
						oL.addItem(sn, oP);
					}
				}	
				for(var i = 0; aList != null && i < aList.length;i++){
					if(vComp[aList[i].name]) continue;
					var sn = (this.decorateListItemName ? this.decorateListItemName(aList[i]) : aList[i].name);
					oL.addItem(sn, aList[i]);
				}
				//if(aList != null) this.setTotalCount(aList.length);
			}
		
		},
		setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.GetElementByRID("status"),s);
		}

	]]></embedded-script>
</html-fragment>
