<?xml version="1.0" encoding="utf-8" ?>
<Template>
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<import-xml src ="/AccountManagerExample/Forms/OrganizationPicker.xml" id = "OrganizationPicker" />
	<div class = "rocket-column-2">
		<p>
			Email:
		</p>
		<p>
			<input type = "text" class = "input_text" rid = "email" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Email as Login:
		</p>
		<p>
			<input onclick = "${this}.GetElementByRID('user_name').disabled = this.checked" type = "checkbox" class = "input_checkbox" rid = "email_login" checked="true" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			User Name:
		</p>
		<p>
			<input type = "text" disabled = "true" class = "input_text" rid = "user_name" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Password:
		</p>
		<p>
			<input type = "password" class = "input_text" rid = "password" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			Confirm:
		</p>
		<p>
			<input type = "password" class = "input_text" rid = "confirm_password" />
		</p>
	</div>
	<div class = "rocket-column-2">
		<p>
			<input type = "button" value = "Cancel" class = "input_button" onclick = "${this}.DoCancel()" />
		</p>
		<p>
			<input type = "button" value = "Register" class = "input_button" onclick = "${this}.DoRegister()" />
		</p>
	</div>
<p><span rid = "status">[ ... ]</span></p>
	<embedded-script>
		<![CDATA[
		// Requires TemplateTools to be included
		//
		template_init : function(){

			this.setStatus(" ");
			/// Get the session so that any registration information is properly stored
			///
			var oR = uwm.getSession();
		},
		DoCancel : function(){
			uwm.rule("IsLoggedIn",0, "ContinueWorkflow","RequireAuthentication");
		},
		DoRegister : function(){

			var bChecked = this.GetFormValue("email_login");
			if(bChecked) this.SetFormValue("user_name",this.GetFormValue("email"));
			if(!this.Validate()) return;
			
			var oOrg = accountManager.findOrganization(this.getOrgPath());
			if(!oOrg){
				this.setStatus("Invalid organization");
				return;
			}
			
			var sName = this.GetFormValue("user_name");
			var sPassword = this.GetFormValue("password");
			var sEmail = this.GetFormValue("email");
			this.SetFormValue("password","");
			this.SetFormValue("confirm_password","");
			this.setStatus(" ");
			window.uwm.operation("Register", {user_name : sName, password : sPassword, email:sEmail, organization: oOrg});		
		},

		Validate : function(){
			try{
				this.Assert(this.ValidateForPattern("user_name","not-empty"),"Invalid user_name");
				this.Assert(this.ValidateForPattern("user_name","not-empty"),"Invalid user_name");
				this.Assert(this.ValidateForPattern("password","not-empty"),"Invalid password");
				this.Assert(this.ValidateForPattern("confirm_password","not-empty"),"Invalid password confirmation");
				this.Assert(this.GetFormValue("password") == this.GetFormValue("confirm_password"), "Password confirmation doesn't match");
			}
			catch(e){
				this.setStatus((typeof e== "string" ? e : e.message ? e.message : e.description));
				return 0;
			}
			return 1;
		},
		
		setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.GetElementByRID("status"),s);
		}
		]]>
	</embedded-script>
</Template>
