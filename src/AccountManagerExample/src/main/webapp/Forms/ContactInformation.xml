<html-fragment>
	<div class = "rocket-column-2" rid = "contactPicker" style = "display:none;">
		<p rid = "contactPickerTitle">
			<span rid = "contactPickerToggle"></span> Contacts:
		</p>
		<p rid = "contactPickerContent">
			<div component = "wideselect" rid = "contactsList">
			</div>
			<br />
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addContact()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removeContact()" />
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openContact()" />
		</p>
	</div>
	<div class = "rocket-column-2" rid = "addressPicker" style = "display:none;">
		<p rid = "addressPickerTitle">
			<span rid = "addressPickerToggle"></span> Addresses:
		</p>
		<p rid = "addressPickerContent">
			<div component = "wideselect" rid = "addressesList">
			</div>
			<br />
			<input type = "button" class = "rocket-button" value = "+" onclick = "${this}.addAddress()" />
			<input type = "button" class = "rocket-button" value = "-" onclick = "${this}.removeAddress()" />
			<input type = "button" class = "rocket-button" value = ">" onclick = "${this}.openAddress()" />
		</p>
	</div>

	<embedded-script><![CDATA[
		embedded_init : function(){
			var o = this.getBean("rocketType"),_s = this.getProperties();
			if(o  && o.contactInformation){
				_s.enableContactInformation = 1;
				this.GetElementByRID("addressPicker").style.display = "block";
				this.toggleField("addressPickerToggle","addressPickerContent");
				if(!this.getProperties().addressListProp) this.getProperties().addressListProp = "addresses";
				
				this.GetElementByRID("contactPicker").style.display = "block";
				this.toggleField("contactPickerToggle","contactPickerContent");
				if(!this.getProperties().contactListProp) this.getProperties().contactListProp = "contacts";
			}
		},
		prepareSaveContactInformation : function(o){
			this.prepareSaveAddressesList(o);
			this.prepareSaveContactsList(o);
		},
		initContactInformation : function(){
			/// Have to put a little extra logic here because contact information is optional for addresses
			var _s = this.getProperties(),  o = this.getBean("rocketType");
			_s.enableContactInformation = (o.contactInformation != null ? 1 : 0);
			
			if(_s.enableContactInformation){
				this.getProperties().addressListProp = "addresses";
				this.getProperties().contactListProp = "contacts";
				this.GetComponentByRID("addressesList").setLoadHandler(this.scopeHandler("configAddressesList",0,1,1));
				this.GetComponentByRID("contactsList").setLoadHandler(this.scopeHandler("configContactsList",0,1,1));
			}
		},
		openAddress : function(){
			var oI = this.getAddressesList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Address");
		},
		addAddress : function(){
			var o = this.getBean("rocketType"),sPath;
			if(o.nameType && o.nameType.match(/^user$/gi)) sPath = "/Home/" + o.name + "/Addresses";
			this.manageList("Address", this.getAddressesList().getObjectId(),0,sPath);
		},
		removeAddress : function(){
			var oI = this.getAddressesList().getActiveItem();
			if(oI) this.getAddressesList().clearItem(oI.index);
		},

		configAddressesList : function(s,v){
			var oL = this.getAddressesList(),_s = this.getProperties();
			if(!_s.enableContactInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshAddresses();
		},
		refreshAddresses : function(){
			var oL = this.getAddressesList(), aP = this.getProperties().addressListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o.contactInformation || !o.contactInformation[aP]) return;
			for(var i = 0; i < o.contactInformation[aP].length;i++){
				oL.addItem(o.contactInformation[aP][i].name,o.contactInformation[aP][i]);
			}
		},
		getAddressesList : function(){
			return this.GetComponentByRID("addressesList").GetWideSelect();
		},
		prepareSaveAddressesList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableContactInformation) return;
			aP = this.getProperties().addressListProp;
			o.contactInformation[aP] = [];
			var aAddresses = this.getAddressesList().getItems();
			for(var i = 0; i < aAddresses.length;i++) o.contactInformation[aP].push(aAddresses[i].data);
		},
		
		openContact : function(){
			var oI = this.getContactsList().getActiveItem();
			if(oI && oI.data && this.openItem) this.openItem(oI.data,"Contact");
		},
		addContact : function(){
			var o = this.getBean("rocketType"),sPath;
			if(o.nameType && o.nameType.match(/^user$/gi)) sPath = "/Home/" + o.name + "/Contacts";
			this.manageList("Contact", this.getContactsList().getObjectId(),0,sPath);
		},
		removeContact : function(){
			var oI = this.getContactsList().getActiveItem();
			if(oI) this.getContactsList().clearItem(oI.index);
		},

		configContactsList : function(s,v){
			var oL = this.getContactsList(),_s = this.getProperties();
			if(!_s.enableContactInformation) return;
			oL.getContainer().className = "rocket-wideselect-container";
			this.refreshContacts();
		},
		refreshContacts : function(){
			var oL = this.getContactsList(), aP = this.getProperties().contactListProp;
			oL.clearItems();
			var o = this.getBean("rocketType");
			if(!o || !o.contactInformation || !o.contactInformation[aP]) return;
			for(var i = 0; i < o.contactInformation[aP].length;i++){
				oL.addItem(o.contactInformation[aP][i].name,o.contactInformation[aP][i]);
			}
		},
		getContactsList : function(){
			return this.GetComponentByRID("contactsList").GetWideSelect();
		},
		prepareSaveContactsList : function(o){
			var _s = this.getProperties(), aP;
			if(!_s.enableContactInformation) return;
			aP = this.getProperties().contactListProp;
			o.contactInformation[aP] = [];
			var aContacts = this.getContactsList().getItems();
			for(var i = 0; i < aContacts.length;i++) o.contactInformation[aP].push(aContacts[i].data);
		}
		
		
		
	]]></embedded-script>
</html-fragment>
