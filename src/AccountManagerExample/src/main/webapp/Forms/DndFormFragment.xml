<html-fragment>
	<div>
		<span rid = "dndPathCont">
		<input disabled = "true" type = "text" placeholder = "${property.defaultPath}" rid = "dndPath" style = "width:250px !important;" class = "rocket-text" />
		<br />
		</span>
		<div rid = "droptarget" style = "padding:0px;height:250px;width:250px;border: .2em dotted #505050;"></div>
		<p>
		<progress rid="uploadprogress" min="0" max="100" value="0"></progress>
		</p>
	</div>

	<import-xml src = "/AccountManagerExample/Forms/StatusFrag.xml" id = "StatusFrag" />
<embedded-script><![CDATA[
		embedded_init : function(){
			//this.setStatus("");
			this.getObjects().files = [];
			if(this.setCanResize){
				this.setCanResize(0);
				this.setCanMinimize(0);
				this.setCanMaximize(0);
			}
			;
			Hemi.message.service.subscribe(this,"onchangedirectory", this.scopeHandler("change_directory",0,0,1),Hemi.registry.service.getObject(this.getProperties().openerId));
			var o = this.GetElementByRID("droptarget"),_s = this.getProperties(), op;
			var ctl = this;
			o.ondragover = function () { this.style.borderColor = "#00FF00";return false; };
			o.ondragend = function () { this.style.borderColer = "#505050"; return false; };
			o.ondragleave = o.ondragend;
			o.ondrop = function (e) {
				this.style.borderColer = "#505050";
			   	e.preventDefault();
			   	ctl.readFiles(e.dataTransfer.files);
			};
			if(_s.openerId){
				op = Hemi.registry.service.getObject(_s.openerId);
				if(op && op.getProperties().dndShowForm) op[op.getProperties().dndShowForm](this);
			}
		},
		resizeDndTarget : function(w, h){
			this.GetElementByRID("droptarget").style.width = w + "px";
			this.GetElementByRID("droptarget").style.height = h + "px";
			this.GetElementByRID("uploadprogress").style.marginTop = ((h-20)/2) + "px";
			this.GetElementByRID("uploadprogress").style.width = (w*.75) + "px";
			//this.GetElementByRID("uploadprogress").value = 10;
		},
		_handle_change_directory : function(s,v){
			if(v && v.getCurrentGroup){
				this.GetElementByRID("dndPath").value = v.getCurrentGroup().path;
			}
		},
		updateWaitingCount : function(){
			var _p = this.getProperties(),op;
			
			_p.currentCount++;
        	this.setStatus("Read " + _p.currentCount + " of " + _p.waitingCount);
        	this.GetElementByRID("uploadprogress").value = parseInt((_p.currentCount/_p.waitingCount)*100);
			if(_p.waitingCount == _p.currentCount){
				op = Hemi.registry.service.getObject(_p.openerId);
				var o = this.GetElementByRID("droptarget");
				o.style.borderColor = "#505050";
				this.setStatus("Finished");
				if(op && op.getProperties().dndHandler) op[op.getProperties().dndHandler](this,this.getObjects().files);	
			}
		    

		},
		readFiles : function(aF){
			this.setStatus("Reading " + aF.length + " files into " + this.getPath());
			var oGroup = accountManager.getGroupByPath("DATA",this.getPath());
			if(!oGroup || oGroup == null){-
				this.setStatus(this.getPath() + " is not a valid group");
				return;
			}
			var ctl = this;
			this.getObjects().files = [];
			var _p = this.getProperties();
			_p.waitingCount = aF.length;
			_p.currentCount = 0;
			this.GetElementByRID("uploadprogress").max = _p.waitingCount;
			
			this.GetElementByRID("uploadprogress").value = 0;
		    for (var i = 0; i < aF.length; i++) {
		    	var formData = new FormData();
		    	formData.append("groupId",oGroup.id);
		    	formData.append("name",aF[i].name);
		    	this.getObjects().files.push(aF[i].name);
		    	formData.append("dataFile",aF[i]);
		    	
		        var xhr = new XMLHttpRequest();
		        xhr.open('POST', '/AccountManager/mediaForm');
		        xhr.onload = function(){
		        	ctl.updateWaitingCount();
		        };
		        xhr.upload.onprogress = function(event){
		        	 ///ctl.updateWaitingCount();
		        };
		        xhr.send(formData);
		   }
		},
		getPath : function(){
			var o = this.GetElementByRID("dndPath"), s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s) s = uwm.getPathForType("Data","~/Data");
			}
			return s;
		}

	]]></embedded-script>
</html-fragment>