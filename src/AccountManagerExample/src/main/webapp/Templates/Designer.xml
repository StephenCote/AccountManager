<?xml version="1.0" encoding="utf-8" ?>
<Template Title = "Designer">

	<!-- 
	
	Designer is a hodge-podge of the 'Rocket' style templates, which are modular, and a large chunk of legacy code I haven't refactored yet.
	The save/update code is a straight-up copy from the newer style
	 -->
	<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<import-style src ="Styles/tabs.css" id ="Tabs" />
	<import-style src ="Styles/Designer.css" id ="designer" />
	<import-style src ="Styles/GridStyle.css" id ="grid" />
	<div style = "clear:both;">
		<div rid = "designer_tab" onclick = "${this}.ShowTab(1)" class = "tab">Design</div>
		<div rid = "source_tab" onclick = "${this}.ShowTab(2)" class = "tab">Source</div>
		<div rid = "preview_tab" onclick = "${this}.ShowTab(3)" class = "tab">Preview</div>
	</div>
	<div style = "display:none;" rid = "source_container">
		<textarea rid = "preview_source" style = "width:95%;border:1px solid #909090;font:8pt Courier;"></textarea>
	</div>
	<div rid = "preview_container" style = "display:none;">
		<iframe rid = "preview_frame" frameborder = "0" style = "border:0px solid #000000;"></iframe>
		
	</div>
	<div style = "display:none;" rid = "designer_container">
	<div class = "style_bar">
		<select rid = "template" onchange = "${this}.LoadDesignerTemplate()">
			<option value = "0">TEMPLATE</option>
			<option value = "blank">Blank Template</option>
		<option value = "/Templates/DesignerContentTemplate.xml">Demo Template</option>
		<option value = "/Templates/DesignerContentTemplate2.xml">Demo Template 2</option>
		</select>
		<select rid = "block" onchange = "${this}.ExecBlock()">
			<option value = "0">BLOCK</option>
			<option>H1</option>
			<option>H2</option>
			<option>H3</option>
			<option>H4</option>
			<option>H5</option>
			<option>H6</option>
			<option>BlockQuote</option>
			<option>P</option>
			<!--
			<option>DIV</option>
			-->
		</select>
		<select rid = "fonts" onchange = "${this}.ExecFont()"><option value = "0">FONT</option><option>Arial</option><option>Times</option><option>Verdana</option><option>Courier</option></select>
		<select rid = "fontsize" onchange = "${this}.ExecFontSize()"><option value = "0">SIZE</option><option>Size 1</option><option>Size 2</option><option>Size 3</option><option>Size 4</option><option>Size 5</option><option>Size 6</option><option>Size 7</option></select>
		<select rid = "fontcolor" onchange = "${this}.ExecFontColor()">
			<option value = "0">COLOR</option>
			<option>Black</option>
			<option>Grey</option>
			<option>White</option>
			<option>Red</option>
			<option>Orange</option>
			<option>Yellow</option>
			<option>Green</option>
			<option>Blue</option>
			<option>Violet</option>
		</select>
		<select rid = "fill" onchange = "${this}.ExecFill()">
			<option value = "0">FILL</option>
			<option>Black</option>
			<option>Grey</option>
			<option>White</option>
			<option>Red</option>
			<option>Orange</option>
			<option>Yellow</option>
			<option>Green</option>
			<option>Blue</option>
			<option>Violet</option>
		</select>
		</div>
		<div class = "buttons_bar" rid = "buttons-bar">
		<input type="button" class = "designer_button" button-action = "Save" style = "background-image: url(/Media/Icons/save_ico.gif);" />
		<input type = "text" placeholder = "${property.defaultPath}" rid = "path" style = "margin-top: 6px;float:left; width: 100px !important;" class = "rocket-text rocket-text-short" />
		<input type = "hidden" rid = "id" bind = "${bean.rocketType}" />
		<input type = "hidden" rid = "mimeType" bind = "${bean.rocketType}" />
		<input type = "text" rid = "name" placeholder = "Untitled" bind = "${bean.rocketType}" style = "margin-top: 6px;float:left; width: 100px !important;" class = "rocket-text" />
		<div type="button" class = "designer_button_spacer"></div>
		<input type="button" class = "designer_button" button-action = "Bold" style = "background-image: url(/Media/Icons/bold.gif);" />
		<input type="button" class = "designer_button" button-action = "Italic" style = "background-image: url(/Media/Icons/italic.gif);" />
		<input type="button" class = "designer_button" button-action = "Underline" style = "background-image: url(/Media/Icons/underline.gif);" />
		
		<div type="button" class = "designer_button_spacer"></div>
		
		<input type="button" class = "designer_button" button-action = "JustifyLeft" style = "background-image: url(/Media/Icons/left_just.gif);" />
		<input type="button" class = "designer_button" button-action = "JustifyCenter" style = "background-image: url(/Media/Icons/centre.gif);" />
		<input type="button" class = "designer_button" button-action = "JustifyRight" style = "background-image: url(/Media/Icons/right_just.gif);" />
		
		<div type="button" class = "designer_button_spacer"></div>
		
		<input type="button" class = "designer_button" button-action = "InsertUnorderedList" style = "background-image: url(/Media/Icons/list.gif);" />
		<input type="button" class = "designer_button" button-action = "InsertOrderedList" style = "background-image: url(/Media/Icons/numbered_list.gif);" />
		
		<div type="button" class = "designer_button_spacer"></div>
		
		<input type="button" class = "designer_button" button-action = "Indent" style = "background-image: url(/Media/Icons/indent.gif);" />
		<input type="button" class = "designer_button" button-action = "Outdent" style = "background-image: url(/Media/Icons/outdent.gif);" />
		
		<div type="button" class = "designer_button_spacer"></div>
		
		<input type="button" class = "designer_button" button-action = "InsertHorizontalRule" style = "background-image: url(/Media/Icons/hr.gif);" />
		<input type="button" class = "designer_button" button-action = "CreateLink" style = "background-image: url(/Media/Icons/hyperlink.gif);" />
		<input type="button" class = "designer_button" button-action = "ImageLink" style = "background-image: url(/Media/Icons/blankdoc2_ico.gif);" />
		<div style = "clear:both;"></div>	
	</div>
	
	<iframe rid = "designer" frameborder = "0" style = "border:0px solid #000000;"></iframe>
	</div>
	<div rid = "status" style = "display:none;clear:both;"></div>
<!--
	<div class = "buttons_bar_container">
		<div rid = "buttons-bar" style = "margin-left:auto;margin-right:auto;width:100px;">
			<input type="button" class = "designer_button" rid = "prev-button" onclick = "${this}.Prev()" button-action = "avoid" style = "background-color:#FFFFCC;width:50px;" value = "Prev" />
		</div>
	</div>
-->
	<embedded-script>
		<![CDATA[
		/// Note to self: a bind error will show up in the log if an element declares a binding, but a backing bean wasn't set
		/// It shows up in this template because it's a hodge-podge of older and newer styles
		///
		template_init : function(){
			//this.createHandler("create_control",0,0,1);
			// Show the designer first!
			//
			//
			this.scopeHandler("picker_loaded", 0, 0, 1);
			/*Hemi.include("bbscript","/Scripts/")*/
			
			this.local_handle_resize = this.resizers;
			this.local_handle_minimize = this.local_minimize;
			
			this.getProperties().proxied = 0;
			
			this.getProperties().keep_buffers = 0;
			if(!this.setStatus){
				this.GetElementByRID("status").style.display = "block";
				this.setStatus = this._setStatus;
			}
			this.setStatus("Setting up designer ...");
			setTimeout("Hemi.registry.service.getObject('" + this.getObjectId() + "').setup_designer()",50);
		},
		_setStatus : function(s){
			Hemi.xml.setInnerXHTML(this.GetElementByRID("status"),s);
		},
		local_minimize : function(){
			// fix for latest FF 1.5
			//
			this.disable_designer();
		},
		
		template_destroy : function(){
			var d = this.get_frame("designer"), h = 0;
			this.getProperties().designer_html = 0;
			this.getProperties().control_buffer = 0;
			this.getProperties().showing_tab = 0;
			this.local_handle_focus = 0;
			this.local_handle_blur = 0;
			this.local_handle_minimize = 0;
			this._prehandle_toggle_highlight = 0;
			this._prehandle_exec_button = 0;
			this._prehandle_frame_blur = 0;
			this.local_handle_resize = 0;
			this._prehandle_create_control = 0;
			
		},

		
		LoadDesignerTemplate : function(){
			this.setStatus("Loading template ...");
			Hemi.log("Load designer template");
			var sTemplate = this.GetFormValue("template");
			if(!sTemplate || !sTemplate.match(/\.xml/g)){
				if(sTemplate == "blank"){
					this.WriteContent("<html><body><h1>Title</h1><h2>Sub Title</h2><div>[ body ]</div></body></html>","designer");
				}
				else{
					this.setStatus("Invalid template selection");
				}
				return;
			}
			/*
			if(!this.getProperties().control_buffer){
				this.setStatus("Missing control buffer");
				return;
			}
			*/
			this.getTemplateObjectByName("template").selectedIndex = 0;
			
			var oX = Hemi.xml.getXml(sTemplate,0,0,sTemplate,1);
			if(!oX || !oX.documentElement){
				this.setStatus("Error loading template");
				return;
			}
			var sHtml = Hemi.xml.serialize(oX);
			// Konqueror / Safari fix; Serialize document and strip off processing instruction
			sHtml = sHtml.replace(/<\?xml (.[^<]*)>/gi,"");
			/// TODO: Swap tokens as needed, such as MediaLink
			///
			
			this.WriteContent("<html>" + sHtml + "</html>","designer");
			this.setStatus("");
		},
		
		ShowTab : function(i){
			this.setStatus("Switching tabs ...");
			this.getTemplateObjectByName("designer_container").style.display = "none";
			this.getTemplateObjectByName("preview_container").style.display = "none";
			this.getTemplateObjectByName("source_container").style.display = "none";
			/*
			this.getTemplateObjectByName("designer_tab").style.borderBottomColor = "#FFFFFF";
			this.getTemplateObjectByName("preview_tab").style.borderBottomColor = "#FFFFFF";
			this.getTemplateObjectByName("source_tab").style.borderBottomColor = "#FFFFFF";
			*/
			var sActiveSource = this.RefreshSource();
			
			this.getProperties().showing_tab = i;
			switch(i){
				case 1:
					this.getTemplateObjectByName("designer_container").style.display = "block";
					// this.getTemplateObjectByName("designer_tab").style.borderBottomColor = "#CFCFCF";

					this.resize_designer();
					
					if(sActiveSource) this.WriteContent(sActiveSource,"designer");
					break;
				case 2:
					this.getTemplateObjectByName("source_container").style.display = "block";
					// this.getTemplateObjectByName("source_tab").style.borderBottomColor = "#CFCFCF";
					this.resize_preview_source();
					if(sActiveSource) this.getTemplateObjectByName("preview_source").value = sActiveSource;
					break;
				case 3:
					this.getTemplateObjectByName("preview_container").style.display = "block";
					// this.getTemplateObjectByName("preview_tab").style.borderBottomColor = "#CFCFCF";
					this.resize_preview_frame();
					if(sActiveSource){
						sActiveSource = sActiveSource.replace(/<form/gi,"<form target = \"_blank\"")
						this.WriteContent(sActiveSource,"preview_frame");
					}
					break;
			}
			this.setStatus("");
		},
		RefreshSource : function(){
			var sSource = 0;
			try{
				switch(this.getProperties().showing_tab){
					case 1:
						var d = this.get_frame("designer");
						if(!d || !d.document) return 0;
						sSource = "<html>" + this.get_frame("designer").document.documentElement.innerHTML + "</html>";
						break;
					case 2:
						sSource = this.getTemplateObjectByName("preview_source").value;
						break;
				}
			}
			catch(e){
				this.setStatus("Error: " + (e.message ? e.message : e.description));
			}
			if(!sSource) sSource = this.getProperties().designer_html;
			else this.getProperties().designer_html = sSource;
			return sSource;
		},
		Prev : function(){
			
		},



		ExecFontSize : function(){
			var o = this.getTemplateObjectByName("fontsize");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			d.document.execCommand("FontSize", false, o.selectedIndex);
			o.selectedIndex = 0;
		},
		ExecFont : function(){
			var o = this.getTemplateObjectByName("fonts");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			var s = o.options[o.selectedIndex].text;
			d.document.execCommand("FontName", false, s);
			o.selectedIndex = 0;
		},
		ExecBlock : function(){
			var o = this.getTemplateObjectByName("block");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			var s = o.options[o.selectedIndex].text;
			d.document.execCommand("FormatBlock", false, "<" + s + ">");
			o.selectedIndex = 0;
		},
		ExecFontColor : function(){
			var o = this.getTemplateObjectByName("fontcolor");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			var s = o.options[o.selectedIndex].text;
			d.document.execCommand("ForeColor", false, s.toLowerCase());
			o.selectedIndex = 0;
		},
		ExecFill : function(){
			var o = this.getTemplateObjectByName("fill");
			var d = this.get_frame("designer");
			
			if(o.selectedIndex <= 0) return;
			var s = o.options[o.selectedIndex].text;
			d.document.execCommand("BackColor", false, s);
			o.selectedIndex = 0;
		},
		_handle_exec_button : function(e){
			var o = Hemi.event.getEventSource(e);
			var d = this.get_frame("designer");
			var s = o.getAttribute("button-action");
			var opt;
			var r;
			d.focus();
			// if(d.createTextRange) r = d.createTextRange();
			// if(r) r.select();
			switch(o.getAttribute("button-action")){
				case "ImageLink":
					if(this.getProperties().linkNode){
						//Hemi.log("Link HTML: " + this.getProperties().linkNode);
						//d.document.execCommand("innerHTML",false,this.getProperties().linkHtml);
						this.insertNodeAtCaret(this.getProperties().linkNode);
						this.getProperties().linkNode = 0;
					}
					else{
						this.chooseData("pickData");
					}
					break;
				case "CreateLink":
					//this.chooseData("pickData");
					//break;
				case "Indent":
				case "Outdent":
				case "InsertHorizontalRule":
				case "InsertOrderedList":
				case "InsertUnorderedList":
				case "JustifyLeft":
				case "JustifyCenter":
				case "JustifyRight":
				case "Underline":
				case "Italic":
				case "Bold":
					d.document.execCommand(s, false, opt);
					break;
				case "Save":
					this.saveType();
					break;
			}
			d.focus();
		},
		_handle_picker_loaded: function (v) {
		    v.resizeTo(475, 450);

			v.GetComponentByRID("typelist").GetWideSelect().getContainer().style.height = "340px";
        },
        /// Based on Tim's answer at http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div
        ///
		insertNodeAtCaret : function(oNode) {
		    var sel, range;
		    var d = this.get_frame("designer");
		    if (d.getSelection) {
		        sel = d.getSelection();
		        if (sel.getRangeAt && sel.rangeCount) {
		            range = sel.getRangeAt(0);
		            range.deleteContents();
		
		            // Range.createContextualFragment() would be useful here but is
		            // only relatively recently standardized and is not supported in
		            // some browsers (IE9, for one)
		            range.insertNode(oNode);
		        }
		    }
		},
		pickData : function(s,o,i,w){
		
			var d = this.get_frame("designer");
			this.getProperties().lastPickerPath = w.getPath();
			this.getFocus();
			d.focus();
			var oG = o.group;
			var w = 250;
			var h = 250;
			if(o.group.path == null || o.group.path.length == 0){
				oG = accountManager.getGroupById(o.group.id);
			}
			
			var oA = d.document.createElement("a");
			var oI = d.document.createElement("img");
			oA.appendChild(oI);
			var sOrg = accountManager.getOrganizationDotPath(oG.organization);
			var sThumbUrl = "/AccountManager/Thumbnail/" + sOrg + "/Data" + oG.path + "/" + o.name + "/" + w + "x" + h;
			//Hemi.log(sThumbUrl);
			
			var sUrl = "/AccountManager/Media/" + sOrg + "/Data" + oG.path + "/" + o.name;
			var sIco = 0;
			if(!o.mimeType.match(/^image/)){
				/*
				w = 128;
				h = 128;
				sIco = "/Media/Icons/Crystal/128x128/Crystal_Clear_mimetype_misc.png";
				*/
				oI.setAttribute("src","/AccountManagerExample/Media/Icons/Crystal/128x128/Crystal_Clear_mimetype_misc.png");
				oI.setAttribute("border","0");
				oI.setAttribute("width","128");
				oI.setAttribute("height","128");
				oI.setAttribute("title",o.name);
				
			}
			else{
				oI.setAttribute("src",sThumbUrl);
				//sIco = "/AccountManager/Thumbnail/" + sOrg + "/Data" + oG.path + "/" + o.name + "/" + w + "x" + h;
				/// null the dimensions because the end ratio isn't known yet
				//w = 0;
				//h = 0;
			}

			oA.setAttribute("href",sUrl);
			oA.setAttribute("target","blank");
			oA.setAttribute("title",o.name);
			//d.document.body.appendChild(oA);

			//var sHtml = "<a href =\"" + sUrl + "\" title = \"" + o.name + "\" target = \"blank\"><img src = \"" + sIco + "\" " + (w && h ? " width=\"" + w + "\" height = \"" + h + "\"" : "") + " border = \"0\" title =\"" + o.name + "\" /></a>";
			//this.getProperties().linkHtml = sHtml;
			this.getProperties().linkNode = oA;
			/*
			var sThumb = "/" + w + "x" + h;
			var sUrl = "/AccountManager/Thumbnail/Public/Data" + oG.path + "/" + o.name;
			var sHtml = "<a href =\"" + sUrl + "\" title = \"" + o.name + "\" target = \"blank\"><img src = \"" + sUrl + sThumb + "\" border = \"0\" title =\"" + o.name + "\" /></a>";
			d.document.execCommand("innerHTML",false,sHtml);
			*/
		},
		chooseData : function(sFN){
			var sPath = (this.getProperties().lastPickerPath ? this.getProperties().lastPickerPath : "~/GalleryHome");
			var oProps = {openerId:this.getObjectId(),defaultPath:sPath,listType:"Data",picker:1,pickFunction:sFN,listId:0};
			var oW = Hemi.app.createWindow("ManageList", "/AccountManagerExample/Forms/ListDatas.xml", "DataPicker", 0, 0, oProps, this._prehandle_picker_loaded);
            if (oW) {
            	Hemi.app.getWindowManager().CenterWindow(oW);
            	// Destroy the window when closed
            	//
            	oW.setHideOnClose(0);
            }
		},
		
		/// Copy from BaseFields.xml
		///
		getPath : function(){
			var o = this.GetElementByRID("path"), s;
			if(!(s = o.value).length){
				s = o.placeholder;
				if(!s) s = "~/" + this.getProperties().typeName + "s";
			}
			return s;
		},
		/// Copy from BaseFields.xml
		///
		saveType : function(){
			this.synchronizeForm();
			var o = this.getBean("rocketType");
			this.GetElementByRID("path").className = "rocket-text";
			this.GetElementByRID("name").className = "rocket-text";
			this.setStatus("");
			if(!this.ValidateForPattern("name","not-empty")){
				this.GetElementByRID("name").className = "rocket-text rocket-text-error";
				this.setStatus("Name cannot be empty");
				return;
			}
			var sPath = this.getPath();
			var oGroup = accountManager.getCreatePath("DATA",sPath);
			if(!oGroup || oGroup == null){
				this.GetElementByRID("path").className = "rocket-text rocket-text-error";
				this.setStatus("Invalid group");
				return;
			}

			/// TODO: Don't use the different bean class for the AM group object
			///
			o.group = accountManager.getCleanGroup(oGroup);

			
			if(this.prepareSave && !this.prepareSave(o)){
				Hemi.logError("Prepare save failed for type " + this.getProperties().typeName);
				return;
			}
			
			var sAct = "add", bAct = 0;
			if(o.id > 0) sAct = "update";
			var sMeth= sAct + this.getProperties().typeName;
			var oApi = window[uwm.getApi(this.getProperties().typeName)];
			if(sAct.match(/^add$/) && this.addType){
				Hemi.log("Designer Save Type 1: " + sMeth);
				bAct = this.addType(o);
			}
			else{
				Hemi.log("Designer Save Type 2: " + sMeth);
				if(!oApi[sMeth]){
					this.setStatus("Invalid API: " + sMeth);
					return;
				}
				
				bAct = oApi[sMeth](o);
			}
			
			if(bAct){
				if(bAct != -1) this.postProcess();
				else this.setStatus("Processing ...");
			}
			else{
				this.setStatus("Failed to " + sAct);
			}
		
		},
		/// Copy from BaseFields.xml
		///
		prepareSave : function(o){
			/// For updating, if a detailed binary object is being saved, don't allow to save here - only allow through the uploader
			/// therefore, save as detailsOnly
			///
			Hemi.log("Designer Prepare Save ...");
			//"preview_source"
			var iTab = this.getProperties().showing_tab;
			if(iTab != 3){
				this.ShowTab(3);
			}
						
			o.mimeType = "text/plain";
			var sBBCode = bbConverter.convertNodes(this.get_frame("preview_frame").document.body.childNodes);
			
			if(iTab != 3) this.ShowTab(iTab);
			
			o.dataBytesStore = uwm.base64Encode(sBBCode);
			//Hemi.log("Designer Prepare Save Data: " + o.dataBytesStore);
			return 1;
		},
		/// Modified from DataFields.xml
		///
		addType : function(o){
			Hemi.log("Add rich text type: " + o.name + ":" + o.mimeType);

			var v = "";
			if(o.mimeType && o.mimeType.match(/^text/)){
				v = this.GetElementByRID("textData").value;
				/// note - an old design artifact is the add operations want the atomic values, not the object, so because prep save converts, this decodes for the old api style to re-encode
				/// to fix - all of the add operations need to be updated
				///
				return accountManager.addData(o.name, o.description, o.mimeType, uwm.base64Decode(o.dataBytesStore), o.group);
			}
			return 0;
		},
		/// Copy from BaseFields.xml
		///
		postProcess : function(){
			var o = this.getBean("rocketType");
			Hemi.log("Post process " + o.name);
			var oApi = window[uwm.getApi(this.getProperties().typeName)];
			var n = oApi["get" + this.getProperties().typeName](o.name,o.group);
			if(n != null){
				this.clearBean("rocketType");
				this.setBean(n,"rocketType");
			}
			this.synchronizeForm(1);
			///if(this.getProperties().picker){
				var oOpener = Hemi.registry.service.getObject(this.getProperties().openerId);
				if(oOpener && oOpener.refreshList) oOpener.refreshList();
				///if(oOpener["refresh" + this.getProperties().typeName + "sList"]) oOpener["refresh" + this.getProperties().typeName + "sList"]();
				if(this.Close) this.Close();
			///}
			///this.loadTemplate("/AccountManagerExample/Forms/BaseTemplate.xml");
		},
		setup_designer : function(){
				try{
					var d = this.get_frame("designer");
					if(!d || !d.document){
						alert("SetupDesigner: Unable to find document");
						return;
					}
					this.ShowTab(1);
					
					var o = d.document;
					o.documentElement.style.borderWidth = "0px";
					o.documentElement.style.padding = "0px";
					o.body.style.border = "0px solid black";
					o.body.style.padding = "0px";
					
					this.local_handle_blur = this.disable_designer;
					
					this.resize_designer();
				
					this.PrepDesigner();
				}
				catch(e){
					this.setStatus("Error setting up designer: " + (e.message ? e.message : e.description));
				}
			},
				
				PrepDesigner : function(){
					var d = this.get_frame("designer");
					var o = this.getBean("rocketType");
					if(!d || !d.document){
						setTimeout("Hemi.registry.ObjectRegistry.getObject('" + this.getObjectId() + "').PrepDesigner()",50);
						this.setStatus("Deferring Preparation ...");
						return;
					}
					var sCSS = "<link rel=\"stylesheet\" href=\"/Style/uwm.css\" type=\"text/css\" title = \"uwm\" /><link rel=\"stylesheet\" href=\"/Style/rocket.css\" type=\"text/css\" />";
 					if(o && o.dataBytesStore){
 						///alert("Org: " + uwm.base64Decode(o.dataBytesStore));

						this.WriteContent("<html><head>" + sCSS + "</head><body>" + bbConverter.import(uwm.base64Decode(o.dataBytesStore)) + "</body></html>","designer");
					}
					else if(this.getProperties().designer_html){
						this.WriteContent(this.getProperties().designer_html,"designer");
					}
					else if(this.getProperties().control_buffer){
						this.WriteContent("<html><body>" + this.getProperties().control_buffer + "</body></html>","designer");
					}
					else{
						this.WriteContent("<html><head>" + sCSS + "<body><h1>Title</h1><h2>Sub Title</h2><div>[ body ]</div></body></html>","designer");
					}
					this.setStatus("");
		},
		WriteContent : function(s,n){
			try{
					var d = this.get_frame(n);
					if(!d || !d.document){
						alert("WriteContent: Unable to find document; " + this.WriteContent.caller);
						return;
					}
					var o = d.document;
					o.open();
					o.write(s);
					o.close();
					this.enable_designer();
				}
				catch(e){
					this.setStatus("Unexpected UI Error: " + (e.message ? e.message : e.description));
				}

		},
		enable_designer : function(b){
		
			try{
			
				var d = this.get_frame("designer");
				if(d){
					d.document.designMode = "on";
					d.focus();
					//this.getTemplateObjectByName("notes").innerHTML = "Enable";
				}
				else{
					this.setStatus("Could not find designer document to enabled");
				}
			}
			catch(e){
				this.setStatus("Error enabling designer: " + (e.message ? e.message : e.description));
			}
		},
		disable_designer : function(){
			if(this.getIsClosed()) return;
			try{
				var d = this.get_frame("designer");
				//document.title = "disable " + (new Date()).getTime();
				if(d){
					//this.getProperties().keep_buffers = 1;				
					// var h = d.document.body.innerHTML;
					//this.loadTemplate(g_application_path + "Templates/DesignerProxy.xml");
				}
			}
			catch(e){
				this.setStatus("Error enabling designer: " + (e.message ? e.message : e.description));
			}
		},
		resizers : function(){
			switch(this.getProperties().showing_tab){
				case 1:
					this.resize_designer();
					break;
				case 2:
					this.resize_preview_source();
					break;
				case 3:
					this.resize_preview_frame();
					break;

				}
		},
		resize_designer_delay : function(){
			setTimeout("Hemi.registry.service.getObject('" + this.getObjectId() + "').resize_designer()",50);
		},
		
		resize_designer : function(){
			this.ResizeFrame("designer",0,0);
		},

		resize_preview_frame : function(){
			this.ResizeFrame("preview_frame",0,0);
		},
		resize_preview_source : function(){
			this.ResizeFrame("preview_source",10,0);
		}
		

	]]>
	</embedded-script>

</Template>
