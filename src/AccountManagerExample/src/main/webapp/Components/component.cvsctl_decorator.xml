<?xml version="1.0" encoding="UTF-8"?>
<application-components>
<application-component id="cvsctl_decorator" package-name = "canvas">
<![CDATA[
component_init : function()
{
	Hemi.include("hemi.util.logger");
	Hemi.util.logger.addLogger(this, "Canvas Control Decorator", "Control Decorator", 232);
	this.log("Canvas Control decorator loaded");
},
setDelegate : function(o){
	this.getObjects().delegate = o;
},
setCanvas : function(o)
{
	this.getObjects().canvas = o;
	o.AddShapeDecorator(this);
},

handle_canvas_click : function(oCanvas, e)
{
	this.log("Consider Click - " + oCanvas.getObjects().MouseClickShape);
	if(!oCanvas.getObjects().MouseClickShape){
		this.log("No click shape at " + oCanvas.getProperties().MouseTrackLeft + "x" + oCanvas.getProperties().MouseTrackTop);
		return;
	}
	var oShape = oCanvas.getObjects().MouseClickShape;
	//var oCShape = oCanvas.getObjects().MouseDownShape;
	if(!oShape.action){
		/// No click action defined
		this.log("No click action for " + oShape.id);
		return;
	}
	/*
	if(!oCShape || oCShape.id != oShape.id){
		this.log("Click shape context is no longer valid: " + (oCShape ? oCShape.id : "null") + "==" + oShape.id);
		return;
	}
	*/
	//oCanvas.ClearTempCanvas();
	this.log("Action Click - " + oShape.action);

	/*
	if(oShape.type == "Image"){
		//var oM = oCanvas.Image(oShape.image,oShape.x, oShape.y, "#00FF00", "#000000");
		//oM.selectable = 0;
		
	}
	*/
	if(this.getObjects().delegate && this.getObjects().delegate[oShape.action]){
		var o = oShape;
		this.log("Delegate " + oShape.action);
		if(oShape.matteId) o = oCanvas.getShapeById(oShape.matteId);
		else if (oShape.referenceType == "MATTE") o = oShape;
		this.getObjects().delegate[oShape.action](oShape.referenceType, oShape.referenceId, o);
	}
	else{
		this.log("Undefined delegate for " + oShape.action);
	}
},
handle_canvas_mouseover : function(oCanvas, e){
	//this.log("Detected Mouseover Event");
	var oShape = oCanvas.getObjects().MouseOverShape;
	if(!oShape || !oShape.hover) return;
	///this.log("Mouseover " + oShape.action);
	/// Paint over the current position
	///
	if(oShape.type == "Image"){
		//this.log("Paint decorated mouseover image");
		var oLast = oCanvas.getTemporaryContextConfig();
		var oCfg = oCanvas.getConfigByName("DropGreenShadow");
		oCanvas.setTemporaryContextConfig(oCfg);
		var oI = oCanvas.Image(oShape.image,oShape.x, oShape.y, "#00FF00", "#000000");
		this.getObjects().delegate.copyShapeProperties(oShape, oI);

		var icoHeight = (oShape.icoType == "IMG" ?  this.getObjects().delegate.getProperties().imgThumbHeight : this.getObjects().delegate.getProperties().dirThumbHeight);
		if(oShape.referenceName && !oShape.noLabel) oCanvas.Text(this.getObjects().delegate.scaleText(oShape.referenceName), oShape.x, oShape.y + icoHeight, "#000000","#000000","8pt","Arial");
		oCanvas.setTemporaryContextConfig(oLast);
	}
},
handle_canvas_mouseout : function(oCanvas, e){
	var oShape = oCanvas.getObjects().MouseOverShape;
	/// Return on the "view" action because it's overlayed with a temp matte
	///
	if(!oShape || !oShape.hover || oShape.action == "view") return;
	///this.log("Mouseout " + oShape.action + " / Hover " + oShape.hover);
	oCanvas.ClearTempCanvas();
	
	/// Paint over the current position
	///
	/*
	if(oShape.type == "Image"){
		this.log("Paint decorated mouseout image");
		var oLast = oCanvas.getTemporaryContextConfig();
		var oCfg = oCanvas.getConfigByName("NoShadow");
		oCanvas.setTemporaryContextConfig(oCfg);
		oCanvas.Image(oShape.image,oShape.x, oShape.y, "#00FF00", "#000000");
		oCanvas.setTemporaryContextConfig(oLast);
	}
	*/

},
handle_canvas_mousedown : function(oCanvas, e)
{
	if(!oCanvas.getProperties().MouseTrackChoose) return;

	var oShape = oCanvas.getObjects().MouseDownShape;
	if(!oShape || !oShape.drag){
		/// No shape drag
		///this.log("No action shape to decorated image: " + (oShape ? oShape.action : " No Shape"));
		return;
	}
	oCanvas.ClearTempCanvas();
	/// Paint over the current position
	///
	if(oShape.type == "Image"){
		///this.log("Paint decorated image");
		var oLast = oCanvas.getTemporaryContextConfig();
		var oCfg = oCanvas.getConfigByName("DropBlueShadow");
		oCanvas.setTemporaryContextConfig(oCfg);
		var oX = oCanvas.Image(oShape.image,oShape.x, oShape.y, "#00FF00", "#000000");
		this.getObjects().delegate.copyShapeProperties(oShape, oX);

		var icoHeight = (oShape.icoType == "IMG" ?  this.getObjects().delegate.getProperties().imgThumbHeight : this.getObjects().delegate.getProperties().dirThumbHeight);
		if(oShape.referenceName && !oShape.noLabel) oCanvas.Text(this.getObjects().delegate.scaleText(oShape.referenceName), oShape.x, oShape.y + icoHeight, "#000000","#000000","8pt","Arial");
		oCanvas.setTemporaryContextConfig(oLast);
	}
},
handleDropShape : function(oSrc, oTarg){
	if(oSrc.referenceType == "GROUP" && oTarg.referenceType == "GROUP"){
		var oSGroup = accountManager.getGroupById(oSrc.referenceId);
		var oTGroup = accountManager.getGroupById(oTarg.referenceId);
		if(!oSGroup || !oTGroup){
			this.log("Invalid source or target group from " + oSrc.referenceId + " and " + oTarg.referenceId);
			return;
		}
		if(oTGroup.id == oSGroup.parentId || oTGroup.parentId == oSGroup.id || oTGroup.id == oSGroup.id){
			this.log("Parent/Group relationship already exists, or parent cannot be moved into its own child");
			return;
		}
		if(this.getObjects().delegate && this.getObjects().delegate.reparentGroup) this.getObjects().delegate.reparentGroup(oSGroup, oTGroup);
	}
	else if ((oSrc.referenceType == "GROUP" || oSrc.referenceType == "OBJECT") && oTarg.referenceType == "CTL"){
		if(oTarg.action == "deleteObject" && this.getObjects().delegate && this.getObjects().delegate[oTarg.action]){
			this.getObjects().delegate[oTarg.action](oSrc.referenceType,oSrc.referenceId);
		}
		if(oSrc.referenceType == "OBJECT" && oTarg.action == "controlPanel"){
			this.getObjects().delegate.openObject(oSrc.referenceType, oSrc.referenceId, oSrc);
		}
	}
	else if (oSrc.referenceType == "OBJECT" && oTarg.referenceType == "GROUP"){
		var oObj = accountManager.getDataById(oSrc.referenceId);
		var oTGroup = accountManager.getGroupById(oTarg.referenceId);
		if(!oObj){
			this.log("Invalid object reference: " + oSrc.referenceName + " (#" + oSrc.referenceId + ")");
			return;
		}
		if(!oTGroup){
			this.log("Invalid group reference: " + oTarg.referenceName + " (#" + oTarg.referenceId + ")");
			return;
		}
		if(this.getObjects().delegate && this.getObjects().delegate.reparentObject) this.getObjects().delegate.reparentObject(oObj, oTGroup);

	}
	else if (oSrc.referenceType == "OBJECT" && oTarg.referenceType == "OBJECT" && oSrc.action){
		if(this.getObjects().delegate && this.getObjects().delegate[oSrc.action]) this.getObjects().delegate[oSrc.action](oSrc.referenceType, oSrc.referenceId, oSrc);
	}
	else{
		this.log("Unknown referenceTypes.  Source=" + oSrc.referenceType + " and Target = " + oTarg.referenceType);
	}
},
handle_canvas_mouseup : function(oCanvas, e)
{
	var _s = oCanvas.getProperties(), _p = oCanvas.getObjects();
	var oDShape = oCanvas.getObjects().MouseDownShape;
	var oCShape = oCanvas.getObjects().MouseOverShape;
	this.log((oDShape ? oDShape.id + " " + oDShape.type : "No Shape") + " over " + (oCShape ? oCShape.id + " " + oCShape.type : "No Shape"));
	//if((!oDShape || !oCShape) || (oDShape && !oDShape.drag && !oDShape.hover )) return;
	if(!oDShape || (oDShape && !oDShape.drag && !oDShape.hover )) return;
	this.log("Mouseup: Clear Temp Canvas");
	oCanvas.ClearTempCanvas();
	
	if(oDShape && oCShape){
		if(oDShape.id != oCShape.id){
			this.handleDropShape(oDShape, oCShape);
			this.log("Handle drop: " + oDShape.id + " to " + oCShape.id);
			Hemi.event.cancelEvent(e);
			return false;
		}
		else{
			// this.log("Down shape equals click shape");
		}
	}
	else{
		this.log("DShape = " + oDShape + " / CShape = " + oCShape);
	}
	// can't just recall the handler, need to run it back through the event handlers in base canvas class
	//
	//this.handle_canvas_mouseover(oCanvas, e);
} 
]]>
</application-component>
</application-components>