<?xml version="1.0" encoding="UTF-8"?>
<application-components>
	<!--
		UWM Session mapper
	-->

	<application-component id="session">
	<![CDATA[
		component_init:function(){
			Hemi.include("hemi.web.security");
			
			this.getObjects().session = {};


			this.getProperties().last_state = 0;
			this.scopeHandler("get_sessiondata",0,0,1);
		},


		GetBoolParam : function(n){
			var v = this.GetParam(n);
			if(typeof v !="string") v = "" + v;
			if(v.match(/^(true|1)$/gi)) return true;
			return false;
		},
		GetIntParam : function(n){
			var r = parseInt(this.GetParam(n));
			if(isNaN(r)) return 0;
			return r;
		},		
		GetParam : function(n){
			var _si = this.getObjects().session;
			if(typeof _si[n] == "undefined") return 0;
			return _si[n];
		},
		Refresh : function(o)
{
	  		var _t = Hemi.web.security.PageTickets;

   			if(o) this._handle_get_sessiondata("json",{json:o});
			else{
				//alert("Unsupported: Direct session query");
				uwmServices.getService("Session").getSafeSession(Hemi.guid(),{
					hemiSvcCfg:1,
					async:1,
					handler:this._prehandle_get_sessiondata
				});
			}
},

_handle_get_sessiondata : function(s, v)
{
   var _s = this.getProperties(), _si;
            this.getObjects().session = {};
			_si = this.getObjects().session;
		
			if(!v){
				alert("Error retrieving session data: " + v + " / " + v.json);
			}
			else{

	  
			  var oSession = (v.json ? v.json : v);
			
				if(oSession){

					var aParams = oSession.sessionData;
					for(var i= 0; aParams && i < aParams.length; i++){
						_si[aParams[i].name] = aParams[i].value;
					}
                    _si["IsLoggedIn"] =  (oSession.sessionStatus == "AUTHENTICATED");
                    _si["RecordId"] = oSession.userId;
				}
			    
			}
   
			var b = this.GetBoolParam("IsLoggedIn");
			var bChanged = 0;
			if(this.getProperties().last_state != b) bChanged = 1;
			this.getProperties().last_state = b;
			Hemi.log("onsessionrefresh " + oSession.sessionId + " / " + oSession.sessionStatus + " / " + oSession.userId);
			Hemi.message.service.publish("onsessionrefresh", this);
}
]]>
</application-component>
</application-components>